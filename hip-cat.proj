// ta_Dump File v3.0 -- code v7.0.1.0 rev7465
LeabraProject .projects["hip_cat"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_1"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ClusterRun @["ClusterRun"] { 
   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [26] {
    String_Data @["tag"] { };
    String_Data @["notes"] { };
    String_Data @["params"] { };
    String_Data @["status"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["cluster"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataTableCols @.jobs_done.data = [26] {
    String_Data @["tag"] { };
    String_Data @["notes"] { };
    String_Data @["params"] { };
    String_Data @["status"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["cluster"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataTableCols @.jobs_archive.data = [26] {
    String_Data @["tag"] { };
    String_Data @["notes"] { };
    String_Data @["params"] { };
    String_Data @["status"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["cluster"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataTableCols @.file_list.data = [9] {
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [11] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
    EditMbrItem @[2] { };
    EditMbrItem @[3] { };
    EditMbrItem @[4] { };
    EditMbrItem @[5] { };
    EditMbrItem @[6] { };
    EditMbrItem @[7] { };
    EditMbrItem @[8] { };
    EditMbrItem @[9] { };
    EditMbrItem @[10] { };
    EditMbrItem_Group @.gp["Stopping_criteria"] = [4] { 
     EditMbrItem @[0] { };
     EditMbrItem @[1] { };
     EditMbrItem @[2] { };
     EditMbrItem @[3] { };
    };
    EditMbrItem_Group @.gp["SAT_lesions"] = [2] { 
     EditMbrItem @[0] { };
     EditMbrItem @[1] { };
    };
    EditMbrItem_Group @.gp["WPT_lesions"] = [2] { 
     EditMbrItem @[0] { };
     EditMbrItem @[1] { };
    };
    EditMbrItem_Group @.gp["Dinos_lesions"] = [2] { 
     EditMbrItem @[0] { };
     EditMbrItem @[1] { };
    };
   };

   EditMthItem_Group @.mths = [8] {
    EditMthItem @[0] { };
    EditMthItem @[1] { };
    EditMthItem @[2] { };
    EditMthItem @[3] { };
    EditMthItem @[4] { };
    EditMthItem @[5] { };
    EditMthItem @[6] { };
    EditMthItem @[7] { };
   };
  };
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] = [6] { 
   DataTable @["Satellite_train"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Input"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["Satellite_test"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Input"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["Dinos_train"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Input"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["Dinos_test"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Input"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["WPT_train"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Input"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["WPT_test"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Input"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
  };
  DataTable_Group @.gp["OutputData"] = [6] { 
   DataTable @["TrialOutputData"] { 
    DataTableCols @.data = [15] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["trial_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["group_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["phase_no"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["minus_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["ext_rew"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Input_avg_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_in_avg_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out_avg_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["DG_avg_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["CA3_avg_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["CA1_avg_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["EpochOutputData"] { 
    DataTableCols @.data = [8] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["cnt_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_ext_rew"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["epoch_time_tot"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["epoch_time_usr"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["TrialTestOutputData"] { 
    DataTableCols @.data = [11] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["trial_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["minus_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_in_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["CA1_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["CA3_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["DG_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["LastTestOutputData"] { 
    DataTableCols @.data = [11] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["trial_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["minus_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_out_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["EC_in_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["CA1_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["CA3_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["DG_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["EpochTestOutputData"] { 
    DataTableCols @.data = [2] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["SlotEpochOutputData"] { 
    DataTableCols @.data = [8] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["cnt_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_ext_rew"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["epoch_time_tot"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["epoch_time_usr"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [0] {
  Program_Group @.gp["LeabraAll_Std"] = [10] { 
   Program @["LeabraBatch"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["batch"] { };
     ProgVar @["init_batch"] { };
     ProgVar @["max_batch"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [3] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       NetCounterInit @[0] { };
      };
     };
     Else @[1] { 
      ProgEl_List @.else_code = [1] {
       MemberAssign @[0] { };
      };
     };
     WhileLoop @[2] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [4] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	 ProgArg @[3] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @["LeabraTrain"] { 
    ProgObjList @.objs = [1] {
     RndSeed @["rnd_seed"] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @["RndInitType"] { 
      DynEnumItem_List @.enums = [2] {
       DynEnumItem @["OLD_SEED"] { };
       DynEnumItem @["NEW_SEED"] { };
      };
     };
    };

    ProgVar_List @.args = [4] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["no_prompts"] { };
     ProgVar @["batch"] { };
    };

    ProgVar_List @.vars = [17] {
     ProgVar @["max_epoch"] { };
     ProgVar @["error_counter"] { };
     ProgVar @["current_sse"] { };
     ProgVar @["epoch"] { };
     ProgVar @["MSP_learning_rate"] { };
     ProgVar @["MSP_sparse_projs"] { };
     ProgVar @["CA1_prop_act"] { };
     ProgVar @["train_mode"] { };
     ProgVar @["rnd_init"] { };
     ProgVar @["err_stopcrit_sse"] { };
     ProgVar @["rnd_seed"] { };
     ProgVar @["train_timer"] { };
     ProgVar @["output_table"] { };
     ProgVar @["test_data"] { };
     ProgVar @["fname"] { };
     ProgVar @["fname_prefix"] { };
     ProgVar @["runtest"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [6] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     If @[3] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     Else @[4] { 
      ProgEl_List @.else_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     IfGuiPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
    };

    ProgEl_List @.prog_code = [8] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[3] { };
     If @[4] { 
      ProgEl_List @.true_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[5] { };
     WhileLoop @[6] { 
      ProgEl_List @.loop_code = [5] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [18] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 AssignExpr @[2] { };
	 VarIncr @[3] { };
	 VarIncr @[4] { };
	 VarIncr @[5] { };
	 VarIncr @[6] { };
	 VarIncr @[7] { };
	 MethodCall @[8] { 
	  ProgArg_List @.meth_args = [4] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	   ProgArg @[3] { };
	  };
	 };
	 MethodCall @[9] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 ProgramCall @[10] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 AssignExpr @[11] { };
	 VarIncr @[12] { };
	 VarIncr @[13] { };
	 VarIncr @[14] { };
	 VarIncr @[15] { };
	 VarIncr @[16] { };
	 MethodCall @[17] { 
	  ProgArg_List @.meth_args = [4] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	   ProgArg @[3] { };
	  };
	 };
	};
       };
       ProgramCall @[2] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       AssignExpr @[3] { };
       NetCounterIncr @[4] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraEpoch"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["batch"] { };
    };

    ProgVar_List @.vars = [18] {
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
     ProgVar @["max_num_trials"] { };
     ProgVar @["when_to_test"] { };
     ProgVar @["trial_counter_for_test"] { };
     ProgVar @["output_table"] { };
     ProgVar @["test_data"] { };
     ProgVar @["fname"] { };
     ProgVar @["fname_prefix"] { };
     ProgVar @["epoch"] { };
     ProgVar @["runtest"] { };
     ProgVar @["correct_trials_counter"] { };
     ProgVar @["min_total_num_trials"] { };
     ProgVar @["threshold_correct_trials_stopcrit"] { };
     ProgVar @["threshold_sse_stopcrit"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [6] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     NetCounterInit @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     AssignExpr @[4] { };
     AssignExpr @[5] { };
    };

    ProgEl_List @.prog_code = [13] {
     AssignExpr @[0] { };
     MemberAssign @[1] { };
     NetCounterInit @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[6] { 
      ProgEl_List @.loop_code = [12] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       PrintVar @[1] { };
       PrintVar @[2] { };
       PrintVar @[3] { };
       PrintVar @[4] { };
       VarIncr @[5] { };
       If @[6] { 
	ProgEl_List @.true_code = [2] {
	 AssignExpr @[0] { };
	 If @[1] { 
	  ProgEl_List @.true_code = [22] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	   ProgramCall @[1] { 
	    ProgArg_List @.prog_args = [3] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	    };
	   };
	   AssignExpr @[2] { };
	   VarIncr @[3] { };
	   VarIncr @[4] { };
	   VarIncr @[5] { };
	   VarIncr @[6] { };
	   VarIncr @[7] { };
	   VarIncr @[8] { };
	   VarIncr @[9] { };
	   MethodCall @[10] { 
	    ProgArg_List @.meth_args = [4] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	     ProgArg @[3] { };
	    };
	   };
	   MethodCall @[11] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	   ProgramCall @[12] { 
	    ProgArg_List @.prog_args = [3] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	    };
	   };
	   AssignExpr @[13] { };
	   VarIncr @[14] { };
	   VarIncr @[15] { };
	   VarIncr @[16] { };
	   VarIncr @[17] { };
	   VarIncr @[18] { };
	   VarIncr @[19] { };
	   VarIncr @[20] { };
	   MethodCall @[21] { 
	    ProgArg_List @.meth_args = [4] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	     ProgArg @[3] { };
	    };
	   };
	  };
	 };
	};
       };
       ProgramCall @[7] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[8] { 
	ProgEl_List @.true_code = [1] {
	 VarIncr @[0] { };
	};
       };
       Else @[9] { 
	ProgEl_List @.else_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[10] { 
	ProgEl_List @.true_code = [2] {
	 AssignExpr @[0] { };
	 AssignExpr @[1] { };
	};
       };
       If @[11] { 
	ProgEl_List @.true_code = [2] {
	 AssignExpr @[0] { };
	 AssignExpr @[1] { };
	};
       };
      };
     };
     If @[7] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[11] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[12] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["LeabraTrial"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["phase_no"] { };
     ProgVar @["update_net_view"] { };
     ProgVar @["trial"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [9] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     NetCounterInit @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     WhileLoop @[3] { 
      ProgEl_List @.loop_code = [3] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     ProgramCall @[7] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[8] { };
    };
   };
   Program @["LeabraSettle"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["cycle"] { };
     ProgVar @["min_cycles"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[4] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     Else @[5] { 
      ProgEl_List @.else_code = [1] {
       AssignExpr @[0] { };
      };
     };
     WhileLoop @[6] { 
      ProgEl_List @.loop_code = [4] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       NetCounterIncr @[1] { };
       IfContinue @[2] { };
       IfBreak @[3] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     If @[9] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     NetUpdateView @[10] { };
    };
   };
   Program @["LeabraCycle"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputs"] { 
    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitor"] { 
    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [10] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["phase_no"] { };
       NetMonItem @["minus_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["avg_act"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitor"] { 
    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [8] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["SaveWeights"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["tag"] { };
     ProgVar @["wts_subdir"] { };
     ProgVar @["fname"] { };
     ProgVar @["epoch_str"] { };
     ProgVar @["batch_str"] { };
     ProgVar @["final_tag"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     IfReturn @[0] { };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] = [7] { 
   Program @["LeabraEpochTest"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["cycle_stop"] { };
    };

    ProgVar_List @.vars = [9] {
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["low_inhib_test"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["last_trial_mon"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
     ProgVar @["ec_out_RndDots"] { };
     ProgVar @["ec_in_RndDots"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [16] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     If @[2] { 
      ProgEl_List @.true_code = [2] {
       MemberAssign @[0] { };
       MemberAssign @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetDataLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
      };
     };
     If @[7] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[11] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     Comment @[12] { };
     MemberAssign @[13] { };
     MemberAssign @[14] { };
     MemberAssign @[15] { };
    };
   };
   Program @["LeabraTrialTest"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["cycle_stop"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["phase_no"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [8] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     WhileLoop @[2] { 
      ProgEl_List @.loop_code = [3] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     ProgramCall @[6] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[7] { };
    };
   };
   Program @["LeabraSettleTest"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["cyc_stop"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["cycle"] { };
     ProgVar @["min_cycles"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [12] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[4] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     Else @[5] { 
      ProgEl_List @.else_code = [1] {
       AssignExpr @[0] { };
      };
     };
     WhileLoop @[6] { 
      ProgEl_List @.loop_code = [4] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       NetCounterIncr @[1] { };
       IfContinue @[2] { };
       IfBreak @[3] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[9] { 
      ProgEl_List @.true_code = [0] {
      };
     };
     If @[10] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     NetUpdateView @[11] { };
    };
   };
   Program @["LeabraCycleTest"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputsTest"] { 
    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["LayerWriter_0"] { };
     ProgVar @["group_name"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
    };
   };
   Program @["LeabraTrialMonitorTest"] { 
    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [11] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["minus_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["EC_out_act"] { };
       NetMonItem @["EC_in_act"] { };
       NetMonItem @["CA1_act"] { };
       NetMonItem @["CA3_act"] { };
       NetMonItem @["DG_act"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["last_trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AddNewDataRow @[4] { };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitorTest"] { 
    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [2] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser3"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Tree"] { };
    PanelViewer @["Panels"] { };
    T3PanelViewer @["T3Frames"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [6] {
      T3Panel @["Satellite"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["Satellites_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [1] {
	  ScaleRange @[0] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["Satellite_lesions"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["NetView_4"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [1] {
	  ScaleRange @[0] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["WPT"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["WPT_theta_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [5] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["WPT_lesions"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["NetView_5"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [1] {
	  ScaleRange @[0] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["Dinos"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["Dinos_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [1] {
	  ScaleRange @[0] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["Dinos_lesions"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["NetView_6"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [1] {
	  ScaleRange @[0] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [6] {
  LeabraNetwork @["Satellite"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["maxda"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
   };

   BaseSpec_Group @.specs = [1] {
    LeabraLayerSpec @["Input_Output"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] = [4] { 
     LeabraUnitSpec @["HippoUnitSpec"] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.noise_sched = [0] {
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] { 
      BaseSpec_Group @.children = [6] {
       HippoEncoderConSpec @["EC_in_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["Input_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @["HippoBiasSpec"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["PerfPath"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["Mossy"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA3"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] { 
      BaseSpec_Group @.children = [4] {
       ECoutLayerSpec @["EC_out"] { 
	BaseSpec_Group @.children = [1] {
	 ECinLayerSpec @["EC_in"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @["DG"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA3LayerSpec @["CA3"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA1LayerSpec @["CA1"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     BaseSpec_Group @.gp["HippoPrjns"] = [6] { 
      FullPrjnSpec @["FullPrjn"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      OneToOnePrjnSpec @["OneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["RandomPerfPath"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
   };

   Layer_Group @.layers = [1] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [27] {
     };
    };
    Layer_Group @.gp["Hippocampus"] = [5] { 
     LeabraLayer @["EC_in"] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_Input"] { };
      };

      Unit_Group @.units = [27] {
      };
     };
     LeabraLayer @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["enc_sse"] { };
       UserDataItem @["enc_norm_err"] { };
      };

      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_CA1"] { };
      };

      Unit_Group @.units = [27] {
      };
     };
     LeabraLayer @["DG"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_EC_in"] { };
      };

      Unit_Group @.units = [400] {
      };
     };
     LeabraLayer @["CA3"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_DG"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [80] {
      };
     };
     LeabraLayer @["CA1"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [100] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
  LeabraNetwork @["Satellite_lesions"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["maxda"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
   };

   BaseSpec_Group @.specs = [6] {
    LeabraLayerSpec @["Input_Output"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["EC_out_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["EC_in_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["CA3_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["CA1_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["DG_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] = [4] { 
     LeabraUnitSpec @["HippoUnitSpec"] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.noise_sched = [0] {
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] { 
      BaseSpec_Group @.children = [6] {
       HippoEncoderConSpec @["EC_in_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["Input_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @["HippoBiasSpec"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["PerfPath"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["Mossy"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA3"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] { 
      BaseSpec_Group @.children = [4] {
       ECoutLayerSpec @["EC_out"] { 
	BaseSpec_Group @.children = [1] {
	 ECinLayerSpec @["EC_in"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @["DG"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA3LayerSpec @["CA3"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA1LayerSpec @["CA1"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     BaseSpec_Group @.gp["HippoPrjns"] = [6] { 
      FullPrjnSpec @["FullPrjn"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      OneToOnePrjnSpec @["OneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["RandomPerfPath"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
   };

   Layer_Group @.layers = [1] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [27] {
     };
    };
    Layer_Group @.gp["Hippocampus"] = [5] { 
     LeabraLayer @["EC_in"] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_Input"] { };
      };

      Unit_Group @.units = [27] {
      };
     };
     LeabraLayer @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["enc_sse"] { };
       UserDataItem @["enc_norm_err"] { };
      };

      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_CA1"] { };
      };

      Unit_Group @.units = [27] {
      };
     };
     LeabraLayer @["DG"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_EC_in"] { };
      };

      Unit_Group @.units = [400] {
      };
     };
     LeabraLayer @["CA3"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_DG"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [80] {
      };
     };
     LeabraLayer @["CA1"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [100] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
  LeabraNetwork @["WPT"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["maxda"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
   };

   BaseSpec_Group @.specs = [1] {
    LeabraLayerSpec @["Input_Output"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] = [4] { 
     LeabraUnitSpec @["HippoUnitSpec"] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.noise_sched = [0] {
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] { 
      BaseSpec_Group @.children = [6] {
       HippoEncoderConSpec @["EC_in_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["Input_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @["HippoBiasSpec"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["PerfPath"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["Mossy"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA3"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] { 
      BaseSpec_Group @.children = [4] {
       ECoutLayerSpec @["EC_out"] { 
	BaseSpec_Group @.children = [1] {
	 ECinLayerSpec @["EC_in"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @["DG"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA3LayerSpec @["CA3"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA1LayerSpec @["CA1"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     BaseSpec_Group @.gp["HippoPrjns"] = [6] { 
      FullPrjnSpec @["FullPrjn"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      OneToOnePrjnSpec @["OneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["RandomPerfPath"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
   };

   Layer_Group @.layers = [1] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [8] {
     };
    };
    Layer_Group @.gp["Hippocampus"] = [5] { 
     LeabraLayer @["EC_in"] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_Input"] { };
      };

      Unit_Group @.units = [8] {
      };
     };
     LeabraLayer @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["enc_sse"] { };
       UserDataItem @["enc_norm_err"] { };
      };

      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_CA1"] { };
      };

      Unit_Group @.units = [8] {
      };
     };
     LeabraLayer @["DG"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_EC_in"] { };
      };

      Unit_Group @.units = [400] {
      };
     };
     LeabraLayer @["CA3"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_DG"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [80] {
      };
     };
     LeabraLayer @["CA1"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [100] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
  LeabraNetwork @["WPT_lesions"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["maxda"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
   };

   BaseSpec_Group @.specs = [6] {
    LeabraLayerSpec @["Input_Output"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["EC_out_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["EC_in_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["CA3_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["CA1_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["DG_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] = [4] { 
     LeabraUnitSpec @["HippoUnitSpec"] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.noise_sched = [0] {
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] { 
      BaseSpec_Group @.children = [6] {
       HippoEncoderConSpec @["EC_in_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["Input_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @["HippoBiasSpec"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["PerfPath"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["Mossy"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA3"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] { 
      BaseSpec_Group @.children = [4] {
       ECoutLayerSpec @["EC_out"] { 
	BaseSpec_Group @.children = [1] {
	 ECinLayerSpec @["EC_in"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @["DG"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA3LayerSpec @["CA3"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA1LayerSpec @["CA1"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     BaseSpec_Group @.gp["HippoPrjns"] = [6] { 
      FullPrjnSpec @["FullPrjn"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      OneToOnePrjnSpec @["OneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["RandomPerfPath"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
   };

   Layer_Group @.layers = [1] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [8] {
     };
    };
    Layer_Group @.gp["Hippocampus"] = [5] { 
     LeabraLayer @["EC_in"] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_Input"] { };
      };

      Unit_Group @.units = [8] {
      };
     };
     LeabraLayer @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["enc_sse"] { };
       UserDataItem @["enc_norm_err"] { };
      };

      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_CA1"] { };
      };

      Unit_Group @.units = [8] {
      };
     };
     LeabraLayer @["DG"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_EC_in"] { };
      };

      Unit_Group @.units = [400] {
      };
     };
     LeabraLayer @["CA3"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_DG"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [80] {
      };
     };
     LeabraLayer @["CA1"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [100] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
  LeabraNetwork @["Dinos"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["maxda"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
   };

   BaseSpec_Group @.specs = [1] {
    LeabraLayerSpec @["Input_Output"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] = [4] { 
     LeabraUnitSpec @["HippoUnitSpec"] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.noise_sched = [0] {
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] { 
      BaseSpec_Group @.children = [6] {
       HippoEncoderConSpec @["EC_in_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["Input_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @["HippoBiasSpec"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["PerfPath"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["Mossy"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA3"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] { 
      BaseSpec_Group @.children = [4] {
       ECoutLayerSpec @["EC_out"] { 
	BaseSpec_Group @.children = [1] {
	 ECinLayerSpec @["EC_in"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @["DG"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA3LayerSpec @["CA3"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA1LayerSpec @["CA1"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     BaseSpec_Group @.gp["HippoPrjns"] = [6] { 
      FullPrjnSpec @["FullPrjn"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      OneToOnePrjnSpec @["OneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["RandomPerfPath"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
   };

   Layer_Group @.layers = [1] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [30] {
     };
    };
    Layer_Group @.gp["Hippocampus"] = [5] { 
     LeabraLayer @["EC_in"] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_Input"] { };
      };

      Unit_Group @.units = [30] {
      };
     };
     LeabraLayer @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["enc_sse"] { };
       UserDataItem @["enc_norm_err"] { };
      };

      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_CA1"] { };
      };

      Unit_Group @.units = [30] {
      };
     };
     LeabraLayer @["DG"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_EC_in"] { };
      };

      Unit_Group @.units = [400] {
      };
     };
     LeabraLayer @["CA3"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_DG"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [80] {
      };
     };
     LeabraLayer @["CA1"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [100] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
  LeabraNetwork @["Dinos_lesions"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["maxda"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
   };

   BaseSpec_Group @.specs = [6] {
    LeabraLayerSpec @["Input_Output"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["EC_out_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["EC_in_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["CA3_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["CA1_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @["DG_non_theta"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] = [4] { 
     LeabraUnitSpec @["HippoUnitSpec"] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.noise_sched = [0] {
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] { 
      BaseSpec_Group @.children = [6] {
       HippoEncoderConSpec @["EC_in_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["Input_EC_in"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @["HippoBiasSpec"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["PerfPath"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["Mossy"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA3"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @["CA3_CA1"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] { 
      BaseSpec_Group @.children = [4] {
       ECoutLayerSpec @["EC_out"] { 
	BaseSpec_Group @.children = [1] {
	 ECinLayerSpec @["EC_in"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @["DG"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA3LayerSpec @["CA3"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA1LayerSpec @["CA1"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     BaseSpec_Group @.gp["HippoPrjns"] = [6] { 
      FullPrjnSpec @["FullPrjn"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      OneToOnePrjnSpec @["OneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["RandomPerfPath"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
   };

   Layer_Group @.layers = [1] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [30] {
     };
    };
    Layer_Group @.gp["Hippocampus"] = [5] { 
     LeabraLayer @["EC_in"] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_Input"] { };
      };

      Unit_Group @.units = [30] {
      };
     };
     LeabraLayer @["EC_out"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["enc_sse"] { };
       UserDataItem @["enc_norm_err"] { };
      };

      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_CA1"] { };
      };

      Unit_Group @.units = [30] {
      };
     };
     LeabraLayer @["DG"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_EC_in"] { };
      };

      Unit_Group @.units = [400] {
      };
     };
     LeabraLayer @["CA3"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_DG"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [80] {
      };
     };
     LeabraLayer @["CA1"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Fm_EC_in"] { };
       LeabraPrjn @["Fm_EC_out"] { };
       LeabraPrjn @["Fm_CA3"] { };
      };

      Unit_Group @.units = [100] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects["hip_cat"] {
 name="hip_cat";
 desc="


";
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 license {
  owner=;
  license=NO_LIC;
  org=;
  year="2011";
  custom=;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_1"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ClusterRun @["ClusterRun"] {
   name="ClusterRun";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   cur_search_algo=NULL;
   last_submit_time=;
   notes=;
   extra_files=;
   svn_repo=;
   repo_url=;
   cluster=;
   queue=;
   run_time=;
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   parallel_batch=0;
   pb_batches=10;
   pb_nodes=0;
   nowin_x=0;
  };
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   running_updt=0;
   desc="Control panel for Hippocampus Simulation";
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="network";
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     cust_desc=1;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[1] {
     label="train_patterns";
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     cust_desc=1;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["input_data"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[2] {
     label="test_patterns";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["test_data"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[3] {
     label="LeabraEpoch_test_data";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["test_data"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[4] {
     label="writeout_filename";
     desc=" string value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname_prefix"]$$;
     mbr=ProgVar::string_val;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[5] {
     label="num_trials_per_epoch";
     desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["max_num_trials"]$$;
     mbr=ProgVar::int_val;
     is_numeric=1;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[6] {
     label="num_epochs_per_batch";
     desc="maximum number of epochs to run";
     cust_desc=1;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["max_epoch"]$$;
     mbr=ProgVar::int_val;
     is_numeric=1;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[7] {
     label="num_batches";
     desc="maximum number of batch runs to perform";
     cust_desc=1;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["max_batch"]$$;
     mbr=ProgVar::int_val;
     is_numeric=1;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[8] {
     label="max_test_cycles";
     desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["cycle_stop"]$$;
     mbr=ProgVar::int_val;
     is_numeric=1;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[9] {
     label="run_test_during_training";
     desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     cust_desc=1;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["runtest"]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[10] {
     label="LeabraEpoch_runtest";
     desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     cust_desc=1;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["runtest"]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem_Group @.gp["Stopping_criteria"] {
     name="Stopping_criteria";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="LeabraEpoch_when_to_test";
      desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["when_to_test"]$$;
      mbr=ProgVar::int_val;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
     EditMbrItem @[1] {
      label="LeabraEpoch_min_total_num_trials";
      desc="minimum number of trials before the netowrk can stop";
      cust_desc=1;
      base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["min_total_num_trials"]$$;
      mbr=ProgVar::int_val;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
     EditMbrItem @[2] {
      label="LeabraEpoch_thrsh_correct_trials_stopcrit";
      desc="number of consecutive trials below sse-threshold needed to stop the network";
      cust_desc=1;
      base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["threshold_correct_trials_stopcrit"]$$;
      mbr=ProgVar::int_val;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
     EditMbrItem @[3] {
      label="LeabraEpoch_thrsh_sse_stopcrit";
      desc="stopping criterion -- when error measure (mean error)
goes <= this value, stop training (when set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      cust_desc=1;
      base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["threshold_sse_stopcrit"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
    };
    EditMbrItem_Group @.gp["SAT_lesions"] {
     name="SAT_lesions";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="MSP";
      desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
      cust_desc=0;
      base=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"].wt_scale$$;
      mbr=WtScaleSpec::abs;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
     EditMbrItem @[1] {
      label="TSP";
      desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
      cust_desc=0;
      base=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"].wt_scale$$;
      mbr=WtScaleSpec::abs;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
    };
    EditMbrItem_Group @.gp["WPT_lesions"] {
     name="WPT_lesions";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="MSP";
      desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
      cust_desc=0;
      base=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"].wt_scale$$;
      mbr=WtScaleSpec::abs;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
     EditMbrItem @[1] {
      label="TSP";
      desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
      cust_desc=0;
      base=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"].wt_scale$$;
      mbr=WtScaleSpec::abs;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
    };
    EditMbrItem_Group @.gp["Dinos_lesions"] {
     name="Dinos_lesions";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="MSP";
      desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
      cust_desc=0;
      base=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"].wt_scale$$;
      mbr=WtScaleSpec::abs;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
     EditMbrItem @[1] {
      label="TSP";
      desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
      cust_desc=0;
      base=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"].wt_scale$$;
      mbr=WtScaleSpec::abs;
      is_numeric=1;
      is_single=1;
      param_search {
       srch=NO;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
    };
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Batch_Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Batch_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Batch_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Batch_Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Test_Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$$;
     mth=Program::Init;
    };
    EditMthItem @[5] {
     label="Test_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[6] {
     label="Test_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[7] {
     label="Test_Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Stop;
    };
   };
  };
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["Satellite_train"] {
    name="Satellite_train";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=187;
      ar {
       name="ar";
      [150] "cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";
"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";
"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";
"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";
"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";
"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";
"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";
"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";
"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";
"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";
"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";
"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";
"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";
"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";"cat1_sat1";"cat1_sat2";"cat1_sat3";"cat1_sat4";"cat1_sat5";
"cat2_sat1";"cat2_sat2";"cat2_sat3";"cat2_sat4";"cat2_sat5";"cat3_sat1";"cat3_sat2";"cat3_sat3";"cat3_sat4";"cat3_sat5";
      };
     };
     float_Data @["Input"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;27;1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=187;
      ar {
       name="ar";
      [1 27 1 1 150] 1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
      };
     };
     float_Data @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;27;1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=187;
      ar {
       name="ar";
      [1 27 1 1 150] 1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;0;0;0;1;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [150] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
    };
   };
   DataTable @["Satellite_test"] {
    name="Satellite_test";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.2281879186630249;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=136;
      ar {
       name="ar";
      [39] "cat1_sat1_full";"cat1_sat2_full";"cat1_sat3_full";"cat1_sat4_full";"cat1_sat5_full";"cat2_sat1_full";"cat2_sat2_full";"cat2_sat3_full";"cat2_sat4_full";"cat2_sat5_full";
"cat3_sat1_full";"cat3_sat2_full";"cat3_sat3_full";"cat3_sat4_full";"cat3_sat5_full";"cat1_sat2_uniq";"cat1_sat3_uniq";"cat1_sat4_uniq";"cat1_sat5_uniq";"cat2_sat2_uniq";
"cat2_sat3_uniq";"cat2_sat4_uniq";"cat2_sat5_uniq";"cat3_sat2_uniq";"cat3_sat3_uniq";"cat3_sat4_uniq";"cat3_sat5_uniq";"cat1_sat6_hard";"cat1_sat7_hard";"cat1_sat8_hard";
"cat1_sat9_hard";"cat2_sat6_hard";"cat2_sat7_hard";"cat2_sat8_hard";"cat2_sat9_hard";"cat3_sat6_hard";"cat3_sat7_hard";"cat3_sat8_hard";"cat3_sat9_hard";      };
     };
     float_Data @["Input"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;27;1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=187;
      ar {
       name="ar";
      [1 27 1 1 39] 1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;      };
     };
     float_Data @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;27;1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=187;
      ar {
       name="ar";
      [1 27 1 1 39] 1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;1;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;0;1;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;1;1;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [39] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;    };
   };
   DataTable @["Dinos_train"] {
    name="Dinos_train";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.244966447353363;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=146;
      ar {
       name="ar";
      [142] "train01_cA_f8";"train02_cB_f2";"train03_cA_f7";"train04_cA_f9";"train05_cA_f8";"train06_cB_f2";"train07_cA_f7";"train08_cB_f4";"train09_cA_f8";"train10_cB_f2";
"train11_cB_f4";"train12_cB_f3";"train13_cB_f3";"train14_cA_f7";"train15_cA_f6";"train16_cB_f1";"train17_cA_f9";"train18_cB_f1";"train19_cA_f6";"train20_cB_f3";
;;;;;;;;;;
;;;;;;;;;;
;;"train01_cA_f8";"train02_cB_f2";"train03_cA_f7";"train04_cA_f9";"train05_cA_f8";"train06_cB_f2";"train07_cA_f7";"train08_cB_f4";
"train09_cA_f8";"train10_cB_f2";"train11_cB_f4";"train12_cB_f3";"train13_cB_f3";"train14_cA_f7";"train15_cA_f6";"train16_cB_f1";"train17_cA_f9";"train18_cB_f1";
"train19_cA_f6";"train20_cB_f3";"train01_cA_f8";"train02_cB_f2";"train03_cA_f7";"train04_cA_f9";"train05_cA_f8";"train06_cB_f2";"train07_cA_f7";"train08_cB_f4";
"train09_cA_f8";"train10_cB_f2";"train11_cB_f4";"train12_cB_f3";"train13_cB_f3";"train14_cA_f7";"train15_cA_f6";"train16_cB_f1";"train17_cA_f9";"train18_cB_f1";
"train19_cA_f6";"train20_cB_f3";"train01_cA_f8";"train02_cB_f2";"train03_cA_f7";"train04_cA_f9";"train05_cA_f8";"train06_cB_f2";"train07_cA_f7";"train08_cB_f4";
"train09_cA_f8";"train10_cB_f2";"train11_cB_f4";"train12_cB_f3";"train13_cB_f3";"train14_cA_f7";"train15_cA_f6";"train16_cB_f1";"train17_cA_f9";"train18_cB_f1";
"train19_cA_f6";"train20_cB_f3";"train01_cA_f8";"train02_cB_f2";"train03_cA_f7";"train04_cA_f9";"train05_cA_f8";"train06_cB_f2";"train07_cA_f7";"train08_cB_f4";
"train09_cA_f8";"train10_cB_f2";"train11_cB_f4";"train12_cB_f3";"train13_cB_f3";"train14_cA_f7";"train15_cA_f6";"train16_cB_f1";"train17_cA_f9";"train18_cB_f1";
"train19_cA_f6";"train20_cB_f3";"train01_cA_f8";"train02_cB_f2";"train03_cA_f7";"train04_cA_f9";"train05_cA_f8";"train06_cB_f2";"train07_cA_f7";"train08_cB_f4";
"train09_cA_f8";"train10_cB_f2";"train11_cB_f4";"train12_cB_f3";"train13_cB_f3";"train14_cA_f7";"train15_cA_f6";"train16_cB_f1";"train17_cA_f9";"train18_cB_f1";
"train19_cA_f6";"train20_cB_f3";      };
     };
     float_Data @["Input"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;10;1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=187;
      ar {
       name="ar";
      [3 10 1 1 142] 1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
      };
     };
     float_Data @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;10;1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=187;
      ar {
       name="ar";
      [3 10 1 1 142] 1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [120] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
42;43;44;45;46;47;48;49;50;51;
52;53;54;55;56;57;58;59;60;61;
62;63;64;65;66;67;68;69;70;71;
72;73;74;75;76;77;78;79;80;81;
82;83;84;85;86;87;88;89;90;91;
92;93;94;95;96;97;98;99;100;101;
102;103;104;105;106;107;108;109;110;111;
112;113;114;115;116;117;118;119;120;121;
122;123;124;125;126;127;128;129;130;131;
132;133;134;135;136;137;138;139;140;141;
    };
   };
   DataTable @["Dinos_test"] {
    name="Dinos_test";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.244966447353363;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=146;
      ar {
       name="ar";
      [62] "test01_protA";"test02_protB";"test03_cB_f1";"test04_cA_f9";"test05_cA_f6";"test06_cA_f8";"test07_cB_f2";"test08_cA_f8";"test09_cA_f7";"test10_cA_f7";
"test11_cB_f2";"test12_cA_f7";"test13_cA_f8";"test14_cB_f4";"test15_cB_f2";"test16_cB_f3";"test17_cB_f3";"test18_cB_f3";"test19_cB_f4";"test20_cB_f2";
"test21_cB_f3";"test22_cA_f6";"test23_cA_f9";"test24_cB_f1";"test25_cA_f8";"test26_cA_f9";"test27_cA_f6";"test28_cB_f1";"test29_cB_f2";"test30_cA_f7";
"test31_cB_f3";"test32_cA_f9";"test33_cB_f4";"test34_cB_f1";"test35_cA_f6";"test36_cB_f1";"test37_cB_f4";"test38_cA_f8";"test39_cA_f9";"test40_cB_f4";
"test41_cA_f7";"test42_cA_f6";"train01_cA_f8";"train02_cB_f2";"train03_cA_f7";"train04_cA_f9";"train05_cA_f8";"train06_cB_f2";"train07_cA_f7";"train08_cB_f4";
"train09_cA_f8";"train10_cB_f2";"train11_cB_f4";"train12_cB_f3";"train13_cB_f3";"train14_cA_f7";"train15_cA_f6";"train16_cB_f1";"train17_cA_f9";"train18_cB_f1";
"train19_cA_f6";"train20_cB_f3";      };
     };
     float_Data @["Input"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;10;1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=187;
      ar {
       name="ar";
      [3 10 1 1 62] 1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;1;0;0;0;1;0;
1;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;1;0;0;1;0;0;0;
1;0;0;1;0;1;0;0;0;1;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;1;0;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
1;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;1;0;0;1;0;0;0;
1;0;1;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;0;1;0;1;0;0;0;1;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;0;0;1;
0;1;0;0;0;1;0;0;1;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;1;0;
0;1;0;1;0;0;1;0;0;1;
0;0;0;1;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;1;0;0;0;
1;0;0;1;0;1;0;0;0;1;
0;1;0;0;0;1;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;0;1;0;1;0;0;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;1;0;0;0;1;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;0;0;1;0;1;0;
0;0;1;0;0;1;0;0;1;0;
0;1;0;1;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;1;
0;1;0;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;0;1;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
1;0;0;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;0;1;0;0;1;0;1;0;
0;1;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;1;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;1;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;1;0;0;0;
1;0;0;1;0;1;0;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;1;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;1;0;0;1;0;1;0;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
1;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
1;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;1;0;
0;1;0;0;0;1;0;0;1;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;1;0;
1;0;0;1;0;0;1;0;0;0;
1;0;1;0;0;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;0;1;0;0;1;0;0;1;0;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
      };
     };
     float_Data @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.3137584030628204;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;10;1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=187;
      ar {
       name="ar";
      [3 10 1 1 62] 1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;1;0;0;0;1;0;
1;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;1;0;0;1;0;0;0;
1;0;0;1;0;1;0;0;0;1;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;1;0;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
1;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;1;0;0;1;0;0;0;
1;0;1;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;0;1;0;1;0;0;0;1;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;0;0;1;
0;1;0;0;0;1;0;0;1;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;1;0;
0;1;0;1;0;0;1;0;0;1;
0;0;0;1;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;1;0;0;0;
1;0;0;1;0;1;0;0;0;1;
0;1;0;0;0;1;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;0;1;0;1;0;0;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;1;0;0;0;1;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;0;0;1;0;1;0;
0;0;1;0;0;1;0;0;1;0;
0;1;0;1;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;1;
0;1;0;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;0;1;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
1;0;0;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;0;1;0;0;1;0;1;0;
0;1;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;1;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;1;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;1;0;0;0;
1;0;0;1;0;1;0;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;1;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;1;0;0;1;0;1;0;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
1;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
1;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;1;0;
0;1;0;0;0;1;0;0;1;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;1;0;
1;0;0;1;0;0;1;0;0;0;
1;0;1;0;0;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;1;0;0;1;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;0;1;0;0;1;0;0;1;0;
1;0;1;1;0;1;1;0;1;0;
1;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;1;0;1;1;0;1;
1;0;1;1;0;1;0;1;1;1;
0;1;1;0;1;1;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
1;0;1;0;1;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;1;0;1;1;1;0;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
0;1;1;1;0;1;1;0;1;0;
1;1;1;0;1;1;0;0;1;0;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;0;1;1;1;
0;1;0;1;1;1;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;1;1;1;0;
1;0;1;1;0;1;1;1;0;1;
1;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;1;0;1;1;0;
1;0;1;1;0;1;1;0;1;1;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;1;0;1;0;1;1;1;0;1;
0;1;0;0;1;0;1;0;0;0;
1;0;1;0;0;0;1;1;0;1;
1;1;0;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;0;
1;1;0;1;1;1;0;0;1;0;
0;0;1;0;1;0;0;1;0;0;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;0;1;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;1;0;1;
1;0;1;1;0;1;1;0;1;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;1;0;1;0;1;0;1;
1;0;1;1;0;1;1;0;1;1;
0;1;1;0;1;1;1;0;1;1;
0;1;1;0;1;0;1;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;1;0;1;
0;0;1;0;0;0;1;1;0;1;
1;0;1;1;1;0;1;0;1;1;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [62] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;    };
   };
   DataTable @["WPT_train"] {
    name="WPT_train";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1560402661561966;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=93;
      ar {
       name="ar";
      [1000] "pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";
"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";"pat1_cat1";
"pat1_cat1";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";"pat1_cat2";
"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";
"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";
"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";"pat2_cat1";
"pat2_cat1";"pat2_cat1";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";
"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";
"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";
"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";
"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";
"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat2_cat2";"pat3_cat1";"pat3_cat1";"pat3_cat1";"pat3_cat1";"pat3_cat1";"pat3_cat1";
"pat3_cat1";"pat3_cat1";"pat3_cat1";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";
"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";
"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";
"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";
"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";
"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";
"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";
"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";"pat3_cat2";
"pat3_cat2";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";
"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";
"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";
"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";
"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat1";
"pat4_cat1";"pat4_cat1";"pat4_cat1";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";
"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";
"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";
"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat4_cat2";"pat5_cat1";"pat5_cat1";"pat5_cat1";"pat5_cat1";"pat5_cat1";
"pat5_cat1";"pat5_cat1";"pat5_cat1";"pat5_cat1";"pat5_cat1";"pat5_cat1";"pat5_cat1";"pat5_cat2";"pat5_cat2";"pat5_cat2";
"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";
"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";
"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";
"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";
"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat5_cat2";"pat6_cat1";
"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";
"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat1";
"pat6_cat1";"pat6_cat1";"pat6_cat1";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";
"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";
"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat6_cat2";"pat7_cat1";"pat7_cat1";"pat7_cat1";"pat7_cat1";
"pat7_cat1";"pat7_cat1";"pat7_cat1";"pat7_cat1";"pat7_cat1";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";
"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";
"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";
"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat7_cat2";"pat9_cat1";"pat9_cat1";"pat9_cat1";
"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";
"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";
"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat1";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";
"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";
"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";
"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat9_cat2";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";
"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";
"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";
"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";
"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";
"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat1";"pat10_cat2";"pat10_cat2";"pat10_cat2";
"pat10_cat2";"pat10_cat2";"pat10_cat2";"pat10_cat2";"pat10_cat2";"pat10_cat2";"pat10_cat2";"pat10_cat2";"pat10_cat2";"pat11_cat1";
"pat11_cat1";"pat11_cat1";"pat11_cat1";"pat11_cat1";"pat11_cat1";"pat11_cat1";"pat11_cat1";"pat11_cat1";"pat11_cat1";"pat11_cat1";
"pat11_cat1";"pat11_cat1";"pat11_cat1";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";
"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";"pat11_cat2";
"pat11_cat2";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";
"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";
"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";
"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";
"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";
"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";
"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";
"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat1";"pat12_cat2";
"pat12_cat2";"pat12_cat2";"pat12_cat2";"pat12_cat2";"pat12_cat2";"pat12_cat2";"pat12_cat2";"pat12_cat2";"pat13_cat1";"pat13_cat1";
"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";
"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat1";"pat13_cat2";"pat13_cat2";"pat13_cat2";"pat13_cat2";
"pat13_cat2";"pat13_cat2";"pat13_cat2";"pat13_cat2";"pat13_cat2";"pat13_cat2";"pat13_cat2";"pat13_cat2";"pat13_cat2";"pat13_cat2";
"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";
"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";
"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";"pat14_cat1";
"pat14_cat1";"pat14_cat1";"pat14_cat2";"pat14_cat2";"pat14_cat2";"pat14_cat2";"pat14_cat2";"pat14_cat2";"pat14_cat2";"pat14_cat2";
"pat14_cat2";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";
"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat1";"pat8_cat2";
"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";
"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";"pat8_cat2";
      };
     };
     float_Data @["Input"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1560402661561966;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;4;2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=93;
      ar {
       name="ar";
      [1 4 2 1 1000] 0;0;0;1;1;1;0;0;0;0;
0;1;1;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;1;1;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;1;1;1;0;0;0;0;
0;1;1;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;1;1;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;1;1;1;0;0;0;0;
0;1;1;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;1;1;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;1;1;1;0;0;0;0;
0;1;1;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;1;1;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;1;1;1;0;0;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;1;1;1;0;0;
0;0;1;1;1;1;0;0;0;0;
1;1;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;1;1;1;1;
0;0;0;0;1;1;1;1;0;0;
0;0;1;1;1;1;0;0;0;0;
1;1;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;1;1;1;0;0;0;1;
0;1;1;1;0;0;0;1;0;1;
1;1;0;0;0;1;0;1;1;1;
0;0;0;1;0;1;1;1;0;0;
0;1;0;1;1;1;0;0;0;1;
0;1;1;1;0;0;0;1;0;1;
1;1;0;0;0;1;0;1;1;1;
0;0;0;1;0;1;1;1;0;0;
0;1;0;1;1;1;0;0;0;1;
0;1;1;1;0;0;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;1;1;
0;0;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;1;1;
0;0;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;1;1;
0;0;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;1;1;
0;0;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;1;1;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;1;1;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;1;1;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;1;1;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;1;1;1;0;0;0;1;1;1;
1;1;0;0;0;1;1;1;1;1;
0;0;0;1;1;1;1;1;0;0;
0;1;1;1;1;1;0;0;0;1;
1;1;1;1;0;0;0;1;1;1;
1;1;0;0;0;1;1;1;1;1;
0;0;0;1;1;1;1;1;0;0;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
0;0;1;1;1;0;1;0;0;0;
1;1;1;0;1;0;0;0;1;1;
1;0;1;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;0;1;0;
0;0;1;1;1;0;1;0;0;0;
1;1;1;0;1;0;0;0;1;1;
1;0;1;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;0;1;0;
0;0;1;1;1;0;1;0;0;0;
1;1;1;0;1;1;1;1;0;0;
1;0;1;1;1;1;0;0;1;0;
1;1;1;1;0;0;1;0;1;1;
1;1;0;0;1;0;1;1;1;1;
0;0;1;0;1;1;1;1;0;0;
1;0;1;1;1;1;0;0;1;0;
1;1;1;1;0;0;1;0;1;1;
1;1;0;0;1;0;1;1;1;1;
0;0;1;0;1;1;1;1;0;0;
1;0;1;1;1;1;0;0;1;0;
1;1;1;1;0;0;1;0;1;1;
1;1;0;0;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;1;1;1;1;
0;0;0;0;1;1;1;1;0;0;
0;0;1;1;1;1;0;0;0;0;
1;1;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;1;1;1;1;
0;0;0;0;1;1;1;1;0;0;
0;0;1;1;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;0;0;1;1;1;1;0;1;
0;0;1;1;1;1;0;1;0;0;
1;1;1;1;0;1;0;0;1;1;
1;1;0;1;0;0;1;1;1;1;
0;1;0;0;1;1;1;1;0;1;
0;0;1;1;1;1;0;1;0;0;
1;1;1;1;0;1;0;0;1;1;
1;1;0;1;0;0;1;1;1;1;
0;1;0;0;1;1;1;1;0;1;
0;0;1;1;1;1;0;1;0;0;
1;1;1;1;0;1;0;0;1;1;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
0;0;1;1;1;1;1;0;0;0;
1;1;1;1;1;0;0;0;1;1;
1;1;1;0;0;0;1;1;1;1;
1;0;0;0;1;1;1;1;1;0;
0;0;1;1;1;1;1;0;0;0;
1;1;1;1;1;0;0;0;1;1;
1;1;1;0;0;0;1;1;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;0;0;1;1;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;1;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;1;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;1;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;1;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;1;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;1;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;1;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;1;
      };
     };
     float_Data @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1560402661561966;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;4;2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=93;
      ar {
       name="ar";
      [1 4 2 1 1000] 0;0;0;1;1;1;0;0;0;0;
0;1;1;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;1;1;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;1;1;1;0;0;0;0;
0;1;1;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;1;1;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;1;1;1;0;0;0;0;
0;1;1;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;1;1;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;1;1;1;0;0;0;0;
0;1;1;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;1;1;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;1;1;1;0;0;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;0;1;1;0;0;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;1;1;1;0;0;
0;0;1;1;1;1;0;0;0;0;
1;1;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;1;1;1;1;
0;0;0;0;1;1;1;1;0;0;
0;0;1;1;1;1;0;0;0;0;
1;1;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;1;1;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;0;1;0;0;
1;1;0;0;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;1;0;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;1;0;1;1;1;0;0;0;1;
0;1;1;1;0;0;0;1;0;1;
1;1;0;0;0;1;0;1;1;1;
0;0;0;1;0;1;1;1;0;0;
0;1;0;1;1;1;0;0;0;1;
0;1;1;1;0;0;0;1;0;1;
1;1;0;0;0;1;0;1;1;1;
0;0;0;1;0;1;1;1;0;0;
0;1;0;1;1;1;0;0;0;1;
0;1;1;1;0;0;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;0;1;0;0;1;1;0;1;
0;1;0;0;1;1;0;1;0;1;
0;0;1;1;0;1;0;1;0;0;
1;1;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;1;1;
0;0;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;1;1;
0;0;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;1;1;
0;0;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;1;1;
0;0;0;1;1;0;1;1;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;1;1;0;0;0;1;1;0;
1;1;0;0;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;1;1;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;1;1;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;1;1;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;1;1;0;1;1;0;0;0;
1;1;0;1;1;0;0;0;1;1;
0;1;1;0;0;0;1;1;0;1;
1;1;1;1;0;0;0;1;1;1;
1;1;0;0;0;1;1;1;1;1;
0;0;0;1;1;1;1;1;0;0;
0;1;1;1;1;1;0;0;0;1;
1;1;1;1;0;0;0;1;1;1;
1;1;0;0;0;1;1;1;1;1;
0;0;0;1;1;1;1;1;0;0;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;1;1;0;0;1;0;0;1;
1;1;0;0;1;0;0;1;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;1;1;0;0;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;1;1;1;0;0;1;
0;0;1;1;1;0;0;1;0;0;
1;1;1;0;0;1;0;0;1;1;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;1;1;
0;0;1;0;1;0;1;1;0;0;
1;0;1;0;1;1;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
0;0;1;1;1;0;1;0;0;0;
1;1;1;0;1;0;0;0;1;1;
1;0;1;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;0;1;0;
0;0;1;1;1;0;1;0;0;0;
1;1;1;0;1;0;0;0;1;1;
1;0;1;0;0;0;1;1;1;0;
1;0;0;0;1;1;1;0;1;0;
0;0;1;1;1;0;1;0;0;0;
1;1;1;0;1;1;1;1;0;0;
1;0;1;1;1;1;0;0;1;0;
1;1;1;1;0;0;1;0;1;1;
1;1;0;0;1;0;1;1;1;1;
0;0;1;0;1;1;1;1;0;0;
1;0;1;1;1;1;0;0;1;0;
1;1;1;1;0;0;1;0;1;1;
1;1;0;0;1;0;1;1;1;1;
0;0;1;0;1;1;1;1;0;0;
1;0;1;1;1;1;0;0;1;0;
1;1;1;1;0;0;1;0;1;1;
1;1;0;0;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;1;1;1;1;
0;0;0;0;1;1;1;1;0;0;
0;0;1;1;1;1;0;0;0;0;
1;1;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;1;1;1;1;
0;0;0;0;1;1;1;1;0;0;
0;0;1;1;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
1;1;0;0;1;1;0;1;1;1;
0;0;1;1;0;1;1;1;0;0;
1;1;0;1;1;1;0;0;1;1;
0;1;0;0;1;1;1;1;0;1;
0;0;1;1;1;1;0;1;0;0;
1;1;1;1;0;1;0;0;1;1;
1;1;0;1;0;0;1;1;1;1;
0;1;0;0;1;1;1;1;0;1;
0;0;1;1;1;1;0;1;0;0;
1;1;1;1;0;1;0;0;1;1;
1;1;0;1;0;0;1;1;1;1;
0;1;0;0;1;1;1;1;0;1;
0;0;1;1;1;1;0;1;0;0;
1;1;1;1;0;1;0;0;1;1;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;1;1;0;0;1;1;
1;0;1;1;0;0;1;1;1;0;
0;0;1;1;1;1;1;0;0;0;
1;1;1;1;1;0;0;0;1;1;
1;1;1;0;0;0;1;1;1;1;
1;0;0;0;1;1;1;1;1;0;
0;0;1;1;1;1;1;0;0;0;
1;1;1;1;1;0;0;0;1;1;
1;1;1;0;0;0;1;1;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;0;0;0;1;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
1;1;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;0;0;1;1;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;1;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;1;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;1;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;1;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;1;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;1;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;1;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;1;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [1000] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
    };
   };
   DataTable @["WPT_test"] {
    name="WPT_test";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1560402661561966;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=93;
      ar {
       name="ar";
      [42] "pat1_cat1";"pat1_cat2";"pat1_test";"pat2_cat1";"pat2_cat2";"pat2_test";"pat3_cat1";"pat3_cat2";"pat3_test";"pat4_cat1";
"pat4_cat2";"pat4_test";"pat5_cat1";"pat5_cat2";"pat5_test";"pat6_cat1";"pat6_cat2";"pat6_test";"pat7_cat1";"pat7_cat2";
"pat7_test";"pat8_cat1";"pat8_cat2";"pat8_test";"pat9_cat1";"pat9_cat2";"pat9_test";"pat10_cat1";"pat10_cat2";"pat10_test";
"pat11_cat1";"pat11_cat2";"pat11_test";"pat12_cat1";"pat12_cat2";"pat12_test";"pat13_cat1";"pat13_cat2";"pat13_test";"pat14_cat1";
"pat14_cat2";"pat14_test";      };
     };
     float_Data @["Input"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1560402661561966;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;4;2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=93;
      ar {
       name="ar";
      [1 4 2 1 42] 0;0;0;1;1;1;0;0;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
0;0;0;1;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;1;
0;0;0;0;0;0;0;1;0;1;
1;1;0;0;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;0;0;
0;1;1;0;1;1;0;0;0;1;
1;0;0;0;1;1;0;1;1;0;
0;0;0;0;0;1;1;1;1;1;
0;0;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;0;0;1;0;
0;0;1;1;0;0;1;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;0;0;
1;1;1;0;1;0;0;0;0;0;
1;0;1;1;1;1;0;0;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;0;0;1;1;
1;1;0;0;0;0;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
0;0;1;1;1;1;0;1;0;0;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;0;0;1;1;1;1;
1;0;0;0;0;0;      };
     };
     float_Data @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1560402661561966;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;4;2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=93;
      ar {
       name="ar";
      [1 4 2 1 42] 0;0;0;1;1;1;0;0;0;0;
0;1;0;0;1;1;0;0;0;1;
0;0;1;1;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;1;1;
0;0;1;0;0;0;1;1;0;0;
1;1;1;1;0;0;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;1;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;1;
0;0;1;1;0;0;0;1;0;1;
1;1;0;0;0;1;0;1;0;0;
1;1;0;1;0;1;0;0;1;1;
0;1;1;0;1;1;0;0;0;1;
1;0;0;0;1;1;0;1;1;0;
1;1;0;0;0;1;1;1;1;1;
0;0;0;1;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;1;0;
0;0;1;1;0;0;1;0;0;0;
0;0;1;1;1;0;0;0;1;1;
0;0;1;0;0;1;1;1;0;0;
1;0;0;1;0;0;1;1;1;0;
0;1;0;0;0;0;1;0;1;0;
1;1;0;0;1;0;1;0;0;0;
1;1;1;0;1;0;1;1;0;0;
1;0;1;1;1;1;0;0;1;0;
1;1;0;0;1;1;1;0;1;1;
0;0;1;1;1;1;0;0;1;1;
0;0;1;1;0;0;0;0;1;1;
1;1;0;0;1;1;0;0;1;1;
0;1;1;1;0;0;1;1;0;1;
0;0;1;1;1;1;0;1;1;1;
0;0;1;1;1;0;1;1;0;0;
1;1;1;0;0;0;1;1;1;1;
1;0;1;1;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [42] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;    };
   };
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["TrialOutputData"] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_71";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 41;1;2;3;4;5;6;7;8;9;
41;11;12;13;14;15;16;17;18;19;
41;21;22;23;24;25;26;27;28;29;
41;31;32;33;34;35;36;37;38;39;
41;41;42;43;44;45;46;47;48;49;
41;51;52;53;54;55;56;57;58;59;
41;61;62;63;64;65;66;67;68;69;
41;71;72;73;74;75;76;77;78;79;
41;81;82;83;84;85;      };
     };
     String_Data @["trial_name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_79";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] "pat5_cat2";"pat5_cat2";"pat1_cat2";"pat9_cat1";"pat1_cat2";"pat8_cat1";"pat3_cat2";"pat8_cat1";"pat2_cat2";"pat1_cat2";
"pat1_cat1";"pat10_cat1";"pat1_cat1";"pat1_cat1";"pat5_cat1";"pat1_cat1";"pat12_cat1";"pat14_cat1";"pat2_cat1";"pat1_cat2";
"pat2_cat1";"pat6_cat2";"pat9_cat1";"pat14_cat1";"pat1_cat2";"pat8_cat1";"pat4_cat2";"pat4_cat2";"pat12_cat1";"pat5_cat2";
"pat12_cat1";"pat8_cat1";"pat10_cat1";"pat1_cat2";"pat8_cat1";"pat10_cat1";"pat1_cat2";"pat5_cat1";"pat8_cat2";"pat12_cat1";
"pat10_cat1";"pat12_cat2";"pat4_cat2";"pat13_cat1";"pat8_cat1";"pat1_cat2";"pat2_cat1";"pat4_cat1";"pat4_cat1";"pat13_cat2";
"pat9_cat1";"pat6_cat2";"pat10_cat1";"pat9_cat2";"pat10_cat1";"pat8_cat1";"pat3_cat2";"pat3_cat2";"pat4_cat1";"pat11_cat2";
"pat14_cat2";"pat9_cat2";"pat8_cat1";"pat11_cat2";"pat2_cat2";"pat1_cat2";"pat2_cat1";"pat6_cat1";"pat6_cat1";"pat10_cat1";
"pat1_cat2";"pat13_cat1";"pat9_cat1";"pat1_cat2";"pat2_cat1";"pat5_cat2";"pat11_cat2";"pat9_cat1";"pat3_cat2";"pat14_cat1";
"pat7_cat2";"pat1_cat2";"pat1_cat2";"pat8_cat1";"pat1_cat2";"pat9_cat1";      };
     };
     String_Data @["group_name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_80";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] "pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";
"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";
"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";
"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";
"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";
"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";
"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";
"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";
"pat14";"pat14";"pat14";"pat14";"pat14";"pat14";      };
     };
     int_Data @["phase_no"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;      };
     };
     float_Data @["minus_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_81";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;      };
     };
     float_Data @["sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_82";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 4.2187772;3.6925223;3.9628956;3.9999888;0.99885166;0.99332428;2.2885499;1.4891194;4.1973023;0;
2.5064089;1.4123845;3;2.9758458;1.2614887;1.2117076;1;2.0959172;2.4087481;0.33823022;
0;3.439764;0.81113255;1.3829395;0;0.35560155;2.3718123;1.3232919;0.9999398;0.58294225;
1.3465899;0;0.95726407;1.7563475;0;0.86836267;0;2.8309054;1.6276032;1.2519561;
0.42564383;0.93938112;0.29256353;1.9280714;0;0.41796586;1.4506799;1.294852;1.2109902;1.4169639;
0.99296594;1.3385974;0.94255644;1.6823912;0;0;0.99999976;0.99999797;1.3441988;1.6844463;
2.457377;1.3341182;0;0.99145436;1.2783916;0.39221388;1.3690144;1.4341098;0.90758359;0.58053374;
0;2.0051644;0;0;0.63468766;0.99696654;1.4228369;0;0.98685998;1.4080276;
1.9552796;0;0;0.92328423;0;0.36168692;      };
     };
     float_Data @["ext_rew"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_83";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
     float_Data @["Input_avg_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_84";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="Input_avg_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 0.47499999;0.47499999;0.35624999;0.47499999;0.35624999;0.35624999;0.47499999;0.35624999;0.35624999;0.35624999;
0.35624999;0.47499999;0.35624999;0.35624999;0.47499999;0.35624999;0.47499999;0.59375;0.35624999;0.35624999;
0.35624999;0.47499999;0.47499999;0.59375;0.35624999;0.35624999;0.35624999;0.35624999;0.47499999;0.47499999;
0.47499999;0.35624999;0.47499999;0.35624999;0.35624999;0.47499999;0.35624999;0.47499999;0.35624999;0.47499999;
0.47499999;0.47499999;0.35624999;0.59375;0.35624999;0.35624999;0.35624999;0.35624999;0.35624999;0.59375;
0.47499999;0.47499999;0.47499999;0.47499999;0.47499999;0.35624999;0.47499999;0.47499999;0.35624999;0.59375;
0.59375;0.47499999;0.35624999;0.59375;0.35624999;0.35624999;0.35624999;0.47499999;0.47499999;0.47499999;
0.35624999;0.59375;0.47499999;0.35624999;0.35624999;0.47499999;0.59375;0.47499999;0.47499999;0.59375;
0.59375;0.35624999;0.35624999;0.35624999;0.35624999;0.47499999;      };
     };
     float_Data @["EC_in_avg_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_85";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="EC_in_avg_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 0.48937503;0.48927248;0.36751217;0.48908731;0.36729535;0.36721218;0.48926818;0.36729762;0.36749676;0.36727399;
0.36726764;0.48908386;0.3671886;0.3671886;0.48905036;0.36719102;0.48902097;0.60970372;0.36731991;0.36726278;
0.36722991;0.48923039;0.4890056;0.60960859;0.36726326;0.36714911;0.36733592;0.36734205;0.48898607;0.48909205;
0.48898569;0.367147;0.48904219;0.3673372;0.36714458;0.48903665;0.36724544;0.48915127;0.36729631;0.4889279;
0.48899311;0.48900753;0.36731189;0.60936129;0.36711031;0.36721665;0.36730093;0.36723381;0.36722505;0.60933727;
0.48882651;0.48908326;0.4889009;0.48899138;0.48889649;0.36712927;0.48905197;0.48905194;0.36722317;0.6093365;
0.60940182;0.48892179;0.36703092;0.609294;0.36734244;0.36717069;0.36728609;0.48892212;0.48892254;0.48880756;
0.36716896;0.6090703;0.48871055;0.36716896;0.36725891;0.48889595;0.60918224;0.48869005;0.48898408;0.60911822;
0.60934782;0.36716723;0.36716729;0.36708376;0.36716455;0.48868185;      };
     };
     float_Data @["EC_out_avg_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_86";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="EC_out_avg_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 0.47499999;0.47499999;0.35624999;0.47499999;0.35624999;0.35624999;0.47499999;0.35624999;0.35624999;0.35624999;
0.35624999;0.47499999;0.35624999;0.35624999;0.47499999;0.35624999;0.47499999;0.59375;0.35624999;0.35624999;
0.35624999;0.47499999;0.47499999;0.59375;0.35624999;0.35624999;0.35624999;0.35624999;0.47499999;0.47499999;
0.47499999;0.35624999;0.47499999;0.35624999;0.35624999;0.47499999;0.35624999;0.47499999;0.35624999;0.47499999;
0.47499999;0.47499999;0.35624999;0.59375;0.35624999;0.35624999;0.35624999;0.35624999;0.35624999;0.59375;
0.47499999;0.47499999;0.47499999;0.47499999;0.47499999;0.35624999;0.47499999;0.47499999;0.35624999;0.59375;
0.59375;0.47499999;0.35624999;0.59375;0.35624999;0.35624999;0.35624999;0.47499999;0.47499999;0.47499999;
0.35624999;0.59375;0.47499999;0.35624999;0.35624999;0.47499999;0.59375;0.47499999;0.47499999;0.59375;
0.59375;0.35624999;0.35624999;0.35624999;0.35624999;0.47499999;      };
     };
     float_Data @["DG_avg_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_87";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="DG_avg_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 0.0097204503;0.0079239476;0.0044886633;0.0085233096;0.0047962456;0.0066230721;0.0046800799;0.0065212869;0.0060100164;0.0068551647;
0.0074018473;0.0064162756;0.0082576806;0.0082748486;0.009773165;0.0083217807;0.0055826674;0.0065342109;0.0046749269;0.0068652248;
0.0046846489;0.0061061955;0.0078133997;0.0066227019;0.0068958993;0.0047825999;0.005054214;0.0066203596;0.0067193531;0.0067950897;
0.0067269756;0.0047633261;0.004683245;0.004750838;0.0047519668;0.0046907021;0.0047551268;0.00703097;0.0047485894;0.0067839217;
0.004702705;0.0047246097;0.0047344402;0.007054917;0.0047438797;0.0047613471;0.0047331736;0.0068480158;0.0068558767;0.0047006514;
0.0075114737;0.00470539;0.0047198441;0.0047496576;0.0047227638;0.0047510932;0.0047341199;0.0047350647;0.0068750554;0.0047258763;
0.0047057183;0.0047550946;0.0047541372;0.0047294749;0.0047504711;0.0047728536;0.0047515761;0.0068553807;0.0068605514;0.0047358247;
0.0047737514;0.0091966614;0.0086967433;0.0047744596;0.0047577145;0.0047277962;0.0047358954;0.0087057771;0.0047446913;0.0068458547;
0.0047074007;0.0047774892;0.0047780667;0.0047645774;0.0047786366;0.0087151071;      };
     };
     float_Data @["CA3_avg_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_88";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="CA3_avg_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 0.074234009;0.034507312;0.06004075;0.021261141;0.077269062;0.074563518;0.080607593;0.079835989;0.073200807;0.11658628;
0.032762628;0.073496938;0.015819358;0.016284913;0.019465525;0.016848464;0.05109464;0.061885126;0.050940383;0.12104754;
0.051027078;0.063127622;0.025771553;0.060246103;0.12093277;0.051981919;0.06413243;0.08168041;0.0629391;0.091440186;
0.062223714;0.052063428;0.050904244;0.064661875;0.052405067;0.051422853;0.065122411;0.063994862;0.06517221;0.06582506;
0.052591771;0.065013513;0.065247901;0.070053913;0.053957693;0.065308824;0.053897806;0.071612805;0.071867071;0.064801775;
0.036549948;0.064975381;0.053423367;0.065114461;0.053470541;0.053955026;0.06501653;0.065128468;0.070413142;0.064977892;
0.065025426;0.065408893;0.053783379;0.065160103;0.065554909;0.065724596;0.053493738;0.068426654;0.068203188;0.053582065;
0.065688036;0.058237933;0.019032314;0.065746054;0.053653877;0.065516531;0.065330878;0.019400656;0.065497801;0.065983385;
0.065290794;0.065782756;0.065785088;0.053029824;0.065786973;0.019742634;      };
     };
     float_Data @["CA1_avg_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_89";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="CA1_avg_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [86] 0.14375815;0.14593475;0.14735064;0.15173241;0.14660387;0.12880221;0.13246295;0.12884322;0.14233081;0.14362763;
0.14338808;0.13906384;0.14568691;0.14757372;0.14189485;0.15031426;0.14927508;0.13939111;0.14828901;0.14411257;
0.15094954;0.14484614;0.14464802;0.14410076;0.14489321;0.13854292;0.14430366;0.14648475;0.14258052;0.14574903;
0.14068845;0.1392391;0.14468536;0.14310116;0.13934617;0.14631432;0.14254986;0.14747544;0.14360376;0.14260256;
0.14753361;0.15990394;0.15565187;0.16159052;0.14044422;0.13980107;0.15517396;0.14194798;0.14260906;0.15881585;
0.15503389;0.15230522;0.14787692;0.13622221;0.15010339;0.13921724;0.13716315;0.13755283;0.14375016;0.15088934;
0.16618267;0.14671378;0.13966835;0.15622135;0.16691604;0.14545594;0.15755649;0.1526531;0.15317483;0.14777862;
0.14623111;0.16357933;0.1581209;0.14659785;0.1590642;0.1514677;0.15893325;0.15848024;0.14953385;0.14183401;
0.15911996;0.14662738;0.14691681;0.13930792;0.14715037;0.15868935;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [86] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;    };
   };
   DataTable @["EpochOutputData"] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1604278087615967;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=90;
      ar {
       name="ar";
      [500] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1604278087615967;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=90;
      ar {
       name="ar";
      [500] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @["avg_sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_250";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1604278087615967;
	val_type_fixed=0;
       };
      };
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=90;
      ar {
       name="ar";
      [500] 0.99201381;0.62912369;0.8089391;0.30294859;0.95253468;0.63331586;0.86920786;0.47621059;0.79198515;0.29361659;
0;0.87678516;0.74714851;0.41780144;0.34603134;0.78006411;0.40526447;0.68136215;0.19833264;0;
1.0060313;0.67140818;0.64146715;0;1.0905503;1.0094991;0.97895765;0.55933905;1.2264783;0.66583711;
0.82193094;0;0.74675852;0.74640721;0.6300748;0.63094413;0;0.63403362;0.67705053;0.80460525;
0.45276508;0.7110073;0.29212773;0.23257703;0.52145892;0.61124575;0.69250411;0.56592828;0.25877291;1.3230722;
0.52926189;0.64839059;0.79884565;0.55590904;0.64459938;0.91085029;0.71823937;0.8179515;0.86172563;0.45934188;
0.41885191;0.36464387;0.88768852;0.81386393;0.52248019;0.35134834;0.65507275;0.70754665;0.40719837;0.9191044;
0.7797209;0.73560983;0.67655909;0;0.57049859;0.5686605;0.89198655;0.46458444;0;0.5879795;
0.75117034;0.90301657;0.76510215;0.47027805;0.41131216;0.31815222;0.33311233;0.57099324;0.6928975;0.75056505;
0;0.34207201;0;0.68882418;0.92408735;0.56100798;1.0031801;0.36665756;0.9092837;0.54445791;
0.69512159;0.57429767;0.77464181;0.82656306;1.0588715;1.0735173;0;0.65094727;0;0.52735609;
0.4995873;0.73692638;0.82374829;0.7428118;0.35811302;0.57894981;0.92231148;1.0574552;0.37085134;0.98187476;
0.52287918;0.19907439;0.30660796;0.97680235;0.93662286;0.96617299;1.0469012;1.0692583;0.37783355;0.82789344;
0.52520859;0.90324569;0.63273478;0.88384259;0.45609346;0.39476871;0.4655714;0.80912894;0.32430235;0.97346944;
0.93959844;0.66605186;0;0;0.75990403;0.66654378;0.73681211;1.6323671;0.64119977;0.99997532;
0;0.76980966;0.5;0.98074794;0.45948887;0.58340615;0.9993428;0.46905017;0.85707253;0.60374773;
0.6474297;0;0.83502758;0.48496711;0.48067456;0.55287427;0.59590966;0.80864739;0.50893134;0.20752421;
0.56212354;0.23885274;0.093841247;0.83852768;0.16161676;0.45098987;0.25428462;0.81869739;0.24945039;0.49933788;
0.99908066;0.56689221;0.83918017;0.96608448;0.83921212;0.8507784;0.31791499;0.78028727;0.70581615;1.1150109;
0.23127247;0.91940159;0.9802112;0.35374916;0.96858418;0.40026626;0.64536256;0.89973575;0.56176841;0.49397364;
0.62900531;0.48090073;0.79403675;0.61199969;0.99356437;0.999533;0.45446026;0.82052773;0.74325836;0.99764258;
0.42775959;0.80895418;0.83687985;0.58239514;1.0837048;0.33043647;0.75282341;0.47417009;0.32894993;0.77103537;
0.79275072;0.99709302;0.56211567;0.54402393;0.61738098;0;0.92813599;0.81975353;0.96077216;0.64340979;
0.86611384;0.55400002;0.64256805;0.31244278;0.88814515;0.74426866;0.35981464;0.43487534;0.52888989;0.30524775;
0.42417282;0.72303516;0.49611545;0.70546615;0.89875293;0.70019728;0.56203723;1.1200836;0.24617529;0;
0.56996304;0;0.49922806;0.54664499;0.78629351;0;0.90518057;0.85062355;1.0526106;0.74733937;
0.90895444;1.0248375;0.61410022;1.0194465;0.49781275;0.70630211;0.69162399;0.91947412;0.65322119;1.0133595;
0.8291164;0.50601929;1.0646312;0.71257979;1.0574957;0.56227279;0.97455615;0.40696305;0.61830616;0.25645274;
0.32876626;0.61781502;1.0704886;0;0.18685104;0.77864569;0.90453106;0.5615629;0.10056546;0.57205254;
0.67333806;0.60952908;0;0.32632902;0;0.99973583;0.499035;0.56032515;0.92022026;0.86067152;
1.0007277;0.78312016;0.32915914;0.41390115;0;0;0.82025492;0.39960971;0.58650881;0.64494509;
0;0.74690586;1.254487;0.80629152;0;0.73818594;0.50558323;0.95615321;0.31563416;0;
0.87221718;0.1996551;0.54378474;0.88445264;0.69627351;0.58537525;0.48565105;0.50902891;0.33269939;1.1239245;
0;0;0.55726588;0.57908642;0.9965964;0.4768073;0.79018319;0.60016716;0.71357334;0.33129248;
0.20085166;0.80761486;0.76442868;1.0045797;0.82821655;0.77898866;0.75586957;0.9077459;0.67467731;0.95196486;
0.85639954;0;0.34813535;0.496622;0.92014045;0.58957767;0.75087667;0.41055238;0.38892186;0.40476933;
0.72291845;0.55691171;0.56558168;0.40566388;0.59441584;0.49536529;0.77841538;0.50051963;0.78904289;0;
0.69865453;0.68095392;0.79392773;1.2044946;0.63350016;0.24616827;0.875898;0.26010934;0.62630105;1.1085892;
0.9265461;0.65126038;0.24764906;0.70649385;0.32832971;0.92931432;0.99394864;1.1181201;0.63666278;0.33084777;
0.85497546;0.33182713;0.77126586;0.94450295;0.61598676;0.31544051;1.0740499;0.57541537;0;0.63570654;
0.57058847;0.52399707;0.76306438;0.99986267;0.42006865;0.78357822;0.62636727;1.0770234;0;0.96422577;
0.49851844;0;0;0.66520369;0.99813139;0.49516594;0.33333328;0.39613926;0.33015719;0.83255178;
0.59154201;1.0497591;0.68125808;0.53148383;0.30141544;0.89823055;0;0.67988437;1.0325671;1.1105896;
0.89431047;0.9502967;0.81272018;0.46419829;0.99079102;0.5050683;0.85983133;0.26237497;1.0811815;0.85651666;
0.82398111;0.4425872;0.78173429;0.37093109;0.26750988;0;0.81020796;0.67124957;0.73231566;0.30837086;
0.29100129;0.78872263;0.61350405;0.46751526;0.8897177;0.19983231;0.61228114;0.57631826;0.38509855;0.73418236;
0.19990207;0.89070404;0.43268475;0;0.86904293;1.0309973;0.57731068;0.79316521;0.46089113;0.72328472;
0.48674476;0.79901844;0.4933773;0.48576507;0.75269383;0.67826211;0.99223727;0.61787742;0.8927725;0.4999994;
0.78761387;0.86345577;0.68870443;0;0.5;0.76637244;1.0177188;0.72252965;0.48458448;0.72312313;
0.63376439;0;0.98365712;0.65847027;0.14639311;0.60120201;1.1982512;0.77557141;0.87442684;0.5400418;
      };
     };
     float_Data @["cnt_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_251";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1604278087615967;
	val_type_fixed=0;
       };
      };
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=90;
      ar {
       name="ar";
      [500] 2;5;6;2;8;5;2;3;4;1;
0;7;7;1;4;8;2;6;1;0;
5;4;5;0;9;7;8;2;6;7;
6;0;5;5;4;6;0;3;6;5;
3;4;2;1;5;5;2;3;1;9;
4;5;6;5;3;8;5;7;5;4;
3;2;1;1;5;2;4;1;3;8;
1;8;6;0;3;3;9;2;0;7;
5;3;3;4;2;1;1;3;7;1;
0;2;0;4;7;5;9;2;5;4;
3;4;5;7;8;6;0;4;0;2;
2;5;7;7;2;4;6;6;2;1;
3;1;2;7;4;7;6;6;2;8;
3;7;4;4;2;2;1;7;2;9;
4;4;0;0;7;5;5;8;2;1;
0;6;1;1;3;3;1;2;5;6;
5;0;5;1;1;5;4;6;4;1;
2;1;1;5;1;3;1;5;1;1;
1;4;5;5;5;5;2;6;6;8;
1;1;1;3;2;4;7;7;3;3;
4;3;4;5;1;2;4;5;5;5;
1;4;5;3;7;1;6;2;1;5;
7;1;4;3;3;0;6;8;7;2;
8;3;5;1;8;5;2;3;2;1;
4;7;1;5;8;5;1;7;2;0;
4;0;2;2;7;0;5;6;6;7;
6;6;5;6;1;3;5;7;5;6;
5;3;8;4;7;3;7;1;6;2;
1;2;2;0;1;4;6;5;1;4;
5;5;0;2;0;1;1;4;7;4;
10;6;1;3;0;0;6;1;1;4;
0;6;8;5;0;3;3;1;1;0;
6;1;4;6;4;5;3;4;1;6;
0;0;2;4;1;1;6;5;3;1;
1;4;4;6;3;5;3;7;6;6;
6;0;1;3;3;4;6;2;1;2;
8;5;1;2;3;2;3;4;7;0;
5;5;6;7;6;1;7;2;3;9;
7;4;1;3;1;4;4;7;5;1;
5;1;8;8;4;1;8;7;0;5;
3;4;7;1;3;3;4;6;0;1;
1;0;0;2;2;2;1;2;1;2;
6;3;4;3;2;8;0;7;6;9;
8;8;7;2;8;4;2;1;8;5;
6;3;5;3;1;0;7;5;8;1;
2;6;4;4;4;1;4;3;1;6;
1;5;4;0;4;7;3;6;1;4;
6;5;1;3;7;4;8;4;7;2;
5;5;2;0;1;6;5;4;3;3;
5;0;1;6;2;5;8;5;7;3;
      };
     };
     float_Data @["avg_ext_rew"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_252";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1604278087615967;
	val_type_fixed=0;
       };
      };
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=90;
      ar {
       name="ar";
      [500] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @["avg_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_253";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1604278087615967;
	val_type_fixed=0;
       };
      };
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=90;
      ar {
       name="ar";
      [500] 80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
      };
     };
     float_Data @["epoch_time_tot"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_254";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1604278087615967;
	val_type_fixed=0;
       };
      };
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=90;
      ar {
       name="ar";
      [500] 4.3299999;4.6300001;4.6399999;4.3299999;4.5100002;4.6300001;4.3499999;4.54;4.48;4.3099999;
4.21;4.6399999;4.48;5.75;4.5300002;4.4299998;4.5599999;4.4200001;4.4099998;4.3699999;
4.4400001;4.5599999;4.3400002;4.1900001;4.6399999;4.54;4.46;4.4200001;4.5100002;4.77;
4.6500001;4.5;4.4200001;4.4899998;4.7199998;4.5300002;4.0700002;4.3600001;4.6799998;4.5;
4.5100002;4.3400002;4.3499999;4.5;4.5700002;4.5599999;4.5300002;4.21;4.3600001;4.8299999;
4.8200002;4.3299999;4.6599998;4.6999998;4.6599998;4.5500002;4.8200002;4.5799999;4.6100001;4.6300001;
4.4499998;4.6799998;4.29;4.3299999;4.5300002;4.5599999;4.75;4.3299999;4.4200001;5.04;
4.71;4.6799998;4.5599999;4.27;4.3899999;4.3899999;4.8000002;4.4400001;4.3600001;4.5999999;
4.7199998;4.46;4.6100001;4.3800001;4.4899998;4.48;4.5999999;8.9399996;8.2600002;7.29;
7.3699999;8.8500004;5.3499999;7.4899998;4.8200002;4.9499998;5.8800001;30.35;16.809999;19.85;
20.620001;17.6;15.27;22.530001;17.27;19.440001;16.940001;18.200001;19.43;17.379999;
21.9;16.940001;18.23;18.389999;20.68;21;17.09;19.530001;16.75;20.18;
17.200001;18.66;18.440001;18.620001;4.7800002;5.0700002;4.6999998;4.96;4.3099999;5.02;
4.7399998;5;4.4699998;5.5500002;4.54;5.1999998;6.23;5.0999999;4.7199998;5.1599998;
4.9000001;4.6900001;4.75;5.0799999;4.8600001;5.25;4.3800001;4.6599998;4.75;4.73;
4.6900001;5.3099999;5.0799999;4.5700002;4.7800002;4.73;4.8499999;5.1700001;5.2199998;4.9200001;
5.2600002;5.0599999;5.0300002;5.1100001;4.7600002;5.02;5.0599999;5.3099999;4.8000002;5.02;
4.77;4.8099999;5.0700002;5.0100002;4.5300002;5.0900002;5.0500002;5.0100002;5;4.8499999;
4.8899999;13.1;34.580002;28.440001;27.16;25.57;23.83;20.83;24.780001;41.349998;
22.049999;24.66;23.309999;38.32;45.830002;42.669998;31.6;46.48;47.889999;28.219999;
30.780001;30.43;46.98;26.290001;23.379999;28.860001;27.16;28.190001;29.73;33.389999;
29.209999;29.01;8.2299995;5.0100002;5.6199999;6.6100001;5.4400001;6.9699998;5.7600002;5.9899998;
6.0500002;5.3600001;6.71;5.4200001;6.8200002;6.1999998;5.3800001;6.6500001;6.1199999;8.0100002;
6.98;5.4000001;5.46;6.1799998;5.3800001;6.23;5.5999999;6.2199998;6.27;6.5599999;
9.3100004;6.0799999;9.3699999;6.1599998;7.23;8.4200001;6.7800002;7.02;6.3699999;6.2600002;
6.54;7.6399999;5.77;5.4899998;4.73;4.25;4.6799998;4.6399999;4.3299999;4.8499999;
4.8099999;4.6399999;4.8299999;4.5700002;4.3499999;4.8600001;4.77;13.37;4.8699999;4.98;
4.8299999;4.5599999;4.6199999;4.4899998;4.4499998;5.54;4.5100002;4.29;4.8400002;4.5700002;
4.3400002;4.6199999;4.5700002;4.6300001;4.4299998;4.5999999;4.9000001;4.5799999;4.54;4.5900002;
5.0500002;4.6900001;4.3600001;4.4200001;4.29;4.5999999;4.6500001;4.5100002;4.73;4.5900002;
4.6500001;4.9699998;4.77;4.8000002;4.54;4.2600002;4.8400002;4.4200001;4.7600002;4.5900002;
4.3800001;4.6799998;4.7800002;4.8800001;4.54;4.3600001;4.3899999;4.1500001;4.21;4.2600002;
4.4699998;4.3400002;4.3000002;4.5500002;4.2600002;4.5500002;4.6300001;4.29;4.23;4.3400002;
4.29;4.2399998;4.4899998;4.3200002;4.21;4.5;4.5500002;4.6100001;4.21;4.1700001;
4.3600001;4.29;4.3600001;4.6900001;4.23;4.4000001;4.2399998;4.54;5.02;4.6100001;
4.3699999;4.0500002;4.1100001;4.46;4.4099998;4.6500001;4.52;4.4899998;4.5799999;4.5500002;
4.6500001;4.8400002;4.3299999;4.5;4.4000001;4.2800002;4.3400002;4.6900001;4.4699998;4.3099999;
4.7399998;4.4400001;4.54;4.5999999;4.6500001;4.3299999;4.8400002;4.4499998;4.3899999;4.6300001;
4.4699998;4.5;4.4000001;4.3000002;6.27;7.0300002;5.8200002;6.0500002;6.1100001;5.79;
6.4400001;5.73;6.0599999;6.1500001;5.8600001;5.7600002;6.3800001;6.3400002;5.77;6.3800001;
5.8299999;6.4299998;6.1999998;5.8800001;5.8600001;5.8000002;6.0900002;6.4000001;5.71;5.8899999;
5.8800001;5.7399998;5.5999999;5.7800002;5.8099999;5.75;6.0900002;5.4699998;5.5799999;5.54;
6.1700001;5.7199998;6.23;6.1100001;5.9000001;6.29;5.8699999;6.0999999;6.3600001;6.0700002;
6.4200001;5.98;6.4099998;5.9899998;6.3299999;5.9499998;5.8499999;5.8899999;6.3200002;5.98;
6.0700002;6.1300001;6.0500002;5.9699998;5.98;5.6700001;6.29;6.4699998;6.2399998;5.8499999;
5.8200002;6.1599998;6.0100002;5.8299999;6.1900001;6.1300001;6.0500002;6.0100002;5.98;5.9899998;
5.7399998;6.48;6.1799998;5.9099998;5.9899998;6.5;6.02;6.04;5.8899999;5.8000002;
5.96;6.2600002;5.71;6.2199998;6.4200001;5.73;5.9899998;6.0100002;6.02;6.25;
6.1700001;6.23;5.8600001;5.6500001;6.0999999;6.4400001;6.0300002;5.9699998;5.7600002;5.7800002;
6.0500002;5.8699999;5.7199998;6.3899999;6.1999998;6.3899999;5.98;6;6.4299998;6.2199998;
      };
     };
     float_Data @["epoch_time_usr"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_255";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1604278087615967;
	val_type_fixed=0;
       };
      };
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=90;
      ar {
       name="ar";
      [500] 4.0300002;4.3499999;4.3099999;4.0700002;4.27;4.3800001;4.0900002;4.1900001;4.21;4.02;
3.98;4.3600001;4.1900001;5.0999999;4.2600002;4.1700001;4.29;4.1599998;4.1599998;4.1100001;
4.1700001;4.27;4.1399999;3.9200001;4.3899999;4.27;4.2199998;4.1599998;4.25;4.5;
4.3400002;4.1999998;4.1599998;4.2199998;4.4699998;4.2800002;3.8699999;4.1100001;4.4000001;4.2399998;
4.2399998;4.1300001;4.1100001;4.23;4.3200002;4.3099999;4.2399998;3.99;4.1199999;4.5500002;
4.5300002;4.0799999;4.3099999;4.4499998;4.3600001;4.2800002;4.5500002;4.3299999;4.3600001;4.3699999;
4.1799998;4.3699999;4.04;4.0300002;4.29;4.3099999;4.4200001;4.0599999;4.1500001;4.7199998;
4.3899999;4.4099998;4.3099999;4.0500002;4.1500001;4.1599998;4.5300002;4.1199999;4.0799999;4.3099999;
4.4699998;4.21;4.3600001;4.1300001;4.21;4.1799998;4.3400002;8.3199997;7.6799998;6.77;
6.8099999;7.7399998;4.9200001;6.23;4.5599999;4.6599998;5.4699998;13.32;10.9;11.77;
11.54;11.34;10.66;12.17;11.54;12.1;10.21;11.39;11.38;11.26;
11.83;11.03;11.6;11.89;12.16;11.95;11.27;11.76;10.78;11.89;
11.29;11.98;11.3;11.75;4.5;4.9299998;4.4299998;4.6300001;4.0599999;4.71;
4.48;4.6500001;4.1799998;5.1599998;4.2800002;4.8099999;6.1300001;4.8200002;4.6399999;5.0999999;
4.6199999;4.4299998;4.4499998;4.75;4.6100001;4.96;4.1199999;4.4200001;4.4699998;4.4499998;
4.5500002;4.98;5;4.3099999;4.4899998;4.46;4.5100002;5.0700002;4.9200001;4.6199999;
4.9000001;4.75;4.7199998;4.79;4.4299998;4.7399998;4.73;5.0500002;4.4899998;4.7199998;
4.4699998;4.54;5.0500002;4.7399998;4.23;4.8000002;4.6799998;4.71;4.6900001;4.54;
4.6100001;8.3299999;13.6;13.41;13.63;14.08;13.4;13.47;14.39;13.64;
13.26;13.35;13.11;12.62;12.57;13.72;14.05;12.99;12.75;12.73;
13.54;12.8;12.55;14.64;13.26;13.35;13.77;13.85;13.52;13.87;
13.25;13.69;7.5599999;4.6199999;5.3299999;5.6999998;5;6.3200002;5.3099999;5.52;
5.6599998;4.9499998;5.9699998;4.9699998;6.0799999;5.5300002;5;5.96;5.4899998;6.73;
6.2399998;5.21;5.3099999;5.48;5.2199998;5.6100001;5.0799999;5.6700001;5.5999999;6.0700002;
7.9400001;5.5300002;8.1999998;5.4299998;6.4499998;7.25;6.1399999;6.4400001;6.1199999;5.6999998;
6.3099999;6.4299998;5.1500001;5.0999999;4.4699998;4.0900002;4.3699999;4.3099999;4.1100001;4.6500001;
4.4200001;4.3800001;4.52;4.3200002;4.1500001;4.5100002;4.52;9.0799999;4.3299999;4.3200002;
4.3299999;4.4000001;4.3899999;4.3099999;4.3099999;5.1900001;4.3400002;4.0799999;4.54;4.1900001;
4.0300002;4.5599999;4.3299999;4.27;4.1900001;4.3099999;4.4400001;4.3200002;4.3299999;4.46;
4.6500001;4.29;4.1700001;4.1500001;4.0100002;4.6700001;4.1900001;4.25;4.48;4.25;
4.3899999;4.6399999;4.73;4.6199999;4.2199998;4.0500002;4.46;4.21;4.5799999;4.3200002;
4.1599998;4.1799998;4.4400001;4.8499999;4.1300001;4.1300001;4.1700001;4.0100002;3.98;4.0300002;
4.2199998;4.0900002;4.0799999;4.3000002;4.0500002;4.29;4.29;4.1100001;3.9100001;4.1199999;
4.0799999;4.0799999;4.1700001;4.0799999;4.0500002;4.1100001;4.2800002;4.3600001;4.0100002;3.98;
4.1399999;4.0500002;4.1199999;4.3800001;3.99;4.1500001;4.04;4.1999998;4.6900001;4.3000002;
4.1399999;3.8900001;3.96;4.2199998;4.04;4.2600002;4.23;4.1799998;4.2199998;4.3000002;
4.3099999;4.52;4.0999999;4.25;4.1599998;4.0700002;4.0799999;4.2600002;4.21;4.0700002;
4.3699999;4.1599998;4.27;4.23;4.2600002;4.1100001;4.4299998;4.21;4.1399999;4.3299999;
4.1799998;4.3000002;4.0500002;4.0900002;5.9699998;6.6900001;5.5799999;5.7600002;5.8099999;5.5100002;
6.1300001;5.46;5.79;5.8299999;5.5700002;5.4699998;6.0900002;6.04;5.4699998;6.04;
5.5300002;6.1100001;5.9400001;5.5799999;5.5999999;5.54;5.79;6.1100001;5.4400001;5.5999999;
5.5599999;5.4699998;5.3400002;5.5100002;5.54;5.4899998;5.79;5.2199998;5.3299999;5.2600002;
5.8699999;5.4499998;5.9499998;5.8499999;5.6500001;6.0100002;5.54;5.8200002;6.0700002;5.77;
6.0999999;5.73;6.0900002;5.6900001;6.0300002;5.6500001;5.5500002;5.5700002;6.02;5.73;
5.79;5.8099999;5.75;5.6799998;5.6799998;5.3899999;5.9899998;6.1399999;5.9499998;5.54;
5.5;5.8699999;5.7199998;5.5700002;5.8800001;5.8400002;5.79;5.7399998;5.6900001;5.6900001;
5.46;6.1700001;5.8299999;5.5900002;5.6799998;6.1999998;5.75;5.75;5.5900002;5.4899998;
5.6700001;5.9200001;5.4699998;5.9099998;6.1100001;5.4699998;5.6900001;5.73;5.7800002;5.96;
5.9000001;5.8899999;5.54;5.3899999;5.7600002;6.1199999;5.77;5.6700001;5.5;5.4899998;
5.7600002;5.5900002;5.4499998;6.0999999;5.8899999;6.0700002;5.7199998;5.7199998;6.1700001;5.9099998;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [500] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
    };
   };
   DataTable @["TrialTestOutputData"] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;      };
     };
     String_Data @["trial_name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_71";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] "pat1_cat1";"pat1_cat2";"pat1_test";"pat2_cat1";"pat2_cat2";"pat2_test";"pat3_cat1";"pat3_cat2";"pat3_test";"pat4_cat1";
"pat4_cat2";"pat4_test";"pat5_cat1";"pat5_cat2";"pat5_test";"pat6_cat1";"pat6_cat2";"pat6_test";"pat7_cat1";"pat7_cat2";
"pat7_test";"pat8_cat1";"pat8_cat2";"pat8_test";"pat9_cat1";"pat9_cat2";"pat9_test";"pat10_cat1";"pat10_cat2";"pat10_test";
"pat11_cat1";"pat11_cat2";"pat11_test";"pat12_cat1";"pat12_cat2";"pat12_test";"pat13_cat1";"pat13_cat2";"pat13_test";"pat14_cat1";
"pat14_cat2";"pat14_test";      };
     };
     float_Data @["minus_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_76";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 120;120;120;120;120;120;120;120;120;120;
120;120;120;120;120;120;120;120;120;120;
120;120;120;120;120;120;120;120;120;120;
120;120;120;120;120;120;120;120;120;120;
120;120;      };
     };
     float_Data @["sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_77";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 1.2883714;0;4.58108;0;1.5680215;3.4202738;2.3245122;0.99482292;5.6160564;1.3084483;
1.5440078;1.3187187;2.1383615;0.99041116;5.4375868;1.1795434;2.6436923;1.7238485;3.1687057;1.9403671;
6.4584174;0.65645039;1.5205932;4.6548247;0.27831703;0.71939999;1.7416114;0;2.5064497;0;
1.6299268;1.3409168;4.8917346;0.94717616;2.4559491;0.94580883;1.2753137;1.3050951;1.266333;0.86128187;
2.4827089;0.85753584;      };
     };
     float_Data @["EC_out_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_140";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="EC_out_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;4;2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=90;
      ar {
       name="ar";
      [1 4 2 1 42] 0.61427861;0.00081011566;0.0041348622;0.045519397;0.79266107;0.81699055;0;5.4248926e-06;0.0007828974;9.6518943e-07;
0;0.76103759;0;0;0.8334195;0.79293567;0.61583078;0.00080185407;0.0037236586;0.047275417;
0.79074705;0.81784993;3.0022335e-11;5.5801729e-06;0.063424192;0.002287897;0.62306952;0.0010824432;0.8791576;0.80520761;
0;4.2063143e-06;0.001029482;1.222686e-06;4.7521557e-06;0.75367832;1.6456035e-05;0;0.80393577;0.76514876;
0.066837609;0.0021117732;0.62248605;0.0011168817;0.87928724;0.80444694;2.4991748e-10;3.6641948e-06;0.7186861;0.013902643;
0.047151007;0.051273804;0.8100065;0.79675382;0;0.00011785185;0.052329838;0.00090899988;0.0025918996;0.81769043;
2.9348821e-05;0;0.80193406;0.75773191;0.71977139;0.014314422;0.043374248;0.054052737;0.80773455;0.79739892;
2.5291837e-13;0.00012174932;0.56311119;0.0043322812;0.1426426;0.00037536331;0.86546093;0.72915888;0;9.0554067e-07;
0.0036347669;4.0324638e-05;2.1056737e-06;0.73762351;1.363117e-19;0;0.81533003;0.80865872;0.57263088;0.0046043424;
0.088911004;0.00048698968;0.86115873;0.73461747;0;1.0930079e-06;0.70823956;0.011434121;0.023389913;0.18790649;
0.79315662;0.81783843;0;5.3189187e-06;0.069284849;0.0048059844;0.0008805145;0.80571777;0;0;
0.81361324;0.80705684;0.7092818;0.011646087;0.022771103;0.18711975;0.79230225;0.81801993;1.1652079e-11;5.510195e-06;
0.51768112;0.045248915;0.57243294;0.0044652973;0.87097406;0.77120554;0;4.2371412e-05;0.047850862;0.0053446665;
0.00093057961;0.81006998;1.0951806e-14;0;0.80262107;0.79944205;0.6620906;0.02475878;0.42173609;0.0032094806;
0.86543339;0.72724086;0;1.0778193e-06;0.74647415;0.042523913;0.070094809;0.088957749;0.80807608;0.79373288;
0;0.00014234804;0.25088403;0.020521106;0.0095515316;0.82892931;0;0;0.80214274;0.79247046;
0.74805838;0.042961936;0.066156626;0.089269072;0.80661458;0.79440528;5.6333207e-16;0.00014852834;0.42485023;0.00065518386;
0.57066023;0.00080315355;0.87736118;0.76948863;0;0;0.0094883172;3.9824222e-06;1.8840828e-05;0.7344929;
8.4238761e-16;2.306664e-21;0.81758779;0.77817416;0.038139522;0.00071343087;0.00049006671;0.69777274;4.3099617e-06;6.6732224e-09;
0.81001651;0.76592696;0.68593723;0.0042508957;0.014473957;0.47244242;0.77323818;0.82215381;0;3.7419843e-06;
0.1518255;0.00082757237;0.0033348484;0.80117726;3.8541014e-08;0;0.81507874;0.77106535;0.13235322;0.0007524066;
0.0028976297;0.80540335;1.8741646e-13;3.6422389e-12;0.74981862;0.65312517;0.57306892;0.0045714658;0.65950161;0.0050195442;
0.87663978;0.76799774;0;0;0.072534584;0.00087009877;0.0040999805;0.80897498;9.9009834e-05;0;
0.79654896;0.74463487;0.57496727;0.0045468523;0.65860009;0.004811896;0.87635416;0.76727104;1.132154e-09;1.4169228e-08;
0.75116646;0.035550084;0.077746704;0.11717749;0.80317402;0.79873884;0;0.00012566084;0.3691203;0.0091849733;
0.028965691;0.82150441;0.00022424704;4.9593543e-20;0.79203612;0.7359218;0.75177145;0.035328522;0.072995067;0.13307177;
0.80113113;0.79954445;1.4172542e-13;0.0001252826;0.67129797;0.026770236;0.34004578;0.004830996;0.86027938;0.73559606;
0;1.071357e-06;0.08928775;0.0048421714;0.0011092483;0.79762977;9.3466918e-15;6.7742552e-17;0.81160706;0.80196637;
0.67407674;0.027472951;0.31387052;0.0053682481;0.85870683;0.73744321;3.4269191e-14;1.1291222e-06;0.74411011;0.029535571;
0.04980395;0.4224945;0.78822243;0.81903517;0;5.4526722e-06;0.42473608;0.013001257;0.014127477;0.81637192;
0;4.920133e-20;0.80974036;0.78548533;0.7438162;0.029210206;0.049051926;0.43087775;0.78699958;0.81947446;
4.935497e-14;5.1658312e-06;0.71488988;0.071947299;0.56203038;0.015044128;0.86537141;0.72681504;0;1.0686408e-06;
0.39414755;0.061788399;0.064306639;0.59990704;0.0005774009;6.3063667e-18;0.78868169;0.72291374;0.71459168;0.073967688;
0.56134856;0.014922027;0.86514199;0.72607768;5.2271958e-18;1.1347094e-06;      };
     };
     float_Data @["EC_in_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_140";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="EC_in_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;4;2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=90;
      ar {
       name="ar";
      [1 4 2 1 42] 0.8770082;0;0;0.95488912;0.97587579;0.97660917;0;0;0;0;
0;0.97819972;0;0;0.97682106;0.97641599;0.87879503;0;0;0.95485437;
0.94270349;0.94792056;0;0;0;0;0.9770093;0;0.97717351;0.97619134;
0;0;0;0;0.9551357;0.92905152;0;0;0.97642916;0.97606659;
3.2515931e-07;0;0.97700596;0;0.95029104;0.94515669;0;0;0.86274779;0;
0.94732225;0.94397104;0.976219;0.97621518;0;0;0;0;0.94464278;0.97709852;
0;0;0.97639811;0.97593027;0.86174679;0;0.94734287;0.943995;0.94434053;0.94591796;
0;0;0.83296317;0.95478946;0;0;0.9771018;0.97502428;0;0;
0;0.95377946;0;0.92721391;0;0;0.97653401;0.97675765;0.85409844;0.95578104;
0;0;0.95001954;0.9386217;0;0;0.83992779;0.94287401;0;0.95769358;
0.97575152;0.97664106;0;0;0;0.94253016;0;0.97694802;0;0;
0.97649509;0.97667825;0.84167522;0.94288653;0;0.95753366;0.94308156;0.94752485;0;0;
0;0.93948954;0.97280747;0;0.97710788;0.97569549;0;0;0;0.94269532;
0.94527441;0.91631931;0;0;0.97635567;0.97663414;0.73919582;0.93959856;0.96848863;0;
0.95013875;0.93807554;0;0;0.7647208;0.92991799;0.93375343;0.92834556;0.97617167;0.97617161;
0;0;0;0.92264402;0.92727208;0.97478712;0;0;0.97633976;0.97649342;
0.77542073;0.92977941;0.9336139;0.92820096;0.94430548;0.94582468;0;0;0.96860355;0;
0.88947242;0;0.97722536;0.97563177;0;0;0.94722384;0;0;0.92846805;
0;0;0.97658432;0.97623831;0.94897753;2.5788733e-05;0;0.86364043;0;3.9412775e-09;
0.94667089;0.94378775;0.97216433;0;0;0.96811515;0.97545666;0.97673291;0;0;
0.94796818;0;0;0.97673786;0;0;0.97660774;0.9760884;0.94580287;0;
0;0.97692913;0;0;0.94339275;0.93298799;0.9685961;0;0.97428524;0;
0.97720855;0.97560793;0;0;0.93223667;0;0.94645333;0.9182291;0;0;
0.97632825;0.97569907;0.96873271;7.8587403e-09;0.97422147;0;0.95026225;0.94179887;0;5.902471e-08;
0.9718377;0;0.93058801;0.94147217;0.97603679;0.97631437;0;0;0.95376766;0;
0.92362183;0.97425681;0;0;0.97626746;0.97557777;0.97189158;0;0.93006307;0.94339544;
0.94375092;0.94625598;0;0;0.97222775;0.94080961;0;0;0.97701418;0.97505844;
0;0;0.93285292;0.9444083;0;0.91738772;0;0;0.97646463;0.97664762;
0.97243011;0.94106501;0;0;0.94948614;0.93900311;0;0;0.97063065;0.91979516;
0;0.9616279;0.97574645;0.97665524;0;0;0.95711237;0.91792476;0;0.97402382;
0;0;0.97645646;0.97638792;0.97064489;0.919523;0;0.96197242;0.94255757;0.94773936;
0;0;0.96919304;0.91539216;0.96829402;0;0.97710603;0.97488451;0;0;
0.9571268;0.92470121;0.9290933;0.060862876;0;0;0.97629356;0.97536814;0.96926814;0.91529274;
0.96829849;0;0.9500066;0.93798333;0;8.3385798e-12;      };
     };
     float_Data @["CA1_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_250";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="CA1_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=90;
      ar {
       name="ar";
      [10 10 42] 0;0;0;0;0;0;0.80843455;1.4015388e-05;0;0;
0;0;0;0;0;0;0.0024447085;0;0.53129089;0;
0;6.012023e-05;0;0.81878245;0;0.91507745;0.91009641;0;0;3.0738542e-20;
0;0;9.1991632e-07;0;0.91490215;3.1864279e-06;0;0.02102977;6.2487128e-15;0;
0;0;0.82974821;0.90446007;0.91966909;0;0;0.0010057727;0;0;
0;0;0;0;3.8418548e-05;0;0;0;0.82359582;0;
0;0.92473638;0;0;0;0.87072366;0;5.1130812e-21;0;0.69876015;
0;0;0.90385616;0;0;0;0;0;0;0;
0;0;0.78359735;0.45715943;0.77006495;0;0;0;0.88373274;0;
0;0.90574944;0;0.77007437;0.0047268993;0;0;0;0;0.075134441;
0;0;0;0;0;0;0.92283541;0.912983;0.88380182;0;
0;0;0;0;0;0;6.29264e-19;0;8.5917427e-06;0;
0;0.89203852;0;0.08902932;0;0;0.89496332;0;0;0;
0;0;0;0;0.90559167;0;0;0.9300878;0;0.63720417;
0;0;0.89805931;0;0.92580724;0;0;0;0;0;
0;0.003312361;0;0.0032389304;0;0;0;0;0;0;
0;0;0;0;0;7.1569116e-07;0.91776466;0;0;0.92398077;
0;0;0;0;0.84329349;0.93231142;0;0;0;0;
0;0;0.9251439;0;0.91937155;1.1936348e-06;0;0;0.075796798;0.92140639;
0;0;0;5.7831826e-19;0;0;0;0;0;0;
0;0;1.4624249e-13;0;0;0;0.80590475;1.5987485e-05;1.1104782e-13;6.3951316e-16;
5.4358469e-19;0;0;1.8279513e-09;0;0;0.0022680941;1.2566485e-17;0.53167987;1.7989163e-12;
1.5210255e-14;5.7684389e-05;0;0.81684321;4.2617368e-10;0.91449243;0.90906638;3.4910591e-10;0;1.6567272e-11;
7.3840574e-17;0;8.76218e-07;0;0.91383749;1.7600272e-06;0;0.022736037;6.2805806e-14;3.6395204e-07;
3.6444538e-14;0;0.82872009;0.90399867;0.91937119;1.2415263e-12;4.0262149e-16;0.00098015007;1.7074476e-18;0;
0;2.9449899e-14;0;1.3550383e-13;3.7383572e-05;0;9.0451474e-12;0;0.81968641;0;
0;0.9237082;0;0;0;0.86844009;0;2.4579362e-13;0;0.71422809;
0;0;0.90298575;2.2851428e-13;0;2.9548794e-08;0;0;0;3.9972633e-14;
0;0;0.78597796;0.43646252;0.77650809;0;1.1717294e-08;0;0.88198555;0;
0;0.90421861;0;0.77336729;0.0039470806;0;0;0;0;0.085177451;
0;0;0;0;0;0;0.92171258;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.3367591e-05;0;0.91159862;0;0.91233641;0.92281604;0;0;0.8049444;
0;0;0.87925994;0;0.9186669;5.6802875e-19;0;8.0823273e-05;0.73942608;0;
0;0;0.88802451;0.85787249;0.90922636;0;0;0;0;0;
0;0;0;0;0.0044018095;0;0;0;0.84372282;0;
0;0.92629498;0;0;0;0.89524466;0;0;4.2895706e-22;0;
0;0;0.91253656;2.5030839e-20;0;0;6.044203e-06;0.0093416376;0;0;
0;0;1.5146226e-07;0.89364362;4.5477103e-05;0;0;0;0.92219043;0;
0;0.90693891;0;0.0022112206;0.65424961;1.1343968e-18;0;0;0;0;
0;0;0;0;0;0;0.93376249;0.91432703;0.86038762;0;
0;0;0.00042408952;0;0;0;0;0;0;0;
0;0.90104234;0;0.63379341;0;0;0.91371709;0;0;0;
0;0;2.2080708e-20;0;0.9006902;0;0;0.92684036;0;0.052677687;
0;0;0.91679037;0;0.93442416;0;0;0;0;0;
0;1.1530013e-06;0;4.4440047e-05;0;0;0;0;0;0;
0;0;0;0;0;1.3595722e-05;0.89722043;0;0.00063093781;0.91700757;
1.5899802e-18;0;0;0;0.88269645;0.92310941;3.4221725e-07;0;0;0;
0;0;0.92666018;0.00077940634;0.91626632;0.00032181098;0;0;0.46106651;0.9147622;
0;0;0;0;0;0;2.6578004e-16;0;0;0;
2.8042468e-09;0;1.5590168e-09;0;0;1.8942867e-15;0.92144328;8.2596058e-10;0;0;
1.9628692e-09;0;2.7389156e-08;0;3.1360454e-19;1.7510272e-13;1.6528782e-08;8.6723025e-12;4.3059289e-10;2.3796629e-10;
0;1.4836508e-05;0;0.91099256;2.8004607e-14;0.91141456;0.92237866;4.7282539e-11;7.3079997e-14;0.80339468;
0;0;0.8791123;2.0137788e-08;0.91781121;7.4630107e-06;2.1367362e-13;8.2501494e-05;0.73908812;0;
0;0;0.88722789;0.85545141;0.90874726;8.3149848e-11;0;3.082163e-09;5.952093e-11;7.9572237e-07;
4.5025587e-08;0;0;7.8919822e-14;0.0044220435;7.8217299e-14;3.3114251e-12;2.4887745e-09;0.8416968;2.5916955e-14;
2.5289235e-13;0.9255628;0;0;0;0.89428496;1.5046495e-09;0;2.1294291e-08;2.9993902e-08;
0;7.6641716e-14;0.91193324;4.1337228e-07;1.8888276e-12;0;9.3341359e-06;0.010505427;5.3577146e-15;3.4164365e-13;
0;7.3456595e-14;2.8873936e-07;0.89360464;4.8855192e-05;1.4087215e-13;0;0;0.92151964;3.0925859e-12;
0;0.90584707;0;0.0021358726;0.64159071;9.2142545e-07;0;2.184817e-12;6.9818806e-10;3.668362e-13;
2.0518326e-19;0;0;0;0;0;0.84507501;0.0010198524;0;0;
0;0;0;0;0;0;8.1388498e-06;0;0.011217157;1.7215695e-22;
0;0.0035051927;0;0.83937091;0;0.89950919;0.9208498;0;6.6769088e-18;7.3236714e-07;
1.0271964e-20;0;0.012444296;0;0.902628;0;0;0.0096576689;9.7260524e-14;0;
0;0;0.88088721;0.87943763;0.92189527;0;0;6.7271839e-07;0;0;
0;0;0;0;0.00045788172;0;0;0;0.83554375;0;
0;0.9208374;0;0;0;0.86594754;0;0;0;0.44276494;
0;0;0.90900105;0;0;0;0;0;1.889043e-19;0;
0;0;0.83036971;0.76450801;0.76664078;0;0;0;0.89662927;0;
0;0.89937913;0;0.76653218;0.0023253409;0;0;0;0;0.025568059;
0;0;0;0;0;0;0.93025249;0.90915614;0.848858;0;
0;0;0.00023273159;0;0;0;0;0;0;0;
0;0.8972562;0;0.64888692;0;0;0.91446108;0;0;0;
0;0;0;0;0.89639485;0;0;0.92412406;0;0.040581822;
0;0;0.91657329;0;0.9316479;0;0;0;0;0;
0;1.546778e-06;0;6.1930565e-05;0;0;0;0;0;0;
0;0;0;0;0;5.6208341e-05;0.89219737;0;0.00031810114;0.9129799;
0;0;0;0;0.87345493;0.91627336;5.1063699e-07;0;0;0;
0;0;0.92254663;0.00077207881;0.91087192;0.00024800893;0;0;0.56548661;0.90865439;
0;0;0;1.4613284e-17;0;0;8.1078041e-19;0;0;0;
8.9328156e-14;0;0;0;0;0;0.84330803;0.0011042766;1.669887e-10;0;
2.175099e-13;7.299622e-20;7.980848e-13;0;1.2683933e-18;7.1240567e-14;6.2859995e-06;4.1674017e-15;0.012942132;2.0404754e-10;
4.0651755e-17;0.0038499029;0;0.83704442;1.2323856e-12;0.8985098;0.92000508;3.8031528e-10;5.1991779e-12;3.3264422e-07;
3.8131574e-11;6.0674913e-13;0.011293886;0;0.90140259;1.7252835e-10;0;0.010082852;5.6977076e-09;5.4356619e-10;
0;0;0.8797186;0.87797201;0.9212923;5.2723589e-17;0;7.4900424e-07;1.4354119e-15;3.68748e-13;
0;0;0;0;0.00041629586;0;2.9456793e-10;0;0.83297199;0;
2.4345245e-11;0.91993356;0;1.6124252e-17;0;0.86339957;2.0622016e-17;0;1.8876987e-10;0.48344335;
0;0;0.90783602;4.7740615e-13;4.1799853e-20;1.157025e-09;0;6.5506947e-11;1.4426757e-13;0;
0;0;0.8319912;0.75966901;0.77141684;0;1.3339119e-12;5.5094758e-13;0.89510459;0;
0;0.89774317;0;0.76686865;0.0019903725;3.0043784e-12;2.2177843e-20;1.4806261e-13;0;0.028593957;
0;0;0;0;0;0;0.91121256;0;0;0;
0;0;0;0;0;0;0.013256388;0;0.014596964;0;
0;0;0;0.9269715;0;0.93535161;0.92125332;0;0;1.7908584e-06;
0;0;0.00058632053;0;0.92902553;1.960782e-16;0;2.9970508e-05;0.00013066261;0;
0;1.7508581e-16;0.89759165;0.85981834;0.92437613;0;0;2.7466003e-05;0;0;
0;0;0;0;0.0071517318;0;0;4.2325054e-23;0.89439583;0;
0;0.92669821;0;0;0;0.92056286;0;0;0;0.092821397;
0;0;0.92566746;0;0;0;0;0.00011931248;0;0;
0;0;0.0013918275;0.90889353;0.78144974;0;0;0;0.88713723;0;
4.1448825e-21;0.93825215;0;0.0056679873;0.0077058799;0;0;9.7270866e-21;0;0;
0;0;0;0;0;0;0.93338662;0.89197588;0.89678806;0;
0;0;5.9254137e-16;0;0;0;7.0502478e-20;0;0.00023246536;0;
0;0.8667407;0;0.72515088;0;0;0.90289956;0;0;0;
0;0;0;0;0.91131401;0;0;0.93142313;0;0.77497786;
0;2.7213012e-21;0.91417795;0;0.93669778;0;0;0;0;0;
2.457499e-20;0.00012135023;0;1.0213692e-05;0;0;0;0;0;0;
0;0;0;0;0;0.00044056057;0.90747309;0;0;0.93185228;
5.7801983e-18;0;0;0;0.87745267;0.9269343;9.4326241e-15;0;0;0;
0;0;0.91474384;0.00013375843;0.93388164;0.00092244643;0;0;0.010862936;0.911641;
3.3432873e-20;0;0;0;0;0;3.5002705e-07;0;0;0;
0;2.4160509e-09;1.1013533e-13;6.2096571e-11;1.9105291e-16;1.6177032e-17;0.90793502;0;2.0016484e-13;1.6302033e-11;
4.9929458e-16;2.7190321e-19;1.3707674e-10;7.6472648e-11;0;0;0.0091403499;0;0.016873976;0;
0;0;4.2323927e-09;0.92556721;1.323827e-11;0.93340832;0.91918516;3.1615146e-14;1.0267178e-17;7.9959523e-09;
0;0;0.0003466327;5.1485542e-16;0.92731696;6.7039025e-07;0;1.6364264e-05;7.0788214e-05;2.929476e-17;
1.9463555e-14;6.9401374e-10;0.89425749;0.85271508;0.92530191;0;4.2049529e-13;5.35566e-05;0;1.6119921e-11;
1.7893889e-11;1.3657654e-14;0;0;0.0054133041;7.1619419e-11;1.8909666e-12;3.0913485e-09;0.89490259;2.1960812e-11;
0;0.92520869;0;4.2648299e-10;0;0.91894561;9.3136462e-12;1.5917469e-11;0;0.21954907;
1.7464781e-13;0;0.92660528;0;5.9284251e-15;0;0;5.9979073e-05;9.4367049e-13;0;
0;1.7564333e-17;0.0032057653;0.90773106;0.7950654;1.0628896e-13;0;0;0.88184941;0;
4.331531e-11;0.93798625;6.5638846e-13;0.0041661551;0.0047012889;8.5194246e-10;4.205165e-11;8.59302e-13;0;1.1261121e-12;
0;0;0;0;0;0;0.8517012;0;3.8658637e-21;0;
0;0;0;0;0;0;0.061341427;0;0.68926036;0;
0;3.4858708e-06;0;0.86623979;0;0.92323244;0.91820168;0;0;0;
0;0;0;0;0.91818088;0;0;0.088990018;2.9822276e-13;7.2738867e-06;
0;0;0.87116838;0.89259952;0.92827582;0;0;1.0321082e-06;0;0;
0;0;0;0;4.6098585e-06;0;0;2.8282165e-21;0.86822432;0;
0;0.91351336;0;0;0;0.87901723;0;0;0;0.78617722;
0;0;0.90238076;0;0;0;0;0;0;0;
0;0;0.76689082;0.59570003;0.86894965;0;0;0;0.82555979;0;
0;0.90758026;0;0.69498593;0.0042195297;0;0;0;0;3.9954821e-06;
0;0;0;0;0;0;0.92960024;0.88320822;0.89003801;1.0343437e-19;
0;0;0;0;0;0;4.4402314e-17;0;0.00046760298;0;
0;0.85970604;0;0.7300238;0;0;0.90396208;0;0;0;
0;0;0;0;0.90768951;0;0;0.9287923;0;0.75870639;
0;0;0.91372889;0;0.93391961;0;0;0;0;0;
0;0.00015438168;0;1.4900019e-05;0;0;0;0;0;0;
0;0;0;0;0;0.0013826059;0.90305728;0;0;0.92894167;
0;0;0;0;0.86636668;0.92045587;0;0;0;0;
0;0;0.90899724;0.00010667988;0.93018645;0.00069563865;0;0;0.018111801;0.9048273;
0;0;0;0;0;0;7.6926557e-07;0;0;0;
0;0;0;5.0626833e-18;0;0;0.85054749;1.8739144e-14;3.2809096e-11;6.1056723e-14;
4.7022483e-16;3.0026003e-15;0;4.2470673e-11;6.2141115e-14;0;0.064548694;0;0.68807852;0;
1.8264561e-14;2.8395245e-06;2.2987062e-10;0.86555135;1.3453367e-09;0.92282814;0.91784638;1.1458683e-13;4.2018593e-19;0;
3.0043725e-13;0;3.3843244e-19;0;0.91744316;6.5178305e-12;0;0.093488663;2.4757245e-12;6.2489935e-06;
4.2453884e-19;0;0.87086982;0.89188385;0.9278183;2.4396858e-17;0;1.1652054e-06;0;4.181542e-15;
0;4.3221914e-15;0;8.9675643e-16;4.035026e-06;0;1.7307038e-14;1.8962365e-18;0.86724752;3.2811387e-13;
0;0.911847;0;1.7487683e-16;0;0.87692565;3.2051002e-14;0;0;0.78935635;
0;0;0.9016577;3.05757e-15;1.0522844e-20;4.5112233e-10;0;7.8953519e-16;1.1499928e-11;0;
3.2808048e-17;0;0.77219272;0.58907008;0.87231708;0;1.1524248e-10;0;0.82032728;0;
0;0.9068734;0;0.69585532;0.0032955445;0;3.1810431e-14;0;0;3.6358354e-06;
0;0;0;0;0;0;0.9158414;0;0;0;
0;0;0;0;0;0;0.00047667627;0;6.3031172e-07;0;
0;0;0;0.92627656;0;0.92609334;0.92718887;0;0;0.0036755363;
0;0;0.48293975;0;0.91682726;0;0;0.00099575985;0.47935453;0;
0;4.0988609e-20;0.91783905;0.81220776;0.92479372;0;0;0;0;0;
0;0;0;0;0.0010449808;0;0;0;0.89255351;0;
0;0.9161489;0;1.1166268e-21;0;0.9127509;0;0;0;0.00010670124;
0;0;0.91484505;0;0;0;0;0.0042950292;0;0;
0;0;5.2022165e-06;0.90501189;0.58598346;0;0;0;0.87716514;0;
5.217674e-20;0.92929178;0;0.021656122;0.4934141;0;0;1.7849418e-18;0;0;
0;0;0;0;0;0;0.93888968;0.88593322;0.86928815;0;
0;0;0.0001403526;0;0;0;0;0;0;0;
0;0.87376511;0;0.82042605;0;0;0.91915804;0;0;0;
0;0;0;0;0.90287811;0;0;0.92537338;5.6345049e-18;0.36723647;
0;0;0.9271059;0;0.94072282;0;0;0;0;0;
0;0;0;0;0;0;0;0;5.5123863e-22;0;
0;0;0;0;0;0.0030050999;0.87339294;0;4.5711053e-17;0.92281175;
4.3226103e-17;0;0;0;0.8963775;0.90819246;4.6511424e-05;0;0;0;
0;0;0.91120005;0.02716649;0.92788672;0.010952916;0;0;0.070610285;0.89558423;
8.8931625e-19;0;0;0;0;0;0.00025177895;8.1861567e-20;0;0;
5.892165e-13;0;4.4442768e-15;0;0;0;0.92217076;1.0623762e-12;0;0;
1.3754449e-12;1.4535478e-13;1.7159952e-13;0;0;0;0.00025564549;0;1.9096538e-05;1.1287324e-13;
4.2146801e-17;0;2.9901896e-15;0.93192697;1.8648833e-17;0.92920536;0.92912126;1.3125451e-18;2.1266177e-15;0.00020896786;
4.2915928e-15;1.1919221e-16;0.063295692;1.0266442e-15;0.92065877;7.8203888e-11;0;9.7694297e-05;0.0092833843;0;
2.3965511e-14;1.9823038e-14;0.91616482;0.82631218;0.92751586;0;0;0;0;2.6724146e-16;
1.5489249e-15;0;0;0;0.0064541451;0;2.3021437e-13;1.6479348e-12;0.88451177;1.4274511e-13;
1.1521034e-17;0.91906643;0;1.2245198e-10;0;0.91734457;5.4566588e-14;0;8.9045503e-13;0.025543407;
9.1627882e-17;0;0.92765838;0;1.9164328e-13;0;2.2922444e-13;0.014518735;6.4719025e-13;0;
0;0;0.002148605;0.9219141;0.72831815;6.920437e-13;4.3525364e-15;0;0.89118242;0;
1.396909e-12;0.93058801;0;0.013142088;0.0061790477;1.3553853e-12;2.2346599e-14;3.0769378e-13;4.9179236e-17;0;
0;0;0;0;0;0;0.87917686;1.0387347e-06;0;0;
0;0;0;0;0;0;0.00044936177;0;0.041144501;0;
0;0.00034622909;0;0.88500834;0;0.9134447;0.92568201;0;3.8257278e-20;0;
0;0;5.0265109e-05;0;0.90801728;0;0;0.052537829;3.8825876e-09;0;
0;0;0.89733714;0.86326122;0.93137044;0;0;0;0;0;
0;0;0;0;1.8484699e-05;0;0;0;0.87081307;0;
0;0.90878838;0;0;0;0.87956232;0;0;0;0.64600992;
0;0;0.91062927;0;0;0;0;3.8327589e-06;0;0;
0;0;0.78067839;0.80991721;0.85960209;0;0;0;0.84764379;0;
0;0.90250218;0;0.6595059;0.0072889822;0;0;0;0;2.5879061e-07;
0;0;0;0;0;0;0.93633109;0.88501877;0.85741186;0;
0;0;2.4424531e-05;0;0;0;0;0;0;0;
0;0.86941737;0;0.82396042;0;0;0.92070919;0;0;0;
0;0;0;0;0.89915055;0;0;0.92475003;0;0.40712482;
0;0;0.92777336;0;0.93971378;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.0463506e-19;0;
0;5.5484464e-21;0;0;0;0.0083114738;0.86886418;0;0;0.92270726;
2.0475659e-19;0;0;0;0.89380038;0.89925528;1.5170986e-05;0;0;0;
0;0;0.91034585;0.036680888;0.92508459;0.0071893591;0;0;0.17114224;0.88516724;
0;0;0;2.1336812e-19;0;0;0.00058035488;0;0;0;
3.4482084e-14;0;0;0;0;0;0.87827104;1.6940642e-06;2.5727082e-13;0;
5.2306508e-16;1.7262947e-12;0;0;1.1838602e-17;1.3424757e-18;0.00040252818;0;0.045468923;1.9402984e-15;
5.2992448e-14;0.00035102776;8.4630029e-12;0.88382614;9.3247441e-12;0.91254127;0.9248814;1.8216883e-14;3.7907174e-14;0;
7.9424401e-12;0;4.1228122e-05;0;0.90674853;0;0;0.051766045;2.7468233e-11;1.4865244e-11;
8.8662671e-17;0;0.89644289;0.86085761;0.9310196;0;0;0;0;4.771854e-18;
0;0;0;0;1.9306353e-05;0;1.3658256e-14;4.4335384e-18;0.86877143;7.1224993e-15;
4.2681973e-15;0.90781343;0;1.4374122e-15;0;0.87813485;4.8091609e-13;3.3641654e-15;6.3306721e-18;0.67307663;
5.5370881e-21;0;0.90980011;2.9886181e-16;4.3277332e-14;2.0445092e-18;0;4.7947597e-06;3.115079e-11;0;
0;0;0.78402156;0.80977827;0.8607536;1.9468233e-21;4.8235743e-13;0;0.84556788;0;
6.3440346e-17;0.90084147;0;0.65983367;0.0052961493;5.3212458e-18;2.89835e-13;0;0;6.7675165e-07;
0;0;0;0;0;0;0.92896122;1.6039236e-05;0;0;
0;0;0;0;0;0;8.9206048e-16;0;1.814356e-15;0;
0;0;0;0.92446363;0;0.92020601;0.92854089;0;0;0.65460801;
0;0;0.81350029;0;0.9247629;4.6478749e-06;0;5.7773545e-06;0.007254899;0;
0;0;0.88959557;0.88127226;0.91488832;0;0;4.8484315e-17;0;0;
0;0;0;0;0.065954946;0;0;0;0.81571257;0;
0;0.93344522;0;0;0;0.91001278;0;0;0;0.0016023004;
0;0;0.93181539;0;0;0;1.0661505e-06;0.047021169;0;0;
0;0;0.0082919076;0.92204702;0.0027282815;0;0;0;0.93431133;0;
0;0.91583645;0;0.0025537314;0.0013735428;0;0;0;0;3.3873996e-06;
0;0;0;0;0;0;0.93246841;0.92402434;0.84073919;0;
0;0;0.00011499118;0;0;0;0;0;0.00016135348;0;
0;0.84354913;0;0.62502754;2.9741557e-20;0;0.90095669;0;0;0;
0;0;0;0;0.91580558;0;0;0.91895992;0;0.6995979;
0;0;0.89454901;0;0.92728311;0;0;0;0;0;
0;6.6475764e-07;0;4.7787184e-06;0;0;0;0;0;0;
0;0;0;0;0;0.00011716639;0.92485124;0;1.3032757e-16;0.93779534;
4.5749492e-20;0;0;0;0.87174904;0.92625856;1.8171743e-14;0;0;0;
0;0;0.9347204;0.0015850095;0.92662442;0.00042927644;0;0;0.57222831;0.91085052;
0;0;1.7993712e-20;0;0;0;0;0;0;0;
0;1.4726098e-08;0;5.9255476e-13;1.2225346e-12;9.4753131e-14;0.93213838;0.92123353;0.81117928;3.3101555e-10;
2.2494806e-10;2.2532425e-09;0.0011601433;4.8381157e-09;1.3196485e-11;0;9.7589499e-08;0;3.1925247e-05;1.1916336e-11;
0;0.7926994;0;0.68473452;1.4226778e-05;4.2576538e-08;0.8900376;3.1911884e-12;0;0;
2.0772145e-12;1.7792319e-06;2.1916303e-10;3.7119877e-12;0.91164523;3.8114933e-15;3.8225522e-18;0.91190296;0;0.68261653;
2.2681779e-07;0;0.88723379;2.2725337e-09;0.92007488;3.8195555e-14;1.9123963e-16;1.8377506e-07;6.2819872e-13;0;
0;5.3793812e-08;3.9730838e-17;3.4174741e-07;0;0;9.7490104e-13;0;1.3263153e-09;3.3943581e-09;
7.1618744e-10;2.6028701e-10;0;0;2.4021219e-17;0.00019530981;0.92061174;1.9836248e-14;7.0836211e-07;0.93355834;
1.1497983e-08;7.0654704e-14;1.6479177e-07;7.2862918e-13;0.8791635;0.92370898;9.4098796e-05;2.1689358e-12;0;1.6219909e-10;
0;1.9840332e-12;0.92885351;0.064893067;0.92055422;0.016728755;4.4603141e-08;1.5276046e-14;0.62928975;0.91034681;
2.1032448e-10;1.2045268e-07;2.7725513e-05;1.2833739e-09;4.9251958e-09;0;5.804373e-09;0;0;5.3730631e-11;
0;0;0;0;0;0;0.80446404;0.00011575356;0;0;
0;0;0;0;0;0;0.034890454;0;0.62188345;0;
0;0.00072420051;0;0.79142642;0;0.91284943;0.91264641;0;0;0;
0;0;0;0;0.91525441;0;0;0.053162314;0;7.4072906e-20;
0;0;0.83856857;0.90758812;0.91926891;0;0;3.7067282e-05;0;0;
0;0;0;0;2.044834e-05;0;0;0;0.8141948;0;
0;0.91988468;0;0;0;0.85610235;3.4860636e-06;0;0;0.77344847;
0;0;0.89781821;0;0;0;0;0;0;0;
0;0;0.82964683;0.056624833;0.77996463;0;0;0;0.8765288;0;
0;0.89083427;0;0.80285573;0.00037274414;0;0;0;0;0.070299432;
0;0;0;0;0;0;0.92856663;0.92110389;0.81823599;0;
0;0;2.0739519e-05;0;0;0;3.7947945e-19;0;0.00034007686;0;
0;0.8316732;0;0.6559388;0;0;0.903804;0;0;0;
0;0;0;0;0.91212809;0;0;0.91624337;0;0.68397474;
0;0;0.89624006;7.1236898e-19;0.92454106;0;0;0;0;0;
0;0;0;5.9349136e-06;0;0;0;0;0;0;
0;8.1140757e-20;0;0;0;0.00068610517;0.92172348;0;0;0.9364534;
0;0;0;0;0.86417967;0.91834807;0;0;0;0;
0;0;0.93249065;0.002443237;0.9219135;0.0002383393;0;0;0.67428547;0.90159363;
0;0;0;2.6398161e-19;0;0;0;0;0;0;
1.264662e-15;0;0;8.112672e-12;0;0;0.9301433;0.92287129;0.83702886;0;
0;3.523427e-11;1.9722705e-05;6.9419639e-12;2.7131283e-12;0;1.4607966e-09;0;0.00081494451;8.6473234e-14;
0;0.84463012;0;0.59590411;3.4473663e-10;8.622713e-11;0.90786952;1.0199385e-12;6.214958e-13;0;
0;3.2965741e-11;0;0;0.91577899;0;0;0.9182266;0;0.65874898;
1.2335809e-12;0;0.89619571;5.2317657e-09;0.92780685;1.6381927e-11;0;5.7226752e-22;0;0;
0;1.9207314e-09;0;9.995174e-06;0;0;0;0;0;0;
1.4673309e-13;1.2441307e-08;0;0;0;0.00021355276;0.92352736;5.4975955e-20;0;0.93895155;
5.3960994e-12;0;8.3755279e-13;1.2608591e-10;0.86484247;0.9220686;0;3.8573093e-17;0;4.1547628e-17;
0;0;0.93543118;0.00098754105;0.92445433;6.1104554e-05;1.0218984e-11;0;0.6543178;0.90576327;
0;0;0;3.8804315e-09;0;0;1.26935e-10;0;0;2.3317335e-14;
0;0;0;0;0;0;0.9260726;6.9551555e-05;0;0;
0;0;2.1465991e-20;0;0;0;0;0;0;6.2067457e-21;
0;0;0;0.92225689;0;0.91431332;0.92589575;6.3452133e-20;0;0.66875333;
0;0;0.80350071;0;0.91864401;2.63072e-06;0;1.8186271e-05;0.0046787043;0;
0;0;0.89089465;0.8772071;0.91154337;0;0;0;0;0;
0;0;0;0;0.074359074;0;0;0;0.79789597;0;
0;0.92873132;0;0;0;0.90665478;0;0;6.0789406e-21;0.0022171035;
0;0;0.92978281;0;0;0;4.6059799e-06;0.084423892;0;0;
0;0;0.019344028;0.9203307;0.00227633;0;0;0;0.93154699;0;
0;0.90834147;0;0.0043002306;0.00085064815;0;0;0;0;5.5646947e-06;
0;0;0;0;0;0;0.9378618;0.92034745;0.76417428;0;
0;0;0.0051529729;0;0;0;0;0;0;0;
0;0.85270965;0;0.7797119;2.2647028e-21;0;0.9178732;0;0;0;
0;0;0;0;0.9077751;0;0;0.9101705;0;0.064718381;
0;0;0.91330636;0;0.93246633;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.00095935259;0.90298855;0;0.00018269998;0.93005586;
3.1000331e-18;0;0;0;0.89136207;0.90643716;2.1533649e-05;1.9732446e-21;0;0;
0;0;0.93217784;0.077665463;0.91882515;0.0058350521;0;0;0.74373639;0.89376837;
0;0;0;0;0;0;1.154426e-16;0;0;0;
8.4445282e-14;0;0;0;0;0;0.9256472;0.00010178948;0;0;
0;4.3033941e-13;1.255536e-10;2.4138083e-12;4.2576823e-14;0;2.7118397e-15;0;4.76162e-07;2.0127075e-08;
4.9128573e-19;4.6173051e-10;0;0.92165905;4.8883521e-07;0.91326123;0.92534471;1.2335765e-06;3.8663551e-14;0.66113615;
3.9310525e-12;2.6747344e-09;0.80182165;1.407078e-15;0.91764706;1.7819566e-06;1.3014676e-13;1.7555032e-05;0.0042788326;2.781497e-08;
1.660965e-14;0;0.8898598;0.87527037;0.91090387;0;0;3.4387495e-14;0;1.2255972e-12;
1.896812e-19;0;8.3849004e-12;0;0.076024048;0;1.7495525e-08;0;0.79355675;1.1163387e-10;
5.1715559e-12;0.92790842;1.5083512e-18;1.1623467e-19;2.3058912e-12;0.90573281;1.8252181e-09;2.2457623e-16;7.9049336e-08;0.002958524;
2.4328633e-11;0;0.92935896;0;1.5465243e-08;1.185178e-09;5.6620879e-06;0.090105303;2.2621091e-07;1.150374e-13;
0;7.9307325e-12;0.022089353;0.92029971;0.002396439;2.3105171e-09;2.9773659e-10;0;0.93089813;5.509037e-11;
7.1034704e-13;0.90714353;2.8399632e-13;0.0042421483;0.00057616166;2.3349234e-10;2.2590127e-08;0;0;6.1435508e-06;
0;0;0;0;0;0;0.84412479;0.0023985985;0;0;
0;2.4219472e-20;0;0;0;0;4.1036492e-05;0;0.01615281;5.8654272e-20;
0;0.0036534301;0;0.83342898;0;0.8983379;0.91932249;1.7835792e-22;1.3374482e-19;5.9488457e-07;
0;0;0.0060708043;0;0.90143794;0;0;0.012188251;0;0;
0;0;0.87936211;0.88041931;0.91958678;0;0;8.9587601e-08;0;0;
0;0;0;0;0.0004378297;0;0;0;0.82636738;0;
0;0.91701055;0;0;0;0.8603949;0;0;0;0.56880623;
0;0;0.90603012;0;0;0;0;3.2429007e-08;0;0;
0;0;0.84243762;0.74636859;0.77614784;0;0;0;0.89301682;0;
0;0.89082378;0;0.77480382;0.00072876591;0;0;0;0;0.031927247;
0;0;0;0;0;0;0.93549794;0.92072475;0.71009606;0;
0;4.5587584e-20;0.0014673512;0;0;0;0;0;0;0;
0;0.84347671;0;0.79489601;0;0;0.92014658;0;0;0;
0;0;0;0;0.90444857;0;0;0.90965211;0;0.080316558;
0;0;0.91544467;3.5899755e-20;0.93178624;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.8539601e-18;0;0;0;0.0043558399;0.9002679;0;6.9597867e-05;0.9310804;
0;0;0;0;0.89124113;0.89550847;4.7925314e-06;0;0;0;
0;0;0.93248647;0.18253258;0.91568178;0.0036754147;0;0;0.78595859;0.88016105;
0;0;0;6.3246122e-18;0;0;3.4814062e-07;0;0;0;
4.3346903e-15;0;0;0;0;0;0.84220314;0.0028682561;0;0;
0;1.7792952e-14;5.9474651e-16;2.9696446e-15;0;0;4.1711086e-05;0;0.017972797;1.6835642e-11;
9.3345038e-20;0.0042516151;0;0.83008367;9.4097852e-13;0.89727926;0.9188906;6.625739e-12;6.6411319e-13;1.9932335e-07;
8.5020535e-18;3.9452897e-14;0.0052796914;0;0.90026987;8.6598903e-13;0;0.013178673;0;8.1148421e-11;
0;0;0.8790161;0.87922537;0.91931677;0;0;2.4102313e-12;0;0;
0;0;0;0;0.00040411355;0;1.7339785e-13;0;0.82393664;3.0023565e-18;
1.0056615e-13;0.91612118;0;0;0;0.85746336;4.6375013e-13;0;3.1231261e-16;0.59893185;
7.1829287e-21;0;0.90492266;0;1.1905109e-14;1.22959e-12;8.2286587e-18;5.772662e-08;1.286789e-12;0;
0;0;0.84514892;0.73812205;0.78177547;0;1.3542159e-12;4.1463249e-20;0.89158154;0;
0;0.88883692;0;0.77704948;0.00046986932;0;5.6244483e-17;0;0;0.035512641;
0;0;0;0;0;0;0.91116458;0;0;0;
0;0;0;0;0;0;0.026625665;0;0.014487169;0;
0;0;0;0.92617714;0;0.93467999;0.9189378;0;0;3.0467797e-06;
0;2.9664767e-23;0.00016635522;0;0.92691487;5.225914e-17;0;5.9549038e-05;1.2956086e-05;2.9481968e-19;
0;0;0.89746004;0.86368877;0.91869843;0;0;1.9794263e-05;0;0;
0;0;0;0;0.010913507;0;0;0;0.88465476;0;
0;0.9223696;0;0;0;0.91930634;0;0;0;0.25234321;
0;0;0.92182958;0;0;0;0;0.00061269564;0;0;
0;0;0.0026508735;0.90886003;0.77827686;0;0;0;0.88513279;0;
0;0.93371224;0;0.0097904718;0.0032917846;0;0;0;0;0;
0;0;0;0;0;0;0.93756944;0.90164;0.85213745;0;
0;0;2.571685e-05;0;0;0;9.0597255e-21;0;0.0022570614;0;
0;0.76257473;0;0.81617188;1.7724849e-17;0;0.90832525;0;0;0;
0;2.8435396e-18;0;0;0.91713768;0;0;0.91696054;0;0.78193086;
1.0339422e-19;0;0.91054672;0;0.93486828;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.0091276839;0.91232133;0;0;0.94086158;
3.2523358e-18;0;0;0;0.88695019;0.91229802;6.3400266e-06;0;0;0;
0;0;0.92241728;0.035664;0.93534231;0.011482758;0;0;0.10754371;0.88942194;
0;1.4441192e-19;0;0;0;0;5.4384344e-07;0;0;0;
5.7185545e-16;3.9781466e-15;0;0;0;0;0.91008389;1.8465654e-12;1.0537209e-17;0;
0;2.3879884e-17;6.8393513e-14;1.8693506e-12;1.0563057e-11;0;0.025761459;0;0.015685571;0;
0;0;6.824748e-13;0.92547119;1.5083911e-10;0.93395823;0.9179368;0;3.5819673e-16;1.2094441e-06;
8.7990479e-19;9.9894433e-12;0.00013877446;3.2376111e-16;0.92596924;1.0847387e-14;0;5.4332249e-05;9.8811588e-06;1.1855705e-10;
3.2665711e-15;5.9931996e-13;0.89627486;0.86061513;0.91824841;0;6.9394614e-15;2.2167951e-05;0;1.3639338e-13;
0;0;6.7358813e-15;0;0.010454521;0;0;0;0.88357276;3.7152646e-12;
1.8201588e-15;0.92132562;0;0;3.8682474e-13;0.91842276;7.5844617e-12;2.647926e-14;1.0173822e-14;0.32383367;
2.7352164e-14;0;0.92139482;0;2.4677167e-14;0;3.5332645e-15;0.00061486382;0;0;
0;5.6450213e-14;0.0031800908;0.9084869;0.78192431;7.739546e-14;8.8661252e-11;0;0.8826775;0;
0;0.93317556;3.685622e-17;0.0093450546;0.0023689941;0;4.274478e-11;0;0;0;
0;0;0;0;0;0;0.85197216;2.5148604e-19;0;0;
0;1.0290196e-20;0;0;0;0;0.092162609;0;0.71156836;0;
0;5.4825746e-06;0;0.86021543;0;0.92203033;0.91687542;0;0;0;
0;0;0;0;0.91733354;0;0;0.091696329;0;1.6236079e-05;
0;0;0.86944908;0.89321131;0.92699301;0;0;5.043144e-18;0;0;
0;0;0;0;5.6049189e-06;0;0;0;0.86047077;0;
0;0.91043854;0;0;0;0.87526679;7.7072903e-20;0;0;0.8136512;
0;0;0.89966643;0;0;0;0;0;0;0;
0;0;0.7887302;0.54054981;0.86724597;0;0;0;0.82260418;0;
0;0.89858854;0;0.70997614;0.00087679335;0;0;0;0;1.5052588e-05;
0;0;0;0;0;0;0.93492687;0.9029457;0.82862198;0;
0;2.3419435e-20;1.5891275e-06;0;0;0;8.8312127e-18;0;0.0033818905;0;
0;0.73875362;0;0.82508701;1.3519023e-18;0;0.91191566;0;0;0;
0;0;0;0;0.91395736;0;0;0.91633481;0;0.78780258;
0;0;0.91288179;2.4615647e-21;0.93414575;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.069603e-18;0;0;0;0.027585713;0.90952289;0;0;0.94155657;
0;0;0;0;0.8868283;0.90150791;5.8350622e-07;0;0;0;
0;0;0.92315948;0.062759049;0.93270391;0.0064492659;0;0;0.46963626;0.87316835;
0;4.7305464e-20;0;0;0;0;5.8289015e-06;0;0;0;
0;0;0;3.4357302e-18;0;0;0.85108322;1.6034955e-14;3.6393048e-14;7.9470798e-19;
0;4.7192027e-14;3.7063827e-21;1.4908928e-12;2.3834426e-14;0;0.089904636;0;0.71783644;0;
2.5083506e-18;6.7006445e-06;6.2756018e-13;0.85855651;1.6019075e-10;0.92126334;0.91623992;1.0854199e-14;0;0;
6.8579342e-19;6.8568524e-16;0;0;0.91646278;1.4024122e-14;0;0.092313007;0;2.1141483e-05;
7.0000748e-17;0;0.86822116;0.89165872;0.92658991;0;0;2.1228991e-10;0;0;
0;0;0;0;4.8038655e-06;0;3.1979543e-18;0;0.85867858;1.4454892e-14;
1.5860442e-17;0.90954357;0;0;0;0.87344301;2.1682989e-13;0;0;0.8181271;
0;0;0.89857483;0;1.824957e-15;4.8077823e-13;0;3.202849e-15;1.2962125e-13;0;
0;4.4388239e-17;0.79110235;0.53221196;0.86785889;1.7497321e-22;1.9723194e-12;0;0.81912869;0;
0;0.89688283;0;0.70713878;0.00060635235;0;1.6388707e-14;0;0;1.7441014e-05;
0;0;0;0;0;0;0.92364407;3.4915922e-07;0;0;
0;3.3498614e-22;4.3696836e-22;0;0;0;0.00040396009;0;2.8257118e-05;0;
0;0;0;0.93260825;0;0.93000072;0.92851579;0;0;0.00017420696;
0;4.4398701e-21;0.041285489;0;0.92121637;0;0;6.5399698e-05;0.0020237623;0;
0;0;0.91538;0.83470684;0.92554986;0;0;0;0;0;
0;0;0;0;0.0087686107;0;0;0;0.87833571;0;
0;0.91723013;0;0;0;0.91755867;0;0;0;0.049747717;
0;0;0.92788863;0;1.1358616e-22;0;7.9492768e-20;0.024795357;0;0;
0;0;0.0062042088;0.92383885;0.74381;0;0;0;0.89295733;0;
0;0.92788863;0;0.014784443;0.001897598;0;0;0;0;0;
0;0;0;0;0;0;0.94378787;0.89005411;0.52489734;0;
0;1.1425929e-21;0.017977122;0;0;0;0;0;0;0;
0;0.094423361;0;0.89072698;4.4105279e-18;0;0.90378535;0;0;0;
0;3.4954866e-18;0;0;0.8971203;0;0;0.88468748;0;0.25388819;
0;0;0.91583556;0;0.92520785;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.04767799;0.85568738;0;6.0997587e-07;0.92335558;
1.0784438e-17;0;0;0;0.92110252;0.87410319;0.023952309;5.693572e-19;0;0;
0;0;0.8961767;0.85546935;0.91251493;0.71257973;0;0;0.75985181;0.87026322;
0;2.1085785e-18;0;0;0;0;0.0021225798;0;0;0;
0;0;0;0;0;0;0.9233737;5.1547181e-07;0;0;
0;8.649025e-13;1.0203858e-12;0;0;0;0.00038769512;0;3.2350632e-05;1.9263372e-15;
0;0;2.5819221e-16;0.93228465;1.0096864e-13;0.92948067;0.92803997;0;0;0.00014651925;
0;1.8412823e-13;0.039830521;9.6515542e-15;0.92043102;4.9661135e-12;0;6.3850268e-05;0.0018983138;1.2630146e-15;
1.8567799e-17;0;0.91487795;0.83131188;0.92517883;0;0;0;0;0;
0;0;0;0;0.0087077245;0;1.3712423e-14;4.9408222e-19;0.87701809;1.7917413e-15;
6.0603106e-16;0.9162721;0;1.8415929e-14;0;0.91689503;4.120705e-13;0;1.9501706e-17;0.057939146;
3.8679892e-18;0;0.92751193;0;3.1424988e-12;0;5.8683397e-13;0.026692476;3.1574112e-14;0;
0;0;0.0067586303;0.92386866;0.74813956;8.8615888e-13;3.8420998e-12;0;0.89148295;0;
2.9150766e-16;0.92721987;0;0.014333858;0.0014165521;0;3.1646306e-13;8.7173052e-16;0;0;
      };
     };
     float_Data @["CA3_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_249";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="CA3_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;8;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=90;
      ar {
       name="ar";
      [10 8 42] 0;0;0;0;0;0;0;0;0;0;
0.97252923;0;0;0;0.00039476299;0;0;0;0;0;
6.9048297e-06;0;0;0;0;0;0;0;0.0003814779;0;
0;0;0;0;0;0;0;0;0;0.0040367241;
0;0.00034878479;0;0;0;0;0;0;0.5407964;0;
0;0;0;0;0.055838194;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.91067946;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86655641;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85862648;0;0;0;0;0;0;0;
0;0;0;0;0;0.85920948;0;0;0.91125733;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85518968;
0;0;0;0;0;0;0;0;0;0;
0.9724952;0;0;0;1.7022288e-05;0;0;0;0;0;
0.0001215365;0;0;0;0;0;0;0;0.0017689299;0;
0;0;0;0;0;0;1.6655472e-06;8.8726802e-07;0;0.008170058;
0;0.00097099389;0;0;9.8267071e-07;0;0;0;0.57100195;0;
0;0;0;0;0.011931802;0;0;0;1.6098614e-21;0;
8.8201148e-07;0;1.1515633e-06;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86036664;0;0;
0.8433702;0;0;0;0.89805931;0;0;0;0;0;
0;0.76486516;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.9079659;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90781504;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86069429;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86444902;0;0;0;0;0;0;0;
0;0;0;0;0;0.8519873;0;0;0.90842927;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84765506;
0;0;0;0;0;0;0;0.8608849;0;3.2439318e-06;
0.84386516;3.0552626e-06;0;0;0.89720297;0;0;2.4015064e-06;0;0;
0;0.76584423;2.0055909e-06;0;0;0;6.1245173e-09;2.3813632e-06;0;0;
0;0;0;0;0;5.8632559e-06;0;2.1495075e-06;0;0;
0;2.1226557e-11;0;1.7368548e-07;0;5.443912e-09;0;0;0;0;
0;0;0;0;0.90694809;0;0;0;2.1667049e-06;0;
0;0;7.0418369e-09;0;0;0;3.4452355e-06;0;0;0;
0;0;0;7.5637914e-09;0;4.6899449e-09;0;0;3.6340284e-06;0;
0;0;0;0;0;0;0;0;0;0;
0.97142535;0;0;0;0.00013600988;0;0;0;0;0;
7.2461716e-21;0;0;0;0;0;0;0;2.5117859e-07;0;
0;0;0;0;0;0;0;0.014511543;0;0.00016665806;
0;0.34066743;0;0;0;0;0;0;0.40776813;0;
0;0;0;0;0.01887602;0;0;0;0;0;
0;0;9.2038223e-17;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.9076004;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86039698;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86434072;0;0;0;0;0;0;0;
0;0;0;0;0;0.85185987;0;0;0.90835106;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84755981;
0;0;0;0;0;0;0;0;7.3139494e-11;1.949152e-11;
0.97140551;0;0;0;0;0;0;0;0;0;
1.9850515e-07;0;0;0;0;5.24662e-12;2.0789521e-11;0;7.3826609e-06;0;
0;0;0;0;0;3.8932826e-11;1.0876342e-07;0.034772351;0;0.00018295737;
0;0.34016305;0;0;7.7473054e-08;8.5731356e-15;0;0;0.41003823;0;
0;0;0;0;0.00072696677;0;6.0318625e-11;0;4.4005355e-12;0;
6.5729658e-08;0;1.8724101e-06;0;0;0;6.7760998e-11;1.0691599e-11;0;3.3750253e-11;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86123365;0;0;
0.72169435;0;0;0;0.85580605;0;0;0;0;0;
0;0.2086807;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87690473;0;0;0;0;0;
0;0;0;0;0.87200433;0;0;0;0;0;
0;0;0;0;0;0;0;0.91648573;0;0;
0;0;0.90944517;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86410719;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85583174;0;0;0;0;0;0;0;
0;0;0;0;0;0.85593987;0;0;0.9099049;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85244018;
0;0;0;0;1.021218e-07;0;0;0.86059129;0;0;
0.7201708;0;0;0;0.85332692;0;0;0;0;0;
0;0.20542991;1.0832406e-10;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.0317261e-07;9.2492125e-11;6.3185411e-08;0;0;
0;1.4610362e-10;1.1837304e-07;0;0.87449294;0;0;0;0;0;
0;1.051329e-07;8.1312933e-08;0;0.87204742;0;0;0;0;0;
0;0;0;5.5638417e-08;0;0;0;0.91556764;0;0;
0;0;0;0;0;0;0;2.6298974e-06;0;0;
0.97154576;0;0;0;8.8909678e-07;0;0;0;0;0;
0.03559421;0;0;0;0;0;0;0;2.4176641e-06;0;
0;0;0;0;0;0;0;0;0;3.820199e-05;
0;4.3345284e-07;0;0;0;0;0;0;0.3753593;0;
0;0;0;0;0.0070564756;0;0;0;0;0;
0;0;0;0;0.00013285334;0;0;0;0;0;
0;0;0;0;0;0;0;0.34684014;0;0;
0;0;0.90880018;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.8635354;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85539216;0;0;0;0;0;0;0;
0;0;0;0;0;0.85484606;0;0;0.90943336;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85131884;
0;0;0;0;0;0;0;0;0;0;
0.97122341;0;0;0;0;5.8642006e-12;0;0;0;0;
0.058520462;6.0044005e-13;2.1315019e-11;0;0;0;0;0;7.5478642e-06;0;
0;0;1.2139702e-11;0;0;0;3.2050303e-07;1.2050559e-07;0;4.985842e-05;
0;1.524549e-06;0;0;1.4239102e-07;0;2.1194949e-11;0;0.39456335;0;
0;2.2857849e-11;0;0;0.00021379994;0;0;0;0;0;
1.0759366e-07;0;5.0737941e-07;0;0.00081658544;0;0;0;0;0;
0;0;0;0;0;0;0;0.39562955;0;0;
0;0;0;0;0;0;0;0.86157721;0;0;
0.71666479;0;0;0;0.8572647;0;0;0;0;0;
0;0.19323519;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87578857;0;0;0;0;0;
0;0;0;0;0.86945826;0;0;0;0;0;
0;0;0;0;0;0;0;0.91531712;0;0;
0;0;0.90629482;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85773069;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.8617081;0;0;0;0;0;0;0;
0;0;0;0;0;0.84820682;0;0;0.90692276;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84444678;
0;0;0;0;5.6879766e-16;0;0;0.85871398;0;0;
0.70810145;0;0;0;0.85219347;0;0;0;0;0;
9.4224483e-18;0.16828007;0;0;0;0;0;0;0;4.3781888e-12;
0;0;0;0;0;8.9236743e-12;1.261976e-12;2.6505349e-09;0;0;
0;2.9396863e-09;0;0;0;1.1058454e-11;0;0;0;0;
0;1.6926497e-12;0;0;0.87131369;0;0;0;0;0;
0;0;2.1040475e-11;0;0.86706913;0;0;0;0;0;
0;0;0;5.5284679e-09;0;7.054804e-10;0;0.913185;0;0;
0;0;0;0;0;0;0;0.0001216561;0;0;
0.97022229;0;0;0;0.00010742392;0;0;0;0;0;
0.00028606856;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;4.3176067e-05;0;2.5363991e-06;
0;0.13458803;0;0;0;0;0;0;0.26122546;0;
0;0;0;0;0.029932551;0;0;0;0;0;
0;0;1.2529377e-05;0;6.2947831e-05;0;0;0;0;0;
0;0;0;0;0;0;0;0.32371977;0;0;
0;0;0.90609348;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85761052;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86132574;0;0;0;0;0;0;0;
0;0;0;0;0;0.84773481;0;0;0.90664977;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84387267;
0;0;0;0;0;0;0;0;0;0;
0.970339;0;0;0;0;0;0;0;0;0;
0.0053513166;0;9.027553e-12;0;0;0;0;0;3.0046202e-11;0;
0;0;1.2728932e-12;0;0;0;4.7182241e-10;0.00081901916;0;3.8045428e-06;
0;0.14474182;0;0;1.1243442e-12;0;1.1300779e-11;0;0.26572013;0;
0;1.0603764e-11;0;0;0.00081442267;0;0;0;0;0;
1.5698705e-14;0;0.00053659437;0;8.4213258e-05;0;0;0;0;0;
0;0;0;1.2261928e-11;0;5.6546217e-12;0;0.31190902;0;0;
0;0;0;0;0;0;0;0.85764474;0;0;
0.84010613;0;0;0;0.89658338;0;0;0;0;0;
0;0.75828058;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.906941;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90905327;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86311829;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85576969;0;0;0;0;0;0;0;
0;0;0;0;0;0.86018342;0;0;0.90967637;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85093504;
0;1.7741035e-09;0.90825355;4.5351455e-11;0;3.3691591e-05;3.0213804e-11;0;0;0;
0;0;0;0;0;0;0;6.9349948e-10;0;0;
0;0.8638103;0;4.4277546e-12;0;0;0;0;0;0;
0;8.6540323e-15;0;0;1.8250443e-08;0;0;0;0;0;
3.2209804e-11;0;0.85708493;0;0;0;0;0;0;0;
0;0;0;0;0;0.86096591;0;8.6065931e-08;0.90877056;3.0819065e-05;
1.2710162e-09;2.3793587e-05;0;0;0;0;0;0;0;0;
0;0;1.2977624e-05;0;0;0;1.8066527e-13;2.8580147e-05;0;0.85172498;
0;0;0;0;0;0;0;0;0;0;
0.97236419;0;0;0;0.00031677008;0;0;0;0;0;
8.2500264e-06;0;0;0;0;0;0;0;0.00037492535;0;
0;0;0;0;0;0;0;0;0;0.0042000287;
0;0.00036465455;0;0;0;0;0;0;0.54710978;0;
0;0;0;0;0.050275389;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90884107;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86277092;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85567796;0;0;0;0;0;0;0;
0;0;0;0;0;0.85992002;0;0;0.90955752;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85066479;
0;0;0.90804815;0;0;0;0;0;0;3.607316e-15;
0;0;0;0;0;2.8367983e-12;0;0;7.36433e-09;1.7937475e-07;
0;0.86359769;0;1.6641603e-10;0;0;0;0;8.7112817e-08;0;
0;0;0;3.0681389e-07;1.7119811e-15;1.3061396e-07;0;1.085463e-07;0;0;
0;1.3325075e-07;0.85695583;0;0;0;4.1117084e-07;0;1.879823e-11;0;
0;0;0;1.7171203e-07;0;0.86043298;4.8920434e-08;7.4548412e-10;0.90811777;0;
8.8114533e-08;1.733256e-10;0;0;0;0;0;0;0;0;
4.5088708e-13;0;0;0;0;0;5.3528399e-09;0;0;0.85129005;
0;0;0;0;0;0;0;0.85683948;0;0;
0.83904654;0;0;0;0.89610177;0;0;0;0;0;
0;0.75584918;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.9064396;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90641862;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85744518;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86250871;0;0;0;0;0;0;0;
0;0;0;0;0;0.85384399;0;0;0.90694231;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84391391;
0;0;0;0;0;0;0;0.85679591;0;0;
0.8389349;3.4871075e-10;9.4054667e-06;1.4530439e-10;0.8949337;0;0;0;5.2954495e-11;0;
0;0.75655019;0;0;0;0;0;2.1088903e-10;0;0;
0;0;1.452992e-10;0;0;0;0;1.691077e-05;0;1.1345071e-05;
0;0;0;0;0;2.1419364e-10;0;0;0;0;
0;0;0;0;0.90509117;0;0;8.9324021e-06;0;5.5272585e-07;
0;0;0;1.7635117e-05;0;0;0;0;0;0;
0;6.9016796e-06;1.3203336e-10;0;0;1.4399378e-13;0;8.7855057e-08;1.4464517e-10;0;
0;0;0;0;0;0;0;0;0;0;
0.97126895;0;0;0;0.00013500881;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.0089189829;0;0.0001874666;
0;0.33167511;0;0;0;0;0;0;0.41226381;0;
0;0;0;0;0.019345438;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90612781;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85731733;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86210263;0;0;0;0;0;0;0;
0;0;0;0;0;0.85366637;0;0;0.90687597;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84366781;
0;0;0;0;0;0;0;0;3.3082882e-19;0;
0.97139901;6.1865872e-15;0;1.3787293e-14;0;0;0;0;0;0;
5.3621951e-09;0;0;0;0;0;0;2.0614466e-13;6.0064181e-06;0;
0;0;3.1301983e-17;0;0;0;2.7117915e-09;0.027844321;0;0.00024555507;
0;0.34340161;0;0;1.86159e-09;3.0823822e-13;0;0;0.42311105;0;
0;0;0;0;0.00044357352;0;0;3.0165764e-12;0;4.619456e-15;
1.4792669e-09;0;9.7865473e-07;0;0;0;0;0;0;0;
0;2.2103669e-12;9.589653e-14;0;0;0;0;0;5.1339633e-15;0;
0;0;0;0;0;0;0;0.86038202;0;0;
0.72127664;0;0;0;0.85601753;0;0;0;0;0;
0;0.20785449;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87707311;0;0;0;0;0;
0;0;0;0;0.87052613;0;0;0;0;0;
0;0;0;0;0;0;0;0.91592002;0;0;
0;0;0.90771222;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86034441;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85293639;0;0;0;0;0;0;0;
0;0;0;0;0;0.85695928;0;0;0.90835416;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84817684;
0;2.195108e-12;0;0;0;0;0;0.85917723;0;0;
0.71737736;0;0;7.6399852e-11;0.85269368;0;0;2.2341903e-11;0;5.1222514e-13;
0;0.19653898;0;0;0;3.4823075e-11;0;0;0;0;
5.5738161e-11;0;0;0;0;1.7103847e-12;0;0;7.859732e-12;0;
0;0;0;1.793413e-11;0;0;0;0;0;0;
0;0;0;0;0.87412274;0;0;0;0;3.5415545e-11;
0;0;0;0;0.87264657;0;0;0;0;0;
0;0;1.4284945e-11;0;0;0;0;0.91588193;0;0;
0;0;0;0;0;0;0;6.4836909e-06;0;0;
0.97141659;0;0;0;7.1493146e-06;0;0;0;0;0;
0.026792152;0;0;0;0;0;0;0;8.7871575e-07;0;
0;0;0;0;0;0;0;0;0;6.6104731e-05;
0;1.1374572e-06;0;0;0;0;0;0;0.3924832;0;
0;0;0;0;0.01335024;0;0;0;0;0;
0;0;0;0;4.5197635e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0.24487835;0;0;
0;0;0.90726805;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85992676;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85247874;0;0;0;0;0;0;0;
0;0;0;0;0;0.85593152;0;0;0.90778667;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84694082;
0;0;0;0;0;0;0;0;0;0;
0.97143543;0;0;0;0;2.8179819e-13;0;0;0;0;
0.060936451;3.7185322e-14;1.4330013e-12;0;0;0;0;0;7.98573e-06;0;
0;0;9.893489e-13;0;0;0;8.2257872e-09;2.745483e-09;0;6.0568185e-05;
0;1.1366903e-06;0;0;3.1121066e-09;0;1.6083835e-12;0;0.38364238;0;
0;2.2100542e-12;0;0;0.00039920962;0;0;0;0;0;
2.5105646e-09;0;1.2439513e-08;0;8.295825e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0.23800528;0;0;
0;0;0;0;0;0;0;0.85893071;0;0;
0.71271002;0;0;0;0.85586244;0;0;0;0;0;
0;0.18192478;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87482953;0;0;0;0;0;
0;0;0;0;0.86378092;0;0;0;0;0;
0;0;0;0;0;0;0;0.91286957;0;0;
0;0;0.90579522;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85689265;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86173576;0;0;0;0;0;0;0;
0;0;0;0;0;0.85270864;0;0;0.90636462;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84276175;
0;0;0;0;0;0;0;0.85881805;0;0;
0.71148676;0;0;0;0.8535046;0;0;0;0;0;
0;0.18039434;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.0772319e-15;1.7554176e-13;2.2241556e-10;0;0;
0;2.3371066e-10;0;0;0;0;0;0;0;0;
0;1.7722956e-15;0;0;0.87237406;0;0;0;0;0;
0;0;0;0;0.86458188;0;0;0;0;0;
0;0;0;3.2445352e-10;0;7.8205442e-11;0;0.91218543;0;0;
      };
     };
     float_Data @["DG_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_246";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="DG_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 20;20;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=90;
      ar {
       name="ar";
      [20 20 42] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.87175369;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.8587324;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89165419;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.86454505;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95782393;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.95269561;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.0632522e-13;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85407722;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;5.4786112e-16;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.870323;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;3.4185355e-13;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.9349462e-15;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89822859;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;8.5885626e-15;
0;7.5441416e-14;0;0;0;0;0;0;0;0;
1.0977154e-16;0;0;0;0;0;0;0;0;0;
0;0;0;0;2.5596719e-16;0;0;0;0;0;
0;2.5659042e-15;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.8692928e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.0354699e-16;0;0;0;0;0.84514278;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.95257306;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95161116;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95301956;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.00013817234;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94656134;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.6718098e-09;0;0;
0;0;0;0;0;1.5858532e-09;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
6.5457334e-11;0;0;0;0;0;0;1.3025154e-13;0;0;
0;0;0.95001948;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;7.9057588e-10;
0;0;0;0;0;0;0;0;3.568673e-07;0;
0;0;0;0;0;0;0;7.8872949e-07;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;9.3024362e-13;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.735265e-10;0;0;0;0;0;0;0;0;
0;0;1.3840751e-09;0;0;0;0;5.5197635e-10;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.223408e-09;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.6645951e-07;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.009907e-10;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.2329144e-09;0;0;0;0;
1.6455477e-09;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.5153744e-09;0;0;0;0;0;0;0;
0;4.1605765e-13;0;0;0;0;0;0;0;0;
1.2763612e-06;0;0;0;0;0;0;1.5116087e-11;0;0;
1.4987268e-06;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;7.9706952e-10;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.1832209e-09;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;7.6427938e-07;3.9846144e-14;0;0;
0;0;0;0;0;0;0;0;0;0.94896716;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86910284;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.83383274;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.87747085;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.86145759;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95292395;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.2944404e-05;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94644845;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.84897506;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.2675515e-11;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.85193557;0;0;0;0;0;
4.1967561e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;2.1282902e-14;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88717747;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;3.3528302e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.9565569e-16;0;0;0;0;0;0;
3.0703582e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2.80558e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.9523655e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.83930618;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.91954988;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.91790128;0;
0;0;0;0;0;0;0;0;0;0.91672862;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95105177;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94400394;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.00010625593;0;0;0;0;0;
0;1.013415e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.3423167e-14;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;4.1970623e-08;3.8293485e-14;
0;0;0;0;0;0;0;0;0;0;
4.5744966e-12;0;0.91359586;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
6.0569112e-13;0;0;7.8986492e-13;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.7828104e-14;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;8.1985339e-12;0;0;0;0;
0;0;0;0;0;0;1.1088284e-10;0;0;0;
6.1087829e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.5305057e-13;
0;7.1666605e-12;0;2.3832149e-13;0;0;3.6148948e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.9968771e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;3.1618281e-08;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;8.3352363e-17;0;0;0;0;0;0;0;0;
0;0;0;0;0;2.9440218e-16;0;0;0;0;
0;0;0;0;0;0;0;0;4.0327666e-14;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.4732515e-11;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;4.7182666e-15;0;0;0;0;0;1.011683e-12;
0;0;0;0;0;0;0;0;0.91891801;0;
0;0;0;0;6.4526599e-11;0;0;0;0;0.9103713;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86058599;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.84690356;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88495207;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.84053195;0;
0;0;0;0;0;0;0;0;0;0.85208476;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.9493947;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94184452;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.00095637928;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.83599341;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;9.0052938e-14;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.8551749;0;0;7.185395e-17;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;4.2249499e-15;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88918829;0;0;
0;0;0;0;0;0;4.2075293e-12;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.3517606e-16;0;0;0;3.1800148e-14;0;
0;8.0953872e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.84962505;0;
0;0;0;0;1.2824373e-11;0;0;0;0;0.82460278;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.92056888;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.91429698;0;
0;0;0;0;0;0;0;0;0;0.91783971;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;8.0865963e-19;0;0;
0;0;0;0;0;0;0;0;0;0.9483307;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;4.7304418e-16;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94041437;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.0358988e-11;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.113222e-09;0;0;
0;0;0;0;0;2.2400193e-14;0;0;0;0;
0;0;0;0;0;0;0;0;9.6397212e-10;0;
6.1853668e-11;0;0;0;0;0;0;0;0;0;
0;0;0.91028523;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.4091303e-15;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.3086619e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.7762528e-11;0;0;0;0;0;0;1.6604944e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;4.4093085e-10;0;0;8.1384832e-10;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.0294779e-11;0;0;0;0;0;0;0;0;0;
4.1740916e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;8.3894219e-16;0;0.9107762;0;
0;0;0;0;0;0;0;0;0;0.9067899;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86223543;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.7985028;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.85922825;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.8185634;0;
0;0;0;0;0;0;0;0;0;0.85386699;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94794363;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;7.9705125e-24;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.93989408;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.7220324e-05;0;0;0;0;0;
0;2.6447829e-15;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;7.5785662e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.1021585e-14;0;0;0;0;0;0;0;0;0;
0;0;0.84027797;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.4410441e-16;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.82031214;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86942953;0;5.0645715e-16;
0;0;0;0;0;0;5.7987876e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
6.6273607e-15;0;0;0;0;0;0;1.0446713e-16;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;4.3486406e-13;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;3.4626005e-17;0;
0;6.999702e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.83829206;0;
0;0;0;0;1.1943852e-11;0;0;0;0;0.82933426;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.95081061;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.2599239e-06;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94977868;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95633078;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.95080823;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;8.0814834e-06;0;0;0;0;
1.8800039e-13;0;0;0;0;0;2.8174141e-10;0;0;0.95425946;
0;0;0;0;0;0;2.5160048e-06;0;0;0;
0;0;0;0;0;1.2795209e-10;0;0;0;0;
0;0;0;0;0;0;1.6518046e-09;0;0;0;
0;0;0;0;0;0;0;4.3174225e-10;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;8.649427e-09;0;0;0;6.5084027e-10;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.8943549e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;4.0911874e-09;0;0;
0;0;3.3946768e-10;0;0;0;0;0;0;0;
0;1.4740306e-11;0;0;0;0;0;0;0;0;
0;7.6860134e-15;0;0;0;0;0;4.6833309e-10;0;4.3171733e-10;
0;0;0;0;0;0;0;0;3.2422245e-10;6.0000421e-11;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;4.1820113e-06;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;2.760696e-11;0;
0;0;0;6.047045e-16;0;0;0;0;0;0;
0;0;0;0;0;5.4417626e-16;0;0;0;0;
0;0;0;0;0;0;0;3.455868e-14;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94835615;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;9.4126052e-13;
0;0;0;0;0;0;0;3.6324993e-06;7.6772864e-15;0;
0;0;0;0;0;2.7723045e-06;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
9.8637431e-16;0;0;4.0295222e-06;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.7746906e-10;0;0;0;5.5315058e-10;0;4.6246906e-10;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.2470446e-12;0;0;3.2071157e-10;1.2626802e-11;4.023358e-13;5.6483562e-10;0;0;0;
0;0;0;0;3.1145933e-10;0;0;0;0;0;
0;0;0;0;0;0;2.0917426e-11;0;0;0;
9.3060715e-13;0;0;0;0;0;0;1.4813678e-11;3.9210211e-12;0;
0;0;0;9.258282e-07;0;3.9505112e-06;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86923862;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.86035907;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89268255;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.86166179;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95569384;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.95000345;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95272863;
0;0;0;0;1.5062131e-10;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;8.0194006e-08;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.1787324e-09;0;0;6.9520527e-14;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;6.2255132e-11;0;0;5.4122727e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;4.4454957e-15;6.7611063e-09;0;0;
2.8109186e-09;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;4.3236101e-10;0;0;0;0;0;0;
0;0;0;0;0;0;0;5.5033072e-13;0;0;
0;0;0;0;0;0;0;0;5.9266448e-08;0;
0;0;0;0;0;0;1.0936772e-07;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;7.1961873e-14;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94643682;0;0;0;
1.0515771e-07;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;7.1694158e-11;0;0;0;
0;6.4842737e-14;0;0;0;0;0;0;0;0;
0;0;0;1.8859723e-12;0;4.7366044e-08;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.4200727e-10;0;6.2882279e-08;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.94901955;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94791645;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95183057;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.9642584e-05;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94502503;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;5.4864525e-08;0;7.8948954e-09;0;0;
0;5.2285905e-13;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
6.9634036e-14;0;0;0;0;0;0;0;0;0;
0;0;0.94539708;0;0;6.6475536e-09;0;0;0;0;
2.0142974e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1.0757874e-07;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;6.8450362e-08;0;0;1.0625576e-12;0;
0;0;0;0;0;0;1.2113353e-09;0;0;0;
0;0;0;0;0;0;0;3.3035781e-13;0;0;
0;0;0;0;0;0;3.9771547e-11;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.0246482e-07;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;2.6632993e-10;3.1970611e-08;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.0469333e-06;0;0;0;0;0;0;
3.2682726e-14;0;0;0;7.9023017e-08;0;0;0;0;0;
0;0;0;0;0;0;0;5.0306307e-06;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.6675206e-11;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;2.5838391e-14;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2.2027658e-16;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.9845291e-15;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.6873712e-07;0;0;0;0;0;
0;0;0;0;0;0;1.4618403e-06;0;0;0;
6.224365e-09;0;0;0;0;0;0;3.7278537e-06;2.0670232e-08;0;
0;0;0;0;0;0;1.5950246e-09;0;0;0.94413894;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86923259;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.82987559;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.87528694;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.8617062;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95193923;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.3379146e-06;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94517326;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.2782608e-14;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.84690148;0;0;0;0;0;0;0;
0;0;0;0;0;0;2.8026006e-14;0;0;0;
0;0;0;0;0;0;0;0;0;3.8981573e-13;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;5.0010571e-13;0;0;0.85082239;0;0;0;0;0;
3.5819237e-13;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;3.7258339e-17;0;0;2.9983074e-18;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88648498;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;7.2203528e-13;0;4.6370165e-14;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
3.3395288e-15;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;5.6188867e-20;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.8486809e-18;0;0;0;0;0;1.0144435e-16;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;9.3116344e-17;0;0;0;0;
0;0;0;0;0;0;6.2681067e-13;0;0;0;
0;0;0;8.2596715e-15;0;0;0;1.1677497e-12;0;0;
0;0;0;0;0;0;0;0;0;0.83697069;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.92102665;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.91491348;0;
0;0;0;0;0;0;0;0;0;0.91834462;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95044833;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94320887;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.3586668e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.6746731e-11;0;0.91492069;0;0;0;2.9285281e-12;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;8.182767e-12;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;8.0714532e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.9636379e-11;0;0;
0;0;2.6567735e-15;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;4.7236529e-12;0;2.6270769e-11;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;3.6567898e-11;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.4382087e-16;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.91699517;0;
0;0;0;1.6403956e-11;0;0;0;0;0;0.91184437;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86108428;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.84228468;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88226146;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.8113569;0;
0;0;0;0;0;0;0;0;0;0.85257137;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94971889;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94224852;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;4.9379374e-05;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.83927214;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.6730251e-15;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.068796e-20;0;0;0.85739785;0;0;2.7146933e-19;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;7.8949651e-17;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89044642;0;0;
0;0;0;0;0;0;2.8955243e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;2.7055659e-18;0;0;0;4.8820014e-16;0;
0;5.9584e-13;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;6.3122674e-16;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;6.9632478e-15;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.82848769;0;
0;0;0;2.6093878e-18;9.8603114e-13;0;0;0;0;0.82830179;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.92018396;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.90296274;0;
0;0;0;0;0;0;0;0;0;0.91741437;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94985408;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.3286373e-20;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94244486;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.8359259e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;7.4252701e-11;0;0;
0;0;0;0;0;1.0231092e-15;0;0;0;0;
0;0;0;0;0;0;0;0;7.4872317e-11;0;
5.2369879e-12;0;0;0;0;0;0;0;0;0;
0;0;0.91210455;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1.2325809e-16;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;6.7144088e-13;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.4911865e-13;0;0;0;0;0;0;
2.2868409e-12;0;0;0;0;0;0;3.4136425e-13;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.7036095e-11;0;0;5.8404524e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.9740888e-16;0;0;0;0;0;0;0;0;0;
1.043157e-14;0;0;0;0;0;0;2.0182456e-13;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.1617574e-12;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.0690799e-14;0;0;0;
0;0;0;0;0;0;0;7.5824668e-12;0.90628296;0;
0;0;0;4.7319716e-15;0;0;0;0;0;0.90880293;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [42] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;    };
   };
   DataTable @["LastTestOutputData"] {
    name="LastTestOutputData";
    desc="just for the last test epoch";
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_129";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
499;499;      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_130";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_131";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;      };
     };
     String_Data @["trial_name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_132";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] "pat1_cat1";"pat1_cat2";"pat1_test";"pat2_cat1";"pat2_cat2";"pat2_test";"pat3_cat1";"pat3_cat2";"pat3_test";"pat4_cat1";
"pat4_cat2";"pat4_test";"pat5_cat1";"pat5_cat2";"pat5_test";"pat6_cat1";"pat6_cat2";"pat6_test";"pat7_cat1";"pat7_cat2";
"pat7_test";"pat8_cat1";"pat8_cat2";"pat8_test";"pat9_cat1";"pat9_cat2";"pat9_test";"pat10_cat1";"pat10_cat2";"pat10_test";
"pat11_cat1";"pat11_cat2";"pat11_test";"pat12_cat1";"pat12_cat2";"pat12_test";"pat13_cat1";"pat13_cat2";"pat13_test";"pat14_cat1";
"pat14_cat2";"pat14_test";      };
     };
     float_Data @["minus_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_133";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 120;120;120;120;120;120;120;120;120;120;
120;120;120;120;120;120;120;120;120;120;
120;120;120;120;120;120;120;120;120;120;
120;120;120;120;120;120;120;120;120;120;
120;120;      };
     };
     float_Data @["sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_134";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1671974509954453;
	val_type_fixed=0;
       };
      };
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=105;
      ar {
       name="ar";
      [42] 1.2883714;0;4.58108;0;1.5680215;3.4202738;2.3245122;0.99482292;5.6160564;1.3084483;
1.5440078;1.3187187;2.1383615;0.99041116;5.4375868;1.1795434;2.6436923;1.7238485;3.1687057;1.9403671;
6.4584174;0.65645039;1.5205932;4.6548247;0.27831703;0.71939999;1.7416114;0;2.5064497;0;
1.6299268;1.3409168;4.8917346;0.94717616;2.4559491;0.94580883;1.2753137;1.3050951;1.266333;0.86128187;
2.4827089;0.85753584;      };
     };
     float_Data @["EC_out_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_135";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="EC_out_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;4;2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=90;
      ar {
       name="ar";
      [1 4 2 1 42] 0.61427861;0.00081011566;0.0041348622;0.045519397;0.79266107;0.81699055;0;5.4248926e-06;0.0007828974;9.6518943e-07;
0;0.76103759;0;0;0.8334195;0.79293567;0.61583078;0.00080185407;0.0037236586;0.047275417;
0.79074705;0.81784993;3.0022335e-11;5.5801729e-06;0.063424192;0.002287897;0.62306952;0.0010824432;0.8791576;0.80520761;
0;4.2063143e-06;0.001029482;1.222686e-06;4.7521557e-06;0.75367832;1.6456035e-05;0;0.80393577;0.76514876;
0.066837609;0.0021117732;0.62248605;0.0011168817;0.87928724;0.80444694;2.4991748e-10;3.6641948e-06;0.7186861;0.013902643;
0.047151007;0.051273804;0.8100065;0.79675382;0;0.00011785185;0.052329838;0.00090899988;0.0025918996;0.81769043;
2.9348821e-05;0;0.80193406;0.75773191;0.71977139;0.014314422;0.043374248;0.054052737;0.80773455;0.79739892;
2.5291837e-13;0.00012174932;0.56311119;0.0043322812;0.1426426;0.00037536331;0.86546093;0.72915888;0;9.0554067e-07;
0.0036347669;4.0324638e-05;2.1056737e-06;0.73762351;1.363117e-19;0;0.81533003;0.80865872;0.57263088;0.0046043424;
0.088911004;0.00048698968;0.86115873;0.73461747;0;1.0930079e-06;0.70823956;0.011434121;0.023389913;0.18790649;
0.79315662;0.81783843;0;5.3189187e-06;0.069284849;0.0048059844;0.0008805145;0.80571777;0;0;
0.81361324;0.80705684;0.7092818;0.011646087;0.022771103;0.18711975;0.79230225;0.81801993;1.1652079e-11;5.510195e-06;
0.51768112;0.045248915;0.57243294;0.0044652973;0.87097406;0.77120554;0;4.2371412e-05;0.047850862;0.0053446665;
0.00093057961;0.81006998;1.0951806e-14;0;0.80262107;0.79944205;0.6620906;0.02475878;0.42173609;0.0032094806;
0.86543339;0.72724086;0;1.0778193e-06;0.74647415;0.042523913;0.070094809;0.088957749;0.80807608;0.79373288;
0;0.00014234804;0.25088403;0.020521106;0.0095515316;0.82892931;0;0;0.80214274;0.79247046;
0.74805838;0.042961936;0.066156626;0.089269072;0.80661458;0.79440528;5.6333207e-16;0.00014852834;0.42485023;0.00065518386;
0.57066023;0.00080315355;0.87736118;0.76948863;0;0;0.0094883172;3.9824222e-06;1.8840828e-05;0.7344929;
8.4238761e-16;2.306664e-21;0.81758779;0.77817416;0.038139522;0.00071343087;0.00049006671;0.69777274;4.3099617e-06;6.6732224e-09;
0.81001651;0.76592696;0.68593723;0.0042508957;0.014473957;0.47244242;0.77323818;0.82215381;0;3.7419843e-06;
0.1518255;0.00082757237;0.0033348484;0.80117726;3.8541014e-08;0;0.81507874;0.77106535;0.13235322;0.0007524066;
0.0028976297;0.80540335;1.8741646e-13;3.6422389e-12;0.74981862;0.65312517;0.57306892;0.0045714658;0.65950161;0.0050195442;
0.87663978;0.76799774;0;0;0.072534584;0.00087009877;0.0040999805;0.80897498;9.9009834e-05;0;
0.79654896;0.74463487;0.57496727;0.0045468523;0.65860009;0.004811896;0.87635416;0.76727104;1.132154e-09;1.4169228e-08;
0.75116646;0.035550084;0.077746704;0.11717749;0.80317402;0.79873884;0;0.00012566084;0.3691203;0.0091849733;
0.028965691;0.82150441;0.00022424704;4.9593543e-20;0.79203612;0.7359218;0.75177145;0.035328522;0.072995067;0.13307177;
0.80113113;0.79954445;1.4172542e-13;0.0001252826;0.67129797;0.026770236;0.34004578;0.004830996;0.86027938;0.73559606;
0;1.071357e-06;0.08928775;0.0048421714;0.0011092483;0.79762977;9.3466918e-15;6.7742552e-17;0.81160706;0.80196637;
0.67407674;0.027472951;0.31387052;0.0053682481;0.85870683;0.73744321;3.4269191e-14;1.1291222e-06;0.74411011;0.029535571;
0.04980395;0.4224945;0.78822243;0.81903517;0;5.4526722e-06;0.42473608;0.013001257;0.014127477;0.81637192;
0;4.920133e-20;0.80974036;0.78548533;0.7438162;0.029210206;0.049051926;0.43087775;0.78699958;0.81947446;
4.935497e-14;5.1658312e-06;0.71488988;0.071947299;0.56203038;0.015044128;0.86537141;0.72681504;0;1.0686408e-06;
0.39414755;0.061788399;0.064306639;0.59990704;0.0005774009;6.3063667e-18;0.78868169;0.72291374;0.71459168;0.073967688;
0.56134856;0.014922027;0.86514199;0.72607768;5.2271958e-18;1.1347094e-06;      };
     };
     float_Data @["EC_in_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_136";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="EC_in_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;4;2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [4] ;;;;      };
      width=90;
      ar {
       name="ar";
      [1 4 2 1 42] 0.8770082;0;0;0.95488912;0.97587579;0.97660917;0;0;0;0;
0;0.97819972;0;0;0.97682106;0.97641599;0.87879503;0;0;0.95485437;
0.94270349;0.94792056;0;0;0;0;0.9770093;0;0.97717351;0.97619134;
0;0;0;0;0.9551357;0.92905152;0;0;0.97642916;0.97606659;
3.2515931e-07;0;0.97700596;0;0.95029104;0.94515669;0;0;0.86274779;0;
0.94732225;0.94397104;0.976219;0.97621518;0;0;0;0;0.94464278;0.97709852;
0;0;0.97639811;0.97593027;0.86174679;0;0.94734287;0.943995;0.94434053;0.94591796;
0;0;0.83296317;0.95478946;0;0;0.9771018;0.97502428;0;0;
0;0.95377946;0;0.92721391;0;0;0.97653401;0.97675765;0.85409844;0.95578104;
0;0;0.95001954;0.9386217;0;0;0.83992779;0.94287401;0;0.95769358;
0.97575152;0.97664106;0;0;0;0.94253016;0;0.97694802;0;0;
0.97649509;0.97667825;0.84167522;0.94288653;0;0.95753366;0.94308156;0.94752485;0;0;
0;0.93948954;0.97280747;0;0.97710788;0.97569549;0;0;0;0.94269532;
0.94527441;0.91631931;0;0;0.97635567;0.97663414;0.73919582;0.93959856;0.96848863;0;
0.95013875;0.93807554;0;0;0.7647208;0.92991799;0.93375343;0.92834556;0.97617167;0.97617161;
0;0;0;0.92264402;0.92727208;0.97478712;0;0;0.97633976;0.97649342;
0.77542073;0.92977941;0.9336139;0.92820096;0.94430548;0.94582468;0;0;0.96860355;0;
0.88947242;0;0.97722536;0.97563177;0;0;0.94722384;0;0;0.92846805;
0;0;0.97658432;0.97623831;0.94897753;2.5788733e-05;0;0.86364043;0;3.9412775e-09;
0.94667089;0.94378775;0.97216433;0;0;0.96811515;0.97545666;0.97673291;0;0;
0.94796818;0;0;0.97673786;0;0;0.97660774;0.9760884;0.94580287;0;
0;0.97692913;0;0;0.94339275;0.93298799;0.9685961;0;0.97428524;0;
0.97720855;0.97560793;0;0;0.93223667;0;0.94645333;0.9182291;0;0;
0.97632825;0.97569907;0.96873271;7.8587403e-09;0.97422147;0;0.95026225;0.94179887;0;5.902471e-08;
0.9718377;0;0.93058801;0.94147217;0.97603679;0.97631437;0;0;0.95376766;0;
0.92362183;0.97425681;0;0;0.97626746;0.97557777;0.97189158;0;0.93006307;0.94339544;
0.94375092;0.94625598;0;0;0.97222775;0.94080961;0;0;0.97701418;0.97505844;
0;0;0.93285292;0.9444083;0;0.91738772;0;0;0.97646463;0.97664762;
0.97243011;0.94106501;0;0;0.94948614;0.93900311;0;0;0.97063065;0.91979516;
0;0.9616279;0.97574645;0.97665524;0;0;0.95711237;0.91792476;0;0.97402382;
0;0;0.97645646;0.97638792;0.97064489;0.919523;0;0.96197242;0.94255757;0.94773936;
0;0;0.96919304;0.91539216;0.96829402;0;0.97710603;0.97488451;0;0;
0.9571268;0.92470121;0.9290933;0.060862876;0;0;0.97629356;0.97536814;0.96926814;0.91529274;
0.96829849;0;0.9500066;0.93798333;0;8.3385798e-12;      };
     };
     float_Data @["CA1_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_137";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="CA1_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=90;
      ar {
       name="ar";
      [10 10 42] 0;0;0;0;0;0;0.80843455;1.4015388e-05;0;0;
0;0;0;0;0;0;0.0024447085;0;0.53129089;0;
0;6.012023e-05;0;0.81878245;0;0.91507745;0.91009641;0;0;3.0738542e-20;
0;0;9.1991632e-07;0;0.91490215;3.1864279e-06;0;0.02102977;6.2487128e-15;0;
0;0;0.82974821;0.90446007;0.91966909;0;0;0.0010057727;0;0;
0;0;0;0;3.8418548e-05;0;0;0;0.82359582;0;
0;0.92473638;0;0;0;0.87072366;0;5.1130812e-21;0;0.69876015;
0;0;0.90385616;0;0;0;0;0;0;0;
0;0;0.78359735;0.45715943;0.77006495;0;0;0;0.88373274;0;
0;0.90574944;0;0.77007437;0.0047268993;0;0;0;0;0.075134441;
0;0;0;0;0;0;0.92283541;0.912983;0.88380182;0;
0;0;0;0;0;0;6.29264e-19;0;8.5917427e-06;0;
0;0.89203852;0;0.08902932;0;0;0.89496332;0;0;0;
0;0;0;0;0.90559167;0;0;0.9300878;0;0.63720417;
0;0;0.89805931;0;0.92580724;0;0;0;0;0;
0;0.003312361;0;0.0032389304;0;0;0;0;0;0;
0;0;0;0;0;7.1569116e-07;0.91776466;0;0;0.92398077;
0;0;0;0;0.84329349;0.93231142;0;0;0;0;
0;0;0.9251439;0;0.91937155;1.1936348e-06;0;0;0.075796798;0.92140639;
0;0;0;5.7831826e-19;0;0;0;0;0;0;
0;0;1.4624249e-13;0;0;0;0.80590475;1.5987485e-05;1.1104782e-13;6.3951316e-16;
5.4358469e-19;0;0;1.8279513e-09;0;0;0.0022680941;1.2566485e-17;0.53167987;1.7989163e-12;
1.5210255e-14;5.7684389e-05;0;0.81684321;4.2617368e-10;0.91449243;0.90906638;3.4910591e-10;0;1.6567272e-11;
7.3840574e-17;0;8.76218e-07;0;0.91383749;1.7600272e-06;0;0.022736037;6.2805806e-14;3.6395204e-07;
3.6444538e-14;0;0.82872009;0.90399867;0.91937119;1.2415263e-12;4.0262149e-16;0.00098015007;1.7074476e-18;0;
0;2.9449899e-14;0;1.3550383e-13;3.7383572e-05;0;9.0451474e-12;0;0.81968641;0;
0;0.9237082;0;0;0;0.86844009;0;2.4579362e-13;0;0.71422809;
0;0;0.90298575;2.2851428e-13;0;2.9548794e-08;0;0;0;3.9972633e-14;
0;0;0.78597796;0.43646252;0.77650809;0;1.1717294e-08;0;0.88198555;0;
0;0.90421861;0;0.77336729;0.0039470806;0;0;0;0;0.085177451;
0;0;0;0;0;0;0.92171258;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.3367591e-05;0;0.91159862;0;0.91233641;0.92281604;0;0;0.8049444;
0;0;0.87925994;0;0.9186669;5.6802875e-19;0;8.0823273e-05;0.73942608;0;
0;0;0.88802451;0.85787249;0.90922636;0;0;0;0;0;
0;0;0;0;0.0044018095;0;0;0;0.84372282;0;
0;0.92629498;0;0;0;0.89524466;0;0;4.2895706e-22;0;
0;0;0.91253656;2.5030839e-20;0;0;6.044203e-06;0.0093416376;0;0;
0;0;1.5146226e-07;0.89364362;4.5477103e-05;0;0;0;0.92219043;0;
0;0.90693891;0;0.0022112206;0.65424961;1.1343968e-18;0;0;0;0;
0;0;0;0;0;0;0.93376249;0.91432703;0.86038762;0;
0;0;0.00042408952;0;0;0;0;0;0;0;
0;0.90104234;0;0.63379341;0;0;0.91371709;0;0;0;
0;0;2.2080708e-20;0;0.9006902;0;0;0.92684036;0;0.052677687;
0;0;0.91679037;0;0.93442416;0;0;0;0;0;
0;1.1530013e-06;0;4.4440047e-05;0;0;0;0;0;0;
0;0;0;0;0;1.3595722e-05;0.89722043;0;0.00063093781;0.91700757;
1.5899802e-18;0;0;0;0.88269645;0.92310941;3.4221725e-07;0;0;0;
0;0;0.92666018;0.00077940634;0.91626632;0.00032181098;0;0;0.46106651;0.9147622;
0;0;0;0;0;0;2.6578004e-16;0;0;0;
2.8042468e-09;0;1.5590168e-09;0;0;1.8942867e-15;0.92144328;8.2596058e-10;0;0;
1.9628692e-09;0;2.7389156e-08;0;3.1360454e-19;1.7510272e-13;1.6528782e-08;8.6723025e-12;4.3059289e-10;2.3796629e-10;
0;1.4836508e-05;0;0.91099256;2.8004607e-14;0.91141456;0.92237866;4.7282539e-11;7.3079997e-14;0.80339468;
0;0;0.8791123;2.0137788e-08;0.91781121;7.4630107e-06;2.1367362e-13;8.2501494e-05;0.73908812;0;
0;0;0.88722789;0.85545141;0.90874726;8.3149848e-11;0;3.082163e-09;5.952093e-11;7.9572237e-07;
4.5025587e-08;0;0;7.8919822e-14;0.0044220435;7.8217299e-14;3.3114251e-12;2.4887745e-09;0.8416968;2.5916955e-14;
2.5289235e-13;0.9255628;0;0;0;0.89428496;1.5046495e-09;0;2.1294291e-08;2.9993902e-08;
0;7.6641716e-14;0.91193324;4.1337228e-07;1.8888276e-12;0;9.3341359e-06;0.010505427;5.3577146e-15;3.4164365e-13;
0;7.3456595e-14;2.8873936e-07;0.89360464;4.8855192e-05;1.4087215e-13;0;0;0.92151964;3.0925859e-12;
0;0.90584707;0;0.0021358726;0.64159071;9.2142545e-07;0;2.184817e-12;6.9818806e-10;3.668362e-13;
2.0518326e-19;0;0;0;0;0;0.84507501;0.0010198524;0;0;
0;0;0;0;0;0;8.1388498e-06;0;0.011217157;1.7215695e-22;
0;0.0035051927;0;0.83937091;0;0.89950919;0.9208498;0;6.6769088e-18;7.3236714e-07;
1.0271964e-20;0;0.012444296;0;0.902628;0;0;0.0096576689;9.7260524e-14;0;
0;0;0.88088721;0.87943763;0.92189527;0;0;6.7271839e-07;0;0;
0;0;0;0;0.00045788172;0;0;0;0.83554375;0;
0;0.9208374;0;0;0;0.86594754;0;0;0;0.44276494;
0;0;0.90900105;0;0;0;0;0;1.889043e-19;0;
0;0;0.83036971;0.76450801;0.76664078;0;0;0;0.89662927;0;
0;0.89937913;0;0.76653218;0.0023253409;0;0;0;0;0.025568059;
0;0;0;0;0;0;0.93025249;0.90915614;0.848858;0;
0;0;0.00023273159;0;0;0;0;0;0;0;
0;0.8972562;0;0.64888692;0;0;0.91446108;0;0;0;
0;0;0;0;0.89639485;0;0;0.92412406;0;0.040581822;
0;0;0.91657329;0;0.9316479;0;0;0;0;0;
0;1.546778e-06;0;6.1930565e-05;0;0;0;0;0;0;
0;0;0;0;0;5.6208341e-05;0.89219737;0;0.00031810114;0.9129799;
0;0;0;0;0.87345493;0.91627336;5.1063699e-07;0;0;0;
0;0;0.92254663;0.00077207881;0.91087192;0.00024800893;0;0;0.56548661;0.90865439;
0;0;0;1.4613284e-17;0;0;8.1078041e-19;0;0;0;
8.9328156e-14;0;0;0;0;0;0.84330803;0.0011042766;1.669887e-10;0;
2.175099e-13;7.299622e-20;7.980848e-13;0;1.2683933e-18;7.1240567e-14;6.2859995e-06;4.1674017e-15;0.012942132;2.0404754e-10;
4.0651755e-17;0.0038499029;0;0.83704442;1.2323856e-12;0.8985098;0.92000508;3.8031528e-10;5.1991779e-12;3.3264422e-07;
3.8131574e-11;6.0674913e-13;0.011293886;0;0.90140259;1.7252835e-10;0;0.010082852;5.6977076e-09;5.4356619e-10;
0;0;0.8797186;0.87797201;0.9212923;5.2723589e-17;0;7.4900424e-07;1.4354119e-15;3.68748e-13;
0;0;0;0;0.00041629586;0;2.9456793e-10;0;0.83297199;0;
2.4345245e-11;0.91993356;0;1.6124252e-17;0;0.86339957;2.0622016e-17;0;1.8876987e-10;0.48344335;
0;0;0.90783602;4.7740615e-13;4.1799853e-20;1.157025e-09;0;6.5506947e-11;1.4426757e-13;0;
0;0;0.8319912;0.75966901;0.77141684;0;1.3339119e-12;5.5094758e-13;0.89510459;0;
0;0.89774317;0;0.76686865;0.0019903725;3.0043784e-12;2.2177843e-20;1.4806261e-13;0;0.028593957;
0;0;0;0;0;0;0.91121256;0;0;0;
0;0;0;0;0;0;0.013256388;0;0.014596964;0;
0;0;0;0.9269715;0;0.93535161;0.92125332;0;0;1.7908584e-06;
0;0;0.00058632053;0;0.92902553;1.960782e-16;0;2.9970508e-05;0.00013066261;0;
0;1.7508581e-16;0.89759165;0.85981834;0.92437613;0;0;2.7466003e-05;0;0;
0;0;0;0;0.0071517318;0;0;4.2325054e-23;0.89439583;0;
0;0.92669821;0;0;0;0.92056286;0;0;0;0.092821397;
0;0;0.92566746;0;0;0;0;0.00011931248;0;0;
0;0;0.0013918275;0.90889353;0.78144974;0;0;0;0.88713723;0;
4.1448825e-21;0.93825215;0;0.0056679873;0.0077058799;0;0;9.7270866e-21;0;0;
0;0;0;0;0;0;0.93338662;0.89197588;0.89678806;0;
0;0;5.9254137e-16;0;0;0;7.0502478e-20;0;0.00023246536;0;
0;0.8667407;0;0.72515088;0;0;0.90289956;0;0;0;
0;0;0;0;0.91131401;0;0;0.93142313;0;0.77497786;
0;2.7213012e-21;0.91417795;0;0.93669778;0;0;0;0;0;
2.457499e-20;0.00012135023;0;1.0213692e-05;0;0;0;0;0;0;
0;0;0;0;0;0.00044056057;0.90747309;0;0;0.93185228;
5.7801983e-18;0;0;0;0.87745267;0.9269343;9.4326241e-15;0;0;0;
0;0;0.91474384;0.00013375843;0.93388164;0.00092244643;0;0;0.010862936;0.911641;
3.3432873e-20;0;0;0;0;0;3.5002705e-07;0;0;0;
0;2.4160509e-09;1.1013533e-13;6.2096571e-11;1.9105291e-16;1.6177032e-17;0.90793502;0;2.0016484e-13;1.6302033e-11;
4.9929458e-16;2.7190321e-19;1.3707674e-10;7.6472648e-11;0;0;0.0091403499;0;0.016873976;0;
0;0;4.2323927e-09;0.92556721;1.323827e-11;0.93340832;0.91918516;3.1615146e-14;1.0267178e-17;7.9959523e-09;
0;0;0.0003466327;5.1485542e-16;0.92731696;6.7039025e-07;0;1.6364264e-05;7.0788214e-05;2.929476e-17;
1.9463555e-14;6.9401374e-10;0.89425749;0.85271508;0.92530191;0;4.2049529e-13;5.35566e-05;0;1.6119921e-11;
1.7893889e-11;1.3657654e-14;0;0;0.0054133041;7.1619419e-11;1.8909666e-12;3.0913485e-09;0.89490259;2.1960812e-11;
0;0.92520869;0;4.2648299e-10;0;0.91894561;9.3136462e-12;1.5917469e-11;0;0.21954907;
1.7464781e-13;0;0.92660528;0;5.9284251e-15;0;0;5.9979073e-05;9.4367049e-13;0;
0;1.7564333e-17;0.0032057653;0.90773106;0.7950654;1.0628896e-13;0;0;0.88184941;0;
4.331531e-11;0.93798625;6.5638846e-13;0.0041661551;0.0047012889;8.5194246e-10;4.205165e-11;8.59302e-13;0;1.1261121e-12;
0;0;0;0;0;0;0.8517012;0;3.8658637e-21;0;
0;0;0;0;0;0;0.061341427;0;0.68926036;0;
0;3.4858708e-06;0;0.86623979;0;0.92323244;0.91820168;0;0;0;
0;0;0;0;0.91818088;0;0;0.088990018;2.9822276e-13;7.2738867e-06;
0;0;0.87116838;0.89259952;0.92827582;0;0;1.0321082e-06;0;0;
0;0;0;0;4.6098585e-06;0;0;2.8282165e-21;0.86822432;0;
0;0.91351336;0;0;0;0.87901723;0;0;0;0.78617722;
0;0;0.90238076;0;0;0;0;0;0;0;
0;0;0.76689082;0.59570003;0.86894965;0;0;0;0.82555979;0;
0;0.90758026;0;0.69498593;0.0042195297;0;0;0;0;3.9954821e-06;
0;0;0;0;0;0;0.92960024;0.88320822;0.89003801;1.0343437e-19;
0;0;0;0;0;0;4.4402314e-17;0;0.00046760298;0;
0;0.85970604;0;0.7300238;0;0;0.90396208;0;0;0;
0;0;0;0;0.90768951;0;0;0.9287923;0;0.75870639;
0;0;0.91372889;0;0.93391961;0;0;0;0;0;
0;0.00015438168;0;1.4900019e-05;0;0;0;0;0;0;
0;0;0;0;0;0.0013826059;0.90305728;0;0;0.92894167;
0;0;0;0;0.86636668;0.92045587;0;0;0;0;
0;0;0.90899724;0.00010667988;0.93018645;0.00069563865;0;0;0.018111801;0.9048273;
0;0;0;0;0;0;7.6926557e-07;0;0;0;
0;0;0;5.0626833e-18;0;0;0.85054749;1.8739144e-14;3.2809096e-11;6.1056723e-14;
4.7022483e-16;3.0026003e-15;0;4.2470673e-11;6.2141115e-14;0;0.064548694;0;0.68807852;0;
1.8264561e-14;2.8395245e-06;2.2987062e-10;0.86555135;1.3453367e-09;0.92282814;0.91784638;1.1458683e-13;4.2018593e-19;0;
3.0043725e-13;0;3.3843244e-19;0;0.91744316;6.5178305e-12;0;0.093488663;2.4757245e-12;6.2489935e-06;
4.2453884e-19;0;0.87086982;0.89188385;0.9278183;2.4396858e-17;0;1.1652054e-06;0;4.181542e-15;
0;4.3221914e-15;0;8.9675643e-16;4.035026e-06;0;1.7307038e-14;1.8962365e-18;0.86724752;3.2811387e-13;
0;0.911847;0;1.7487683e-16;0;0.87692565;3.2051002e-14;0;0;0.78935635;
0;0;0.9016577;3.05757e-15;1.0522844e-20;4.5112233e-10;0;7.8953519e-16;1.1499928e-11;0;
3.2808048e-17;0;0.77219272;0.58907008;0.87231708;0;1.1524248e-10;0;0.82032728;0;
0;0.9068734;0;0.69585532;0.0032955445;0;3.1810431e-14;0;0;3.6358354e-06;
0;0;0;0;0;0;0.9158414;0;0;0;
0;0;0;0;0;0;0.00047667627;0;6.3031172e-07;0;
0;0;0;0.92627656;0;0.92609334;0.92718887;0;0;0.0036755363;
0;0;0.48293975;0;0.91682726;0;0;0.00099575985;0.47935453;0;
0;4.0988609e-20;0.91783905;0.81220776;0.92479372;0;0;0;0;0;
0;0;0;0;0.0010449808;0;0;0;0.89255351;0;
0;0.9161489;0;1.1166268e-21;0;0.9127509;0;0;0;0.00010670124;
0;0;0.91484505;0;0;0;0;0.0042950292;0;0;
0;0;5.2022165e-06;0.90501189;0.58598346;0;0;0;0.87716514;0;
5.217674e-20;0.92929178;0;0.021656122;0.4934141;0;0;1.7849418e-18;0;0;
0;0;0;0;0;0;0.93888968;0.88593322;0.86928815;0;
0;0;0.0001403526;0;0;0;0;0;0;0;
0;0.87376511;0;0.82042605;0;0;0.91915804;0;0;0;
0;0;0;0;0.90287811;0;0;0.92537338;5.6345049e-18;0.36723647;
0;0;0.9271059;0;0.94072282;0;0;0;0;0;
0;0;0;0;0;0;0;0;5.5123863e-22;0;
0;0;0;0;0;0.0030050999;0.87339294;0;4.5711053e-17;0.92281175;
4.3226103e-17;0;0;0;0.8963775;0.90819246;4.6511424e-05;0;0;0;
0;0;0.91120005;0.02716649;0.92788672;0.010952916;0;0;0.070610285;0.89558423;
8.8931625e-19;0;0;0;0;0;0.00025177895;8.1861567e-20;0;0;
5.892165e-13;0;4.4442768e-15;0;0;0;0.92217076;1.0623762e-12;0;0;
1.3754449e-12;1.4535478e-13;1.7159952e-13;0;0;0;0.00025564549;0;1.9096538e-05;1.1287324e-13;
4.2146801e-17;0;2.9901896e-15;0.93192697;1.8648833e-17;0.92920536;0.92912126;1.3125451e-18;2.1266177e-15;0.00020896786;
4.2915928e-15;1.1919221e-16;0.063295692;1.0266442e-15;0.92065877;7.8203888e-11;0;9.7694297e-05;0.0092833843;0;
2.3965511e-14;1.9823038e-14;0.91616482;0.82631218;0.92751586;0;0;0;0;2.6724146e-16;
1.5489249e-15;0;0;0;0.0064541451;0;2.3021437e-13;1.6479348e-12;0.88451177;1.4274511e-13;
1.1521034e-17;0.91906643;0;1.2245198e-10;0;0.91734457;5.4566588e-14;0;8.9045503e-13;0.025543407;
9.1627882e-17;0;0.92765838;0;1.9164328e-13;0;2.2922444e-13;0.014518735;6.4719025e-13;0;
0;0;0.002148605;0.9219141;0.72831815;6.920437e-13;4.3525364e-15;0;0.89118242;0;
1.396909e-12;0.93058801;0;0.013142088;0.0061790477;1.3553853e-12;2.2346599e-14;3.0769378e-13;4.9179236e-17;0;
0;0;0;0;0;0;0.87917686;1.0387347e-06;0;0;
0;0;0;0;0;0;0.00044936177;0;0.041144501;0;
0;0.00034622909;0;0.88500834;0;0.9134447;0.92568201;0;3.8257278e-20;0;
0;0;5.0265109e-05;0;0.90801728;0;0;0.052537829;3.8825876e-09;0;
0;0;0.89733714;0.86326122;0.93137044;0;0;0;0;0;
0;0;0;0;1.8484699e-05;0;0;0;0.87081307;0;
0;0.90878838;0;0;0;0.87956232;0;0;0;0.64600992;
0;0;0.91062927;0;0;0;0;3.8327589e-06;0;0;
0;0;0.78067839;0.80991721;0.85960209;0;0;0;0.84764379;0;
0;0.90250218;0;0.6595059;0.0072889822;0;0;0;0;2.5879061e-07;
0;0;0;0;0;0;0.93633109;0.88501877;0.85741186;0;
0;0;2.4424531e-05;0;0;0;0;0;0;0;
0;0.86941737;0;0.82396042;0;0;0.92070919;0;0;0;
0;0;0;0;0.89915055;0;0;0.92475003;0;0.40712482;
0;0;0.92777336;0;0.93971378;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.0463506e-19;0;
0;5.5484464e-21;0;0;0;0.0083114738;0.86886418;0;0;0.92270726;
2.0475659e-19;0;0;0;0.89380038;0.89925528;1.5170986e-05;0;0;0;
0;0;0.91034585;0.036680888;0.92508459;0.0071893591;0;0;0.17114224;0.88516724;
0;0;0;2.1336812e-19;0;0;0.00058035488;0;0;0;
3.4482084e-14;0;0;0;0;0;0.87827104;1.6940642e-06;2.5727082e-13;0;
5.2306508e-16;1.7262947e-12;0;0;1.1838602e-17;1.3424757e-18;0.00040252818;0;0.045468923;1.9402984e-15;
5.2992448e-14;0.00035102776;8.4630029e-12;0.88382614;9.3247441e-12;0.91254127;0.9248814;1.8216883e-14;3.7907174e-14;0;
7.9424401e-12;0;4.1228122e-05;0;0.90674853;0;0;0.051766045;2.7468233e-11;1.4865244e-11;
8.8662671e-17;0;0.89644289;0.86085761;0.9310196;0;0;0;0;4.771854e-18;
0;0;0;0;1.9306353e-05;0;1.3658256e-14;4.4335384e-18;0.86877143;7.1224993e-15;
4.2681973e-15;0.90781343;0;1.4374122e-15;0;0.87813485;4.8091609e-13;3.3641654e-15;6.3306721e-18;0.67307663;
5.5370881e-21;0;0.90980011;2.9886181e-16;4.3277332e-14;2.0445092e-18;0;4.7947597e-06;3.115079e-11;0;
0;0;0.78402156;0.80977827;0.8607536;1.9468233e-21;4.8235743e-13;0;0.84556788;0;
6.3440346e-17;0.90084147;0;0.65983367;0.0052961493;5.3212458e-18;2.89835e-13;0;0;6.7675165e-07;
0;0;0;0;0;0;0.92896122;1.6039236e-05;0;0;
0;0;0;0;0;0;8.9206048e-16;0;1.814356e-15;0;
0;0;0;0.92446363;0;0.92020601;0.92854089;0;0;0.65460801;
0;0;0.81350029;0;0.9247629;4.6478749e-06;0;5.7773545e-06;0.007254899;0;
0;0;0.88959557;0.88127226;0.91488832;0;0;4.8484315e-17;0;0;
0;0;0;0;0.065954946;0;0;0;0.81571257;0;
0;0.93344522;0;0;0;0.91001278;0;0;0;0.0016023004;
0;0;0.93181539;0;0;0;1.0661505e-06;0.047021169;0;0;
0;0;0.0082919076;0.92204702;0.0027282815;0;0;0;0.93431133;0;
0;0.91583645;0;0.0025537314;0.0013735428;0;0;0;0;3.3873996e-06;
0;0;0;0;0;0;0.93246841;0.92402434;0.84073919;0;
0;0;0.00011499118;0;0;0;0;0;0.00016135348;0;
0;0.84354913;0;0.62502754;2.9741557e-20;0;0.90095669;0;0;0;
0;0;0;0;0.91580558;0;0;0.91895992;0;0.6995979;
0;0;0.89454901;0;0.92728311;0;0;0;0;0;
0;6.6475764e-07;0;4.7787184e-06;0;0;0;0;0;0;
0;0;0;0;0;0.00011716639;0.92485124;0;1.3032757e-16;0.93779534;
4.5749492e-20;0;0;0;0.87174904;0.92625856;1.8171743e-14;0;0;0;
0;0;0.9347204;0.0015850095;0.92662442;0.00042927644;0;0;0.57222831;0.91085052;
0;0;1.7993712e-20;0;0;0;0;0;0;0;
0;1.4726098e-08;0;5.9255476e-13;1.2225346e-12;9.4753131e-14;0.93213838;0.92123353;0.81117928;3.3101555e-10;
2.2494806e-10;2.2532425e-09;0.0011601433;4.8381157e-09;1.3196485e-11;0;9.7589499e-08;0;3.1925247e-05;1.1916336e-11;
0;0.7926994;0;0.68473452;1.4226778e-05;4.2576538e-08;0.8900376;3.1911884e-12;0;0;
2.0772145e-12;1.7792319e-06;2.1916303e-10;3.7119877e-12;0.91164523;3.8114933e-15;3.8225522e-18;0.91190296;0;0.68261653;
2.2681779e-07;0;0.88723379;2.2725337e-09;0.92007488;3.8195555e-14;1.9123963e-16;1.8377506e-07;6.2819872e-13;0;
0;5.3793812e-08;3.9730838e-17;3.4174741e-07;0;0;9.7490104e-13;0;1.3263153e-09;3.3943581e-09;
7.1618744e-10;2.6028701e-10;0;0;2.4021219e-17;0.00019530981;0.92061174;1.9836248e-14;7.0836211e-07;0.93355834;
1.1497983e-08;7.0654704e-14;1.6479177e-07;7.2862918e-13;0.8791635;0.92370898;9.4098796e-05;2.1689358e-12;0;1.6219909e-10;
0;1.9840332e-12;0.92885351;0.064893067;0.92055422;0.016728755;4.4603141e-08;1.5276046e-14;0.62928975;0.91034681;
2.1032448e-10;1.2045268e-07;2.7725513e-05;1.2833739e-09;4.9251958e-09;0;5.804373e-09;0;0;5.3730631e-11;
0;0;0;0;0;0;0.80446404;0.00011575356;0;0;
0;0;0;0;0;0;0.034890454;0;0.62188345;0;
0;0.00072420051;0;0.79142642;0;0.91284943;0.91264641;0;0;0;
0;0;0;0;0.91525441;0;0;0.053162314;0;7.4072906e-20;
0;0;0.83856857;0.90758812;0.91926891;0;0;3.7067282e-05;0;0;
0;0;0;0;2.044834e-05;0;0;0;0.8141948;0;
0;0.91988468;0;0;0;0.85610235;3.4860636e-06;0;0;0.77344847;
0;0;0.89781821;0;0;0;0;0;0;0;
0;0;0.82964683;0.056624833;0.77996463;0;0;0;0.8765288;0;
0;0.89083427;0;0.80285573;0.00037274414;0;0;0;0;0.070299432;
0;0;0;0;0;0;0.92856663;0.92110389;0.81823599;0;
0;0;2.0739519e-05;0;0;0;3.7947945e-19;0;0.00034007686;0;
0;0.8316732;0;0.6559388;0;0;0.903804;0;0;0;
0;0;0;0;0.91212809;0;0;0.91624337;0;0.68397474;
0;0;0.89624006;7.1236898e-19;0.92454106;0;0;0;0;0;
0;0;0;5.9349136e-06;0;0;0;0;0;0;
0;8.1140757e-20;0;0;0;0.00068610517;0.92172348;0;0;0.9364534;
0;0;0;0;0.86417967;0.91834807;0;0;0;0;
0;0;0.93249065;0.002443237;0.9219135;0.0002383393;0;0;0.67428547;0.90159363;
0;0;0;2.6398161e-19;0;0;0;0;0;0;
1.264662e-15;0;0;8.112672e-12;0;0;0.9301433;0.92287129;0.83702886;0;
0;3.523427e-11;1.9722705e-05;6.9419639e-12;2.7131283e-12;0;1.4607966e-09;0;0.00081494451;8.6473234e-14;
0;0.84463012;0;0.59590411;3.4473663e-10;8.622713e-11;0.90786952;1.0199385e-12;6.214958e-13;0;
0;3.2965741e-11;0;0;0.91577899;0;0;0.9182266;0;0.65874898;
1.2335809e-12;0;0.89619571;5.2317657e-09;0.92780685;1.6381927e-11;0;5.7226752e-22;0;0;
0;1.9207314e-09;0;9.995174e-06;0;0;0;0;0;0;
1.4673309e-13;1.2441307e-08;0;0;0;0.00021355276;0.92352736;5.4975955e-20;0;0.93895155;
5.3960994e-12;0;8.3755279e-13;1.2608591e-10;0.86484247;0.9220686;0;3.8573093e-17;0;4.1547628e-17;
0;0;0.93543118;0.00098754105;0.92445433;6.1104554e-05;1.0218984e-11;0;0.6543178;0.90576327;
0;0;0;3.8804315e-09;0;0;1.26935e-10;0;0;2.3317335e-14;
0;0;0;0;0;0;0.9260726;6.9551555e-05;0;0;
0;0;2.1465991e-20;0;0;0;0;0;0;6.2067457e-21;
0;0;0;0.92225689;0;0.91431332;0.92589575;6.3452133e-20;0;0.66875333;
0;0;0.80350071;0;0.91864401;2.63072e-06;0;1.8186271e-05;0.0046787043;0;
0;0;0.89089465;0.8772071;0.91154337;0;0;0;0;0;
0;0;0;0;0.074359074;0;0;0;0.79789597;0;
0;0.92873132;0;0;0;0.90665478;0;0;6.0789406e-21;0.0022171035;
0;0;0.92978281;0;0;0;4.6059799e-06;0.084423892;0;0;
0;0;0.019344028;0.9203307;0.00227633;0;0;0;0.93154699;0;
0;0.90834147;0;0.0043002306;0.00085064815;0;0;0;0;5.5646947e-06;
0;0;0;0;0;0;0.9378618;0.92034745;0.76417428;0;
0;0;0.0051529729;0;0;0;0;0;0;0;
0;0.85270965;0;0.7797119;2.2647028e-21;0;0.9178732;0;0;0;
0;0;0;0;0.9077751;0;0;0.9101705;0;0.064718381;
0;0;0.91330636;0;0.93246633;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.00095935259;0.90298855;0;0.00018269998;0.93005586;
3.1000331e-18;0;0;0;0.89136207;0.90643716;2.1533649e-05;1.9732446e-21;0;0;
0;0;0.93217784;0.077665463;0.91882515;0.0058350521;0;0;0.74373639;0.89376837;
0;0;0;0;0;0;1.154426e-16;0;0;0;
8.4445282e-14;0;0;0;0;0;0.9256472;0.00010178948;0;0;
0;4.3033941e-13;1.255536e-10;2.4138083e-12;4.2576823e-14;0;2.7118397e-15;0;4.76162e-07;2.0127075e-08;
4.9128573e-19;4.6173051e-10;0;0.92165905;4.8883521e-07;0.91326123;0.92534471;1.2335765e-06;3.8663551e-14;0.66113615;
3.9310525e-12;2.6747344e-09;0.80182165;1.407078e-15;0.91764706;1.7819566e-06;1.3014676e-13;1.7555032e-05;0.0042788326;2.781497e-08;
1.660965e-14;0;0.8898598;0.87527037;0.91090387;0;0;3.4387495e-14;0;1.2255972e-12;
1.896812e-19;0;8.3849004e-12;0;0.076024048;0;1.7495525e-08;0;0.79355675;1.1163387e-10;
5.1715559e-12;0.92790842;1.5083512e-18;1.1623467e-19;2.3058912e-12;0.90573281;1.8252181e-09;2.2457623e-16;7.9049336e-08;0.002958524;
2.4328633e-11;0;0.92935896;0;1.5465243e-08;1.185178e-09;5.6620879e-06;0.090105303;2.2621091e-07;1.150374e-13;
0;7.9307325e-12;0.022089353;0.92029971;0.002396439;2.3105171e-09;2.9773659e-10;0;0.93089813;5.509037e-11;
7.1034704e-13;0.90714353;2.8399632e-13;0.0042421483;0.00057616166;2.3349234e-10;2.2590127e-08;0;0;6.1435508e-06;
0;0;0;0;0;0;0.84412479;0.0023985985;0;0;
0;2.4219472e-20;0;0;0;0;4.1036492e-05;0;0.01615281;5.8654272e-20;
0;0.0036534301;0;0.83342898;0;0.8983379;0.91932249;1.7835792e-22;1.3374482e-19;5.9488457e-07;
0;0;0.0060708043;0;0.90143794;0;0;0.012188251;0;0;
0;0;0.87936211;0.88041931;0.91958678;0;0;8.9587601e-08;0;0;
0;0;0;0;0.0004378297;0;0;0;0.82636738;0;
0;0.91701055;0;0;0;0.8603949;0;0;0;0.56880623;
0;0;0.90603012;0;0;0;0;3.2429007e-08;0;0;
0;0;0.84243762;0.74636859;0.77614784;0;0;0;0.89301682;0;
0;0.89082378;0;0.77480382;0.00072876591;0;0;0;0;0.031927247;
0;0;0;0;0;0;0.93549794;0.92072475;0.71009606;0;
0;4.5587584e-20;0.0014673512;0;0;0;0;0;0;0;
0;0.84347671;0;0.79489601;0;0;0.92014658;0;0;0;
0;0;0;0;0.90444857;0;0;0.90965211;0;0.080316558;
0;0;0.91544467;3.5899755e-20;0.93178624;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.8539601e-18;0;0;0;0.0043558399;0.9002679;0;6.9597867e-05;0.9310804;
0;0;0;0;0.89124113;0.89550847;4.7925314e-06;0;0;0;
0;0;0.93248647;0.18253258;0.91568178;0.0036754147;0;0;0.78595859;0.88016105;
0;0;0;6.3246122e-18;0;0;3.4814062e-07;0;0;0;
4.3346903e-15;0;0;0;0;0;0.84220314;0.0028682561;0;0;
0;1.7792952e-14;5.9474651e-16;2.9696446e-15;0;0;4.1711086e-05;0;0.017972797;1.6835642e-11;
9.3345038e-20;0.0042516151;0;0.83008367;9.4097852e-13;0.89727926;0.9188906;6.625739e-12;6.6411319e-13;1.9932335e-07;
8.5020535e-18;3.9452897e-14;0.0052796914;0;0.90026987;8.6598903e-13;0;0.013178673;0;8.1148421e-11;
0;0;0.8790161;0.87922537;0.91931677;0;0;2.4102313e-12;0;0;
0;0;0;0;0.00040411355;0;1.7339785e-13;0;0.82393664;3.0023565e-18;
1.0056615e-13;0.91612118;0;0;0;0.85746336;4.6375013e-13;0;3.1231261e-16;0.59893185;
7.1829287e-21;0;0.90492266;0;1.1905109e-14;1.22959e-12;8.2286587e-18;5.772662e-08;1.286789e-12;0;
0;0;0.84514892;0.73812205;0.78177547;0;1.3542159e-12;4.1463249e-20;0.89158154;0;
0;0.88883692;0;0.77704948;0.00046986932;0;5.6244483e-17;0;0;0.035512641;
0;0;0;0;0;0;0.91116458;0;0;0;
0;0;0;0;0;0;0.026625665;0;0.014487169;0;
0;0;0;0.92617714;0;0.93467999;0.9189378;0;0;3.0467797e-06;
0;2.9664767e-23;0.00016635522;0;0.92691487;5.225914e-17;0;5.9549038e-05;1.2956086e-05;2.9481968e-19;
0;0;0.89746004;0.86368877;0.91869843;0;0;1.9794263e-05;0;0;
0;0;0;0;0.010913507;0;0;0;0.88465476;0;
0;0.9223696;0;0;0;0.91930634;0;0;0;0.25234321;
0;0;0.92182958;0;0;0;0;0.00061269564;0;0;
0;0;0.0026508735;0.90886003;0.77827686;0;0;0;0.88513279;0;
0;0.93371224;0;0.0097904718;0.0032917846;0;0;0;0;0;
0;0;0;0;0;0;0.93756944;0.90164;0.85213745;0;
0;0;2.571685e-05;0;0;0;9.0597255e-21;0;0.0022570614;0;
0;0.76257473;0;0.81617188;1.7724849e-17;0;0.90832525;0;0;0;
0;2.8435396e-18;0;0;0.91713768;0;0;0.91696054;0;0.78193086;
1.0339422e-19;0;0.91054672;0;0.93486828;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.0091276839;0.91232133;0;0;0.94086158;
3.2523358e-18;0;0;0;0.88695019;0.91229802;6.3400266e-06;0;0;0;
0;0;0.92241728;0.035664;0.93534231;0.011482758;0;0;0.10754371;0.88942194;
0;1.4441192e-19;0;0;0;0;5.4384344e-07;0;0;0;
5.7185545e-16;3.9781466e-15;0;0;0;0;0.91008389;1.8465654e-12;1.0537209e-17;0;
0;2.3879884e-17;6.8393513e-14;1.8693506e-12;1.0563057e-11;0;0.025761459;0;0.015685571;0;
0;0;6.824748e-13;0.92547119;1.5083911e-10;0.93395823;0.9179368;0;3.5819673e-16;1.2094441e-06;
8.7990479e-19;9.9894433e-12;0.00013877446;3.2376111e-16;0.92596924;1.0847387e-14;0;5.4332249e-05;9.8811588e-06;1.1855705e-10;
3.2665711e-15;5.9931996e-13;0.89627486;0.86061513;0.91824841;0;6.9394614e-15;2.2167951e-05;0;1.3639338e-13;
0;0;6.7358813e-15;0;0.010454521;0;0;0;0.88357276;3.7152646e-12;
1.8201588e-15;0.92132562;0;0;3.8682474e-13;0.91842276;7.5844617e-12;2.647926e-14;1.0173822e-14;0.32383367;
2.7352164e-14;0;0.92139482;0;2.4677167e-14;0;3.5332645e-15;0.00061486382;0;0;
0;5.6450213e-14;0.0031800908;0.9084869;0.78192431;7.739546e-14;8.8661252e-11;0;0.8826775;0;
0;0.93317556;3.685622e-17;0.0093450546;0.0023689941;0;4.274478e-11;0;0;0;
0;0;0;0;0;0;0.85197216;2.5148604e-19;0;0;
0;1.0290196e-20;0;0;0;0;0.092162609;0;0.71156836;0;
0;5.4825746e-06;0;0.86021543;0;0.92203033;0.91687542;0;0;0;
0;0;0;0;0.91733354;0;0;0.091696329;0;1.6236079e-05;
0;0;0.86944908;0.89321131;0.92699301;0;0;5.043144e-18;0;0;
0;0;0;0;5.6049189e-06;0;0;0;0.86047077;0;
0;0.91043854;0;0;0;0.87526679;7.7072903e-20;0;0;0.8136512;
0;0;0.89966643;0;0;0;0;0;0;0;
0;0;0.7887302;0.54054981;0.86724597;0;0;0;0.82260418;0;
0;0.89858854;0;0.70997614;0.00087679335;0;0;0;0;1.5052588e-05;
0;0;0;0;0;0;0.93492687;0.9029457;0.82862198;0;
0;2.3419435e-20;1.5891275e-06;0;0;0;8.8312127e-18;0;0.0033818905;0;
0;0.73875362;0;0.82508701;1.3519023e-18;0;0.91191566;0;0;0;
0;0;0;0;0.91395736;0;0;0.91633481;0;0.78780258;
0;0;0.91288179;2.4615647e-21;0.93414575;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.069603e-18;0;0;0;0.027585713;0.90952289;0;0;0.94155657;
0;0;0;0;0.8868283;0.90150791;5.8350622e-07;0;0;0;
0;0;0.92315948;0.062759049;0.93270391;0.0064492659;0;0;0.46963626;0.87316835;
0;4.7305464e-20;0;0;0;0;5.8289015e-06;0;0;0;
0;0;0;3.4357302e-18;0;0;0.85108322;1.6034955e-14;3.6393048e-14;7.9470798e-19;
0;4.7192027e-14;3.7063827e-21;1.4908928e-12;2.3834426e-14;0;0.089904636;0;0.71783644;0;
2.5083506e-18;6.7006445e-06;6.2756018e-13;0.85855651;1.6019075e-10;0.92126334;0.91623992;1.0854199e-14;0;0;
6.8579342e-19;6.8568524e-16;0;0;0.91646278;1.4024122e-14;0;0.092313007;0;2.1141483e-05;
7.0000748e-17;0;0.86822116;0.89165872;0.92658991;0;0;2.1228991e-10;0;0;
0;0;0;0;4.8038655e-06;0;3.1979543e-18;0;0.85867858;1.4454892e-14;
1.5860442e-17;0.90954357;0;0;0;0.87344301;2.1682989e-13;0;0;0.8181271;
0;0;0.89857483;0;1.824957e-15;4.8077823e-13;0;3.202849e-15;1.2962125e-13;0;
0;4.4388239e-17;0.79110235;0.53221196;0.86785889;1.7497321e-22;1.9723194e-12;0;0.81912869;0;
0;0.89688283;0;0.70713878;0.00060635235;0;1.6388707e-14;0;0;1.7441014e-05;
0;0;0;0;0;0;0.92364407;3.4915922e-07;0;0;
0;3.3498614e-22;4.3696836e-22;0;0;0;0.00040396009;0;2.8257118e-05;0;
0;0;0;0.93260825;0;0.93000072;0.92851579;0;0;0.00017420696;
0;4.4398701e-21;0.041285489;0;0.92121637;0;0;6.5399698e-05;0.0020237623;0;
0;0;0.91538;0.83470684;0.92554986;0;0;0;0;0;
0;0;0;0;0.0087686107;0;0;0;0.87833571;0;
0;0.91723013;0;0;0;0.91755867;0;0;0;0.049747717;
0;0;0.92788863;0;1.1358616e-22;0;7.9492768e-20;0.024795357;0;0;
0;0;0.0062042088;0.92383885;0.74381;0;0;0;0.89295733;0;
0;0.92788863;0;0.014784443;0.001897598;0;0;0;0;0;
0;0;0;0;0;0;0.94378787;0.89005411;0.52489734;0;
0;1.1425929e-21;0.017977122;0;0;0;0;0;0;0;
0;0.094423361;0;0.89072698;4.4105279e-18;0;0.90378535;0;0;0;
0;3.4954866e-18;0;0;0.8971203;0;0;0.88468748;0;0.25388819;
0;0;0.91583556;0;0.92520785;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.04767799;0.85568738;0;6.0997587e-07;0.92335558;
1.0784438e-17;0;0;0;0.92110252;0.87410319;0.023952309;5.693572e-19;0;0;
0;0;0.8961767;0.85546935;0.91251493;0.71257973;0;0;0.75985181;0.87026322;
0;2.1085785e-18;0;0;0;0;0.0021225798;0;0;0;
0;0;0;0;0;0;0.9233737;5.1547181e-07;0;0;
0;8.649025e-13;1.0203858e-12;0;0;0;0.00038769512;0;3.2350632e-05;1.9263372e-15;
0;0;2.5819221e-16;0.93228465;1.0096864e-13;0.92948067;0.92803997;0;0;0.00014651925;
0;1.8412823e-13;0.039830521;9.6515542e-15;0.92043102;4.9661135e-12;0;6.3850268e-05;0.0018983138;1.2630146e-15;
1.8567799e-17;0;0.91487795;0.83131188;0.92517883;0;0;0;0;0;
0;0;0;0;0.0087077245;0;1.3712423e-14;4.9408222e-19;0.87701809;1.7917413e-15;
6.0603106e-16;0.9162721;0;1.8415929e-14;0;0.91689503;4.120705e-13;0;1.9501706e-17;0.057939146;
3.8679892e-18;0;0.92751193;0;3.1424988e-12;0;5.8683397e-13;0.026692476;3.1574112e-14;0;
0;0;0.0067586303;0.92386866;0.74813956;8.8615888e-13;3.8420998e-12;0;0.89148295;0;
2.9150766e-16;0.92721987;0;0.014333858;0.0014165521;0;3.1646306e-13;8.7173052e-16;0;0;
      };
     };
     float_Data @["CA3_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_138";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="CA3_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;8;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=90;
      ar {
       name="ar";
      [10 8 42] 0;0;0;0;0;0;0;0;0;0;
0.97252923;0;0;0;0.00039476299;0;0;0;0;0;
6.9048297e-06;0;0;0;0;0;0;0;0.0003814779;0;
0;0;0;0;0;0;0;0;0;0.0040367241;
0;0.00034878479;0;0;0;0;0;0;0.5407964;0;
0;0;0;0;0.055838194;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.91067946;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86655641;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85862648;0;0;0;0;0;0;0;
0;0;0;0;0;0.85920948;0;0;0.91125733;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85518968;
0;0;0;0;0;0;0;0;0;0;
0.9724952;0;0;0;1.7022288e-05;0;0;0;0;0;
0.0001215365;0;0;0;0;0;0;0;0.0017689299;0;
0;0;0;0;0;0;1.6655472e-06;8.8726802e-07;0;0.008170058;
0;0.00097099389;0;0;9.8267071e-07;0;0;0;0.57100195;0;
0;0;0;0;0.011931802;0;0;0;1.6098614e-21;0;
8.8201148e-07;0;1.1515633e-06;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86036664;0;0;
0.8433702;0;0;0;0.89805931;0;0;0;0;0;
0;0.76486516;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.9079659;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90781504;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86069429;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86444902;0;0;0;0;0;0;0;
0;0;0;0;0;0.8519873;0;0;0.90842927;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84765506;
0;0;0;0;0;0;0;0.8608849;0;3.2439318e-06;
0.84386516;3.0552626e-06;0;0;0.89720297;0;0;2.4015064e-06;0;0;
0;0.76584423;2.0055909e-06;0;0;0;6.1245173e-09;2.3813632e-06;0;0;
0;0;0;0;0;5.8632559e-06;0;2.1495075e-06;0;0;
0;2.1226557e-11;0;1.7368548e-07;0;5.443912e-09;0;0;0;0;
0;0;0;0;0.90694809;0;0;0;2.1667049e-06;0;
0;0;7.0418369e-09;0;0;0;3.4452355e-06;0;0;0;
0;0;0;7.5637914e-09;0;4.6899449e-09;0;0;3.6340284e-06;0;
0;0;0;0;0;0;0;0;0;0;
0.97142535;0;0;0;0.00013600988;0;0;0;0;0;
7.2461716e-21;0;0;0;0;0;0;0;2.5117859e-07;0;
0;0;0;0;0;0;0;0.014511543;0;0.00016665806;
0;0.34066743;0;0;0;0;0;0;0.40776813;0;
0;0;0;0;0.01887602;0;0;0;0;0;
0;0;9.2038223e-17;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.9076004;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86039698;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86434072;0;0;0;0;0;0;0;
0;0;0;0;0;0.85185987;0;0;0.90835106;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84755981;
0;0;0;0;0;0;0;0;7.3139494e-11;1.949152e-11;
0.97140551;0;0;0;0;0;0;0;0;0;
1.9850515e-07;0;0;0;0;5.24662e-12;2.0789521e-11;0;7.3826609e-06;0;
0;0;0;0;0;3.8932826e-11;1.0876342e-07;0.034772351;0;0.00018295737;
0;0.34016305;0;0;7.7473054e-08;8.5731356e-15;0;0;0.41003823;0;
0;0;0;0;0.00072696677;0;6.0318625e-11;0;4.4005355e-12;0;
6.5729658e-08;0;1.8724101e-06;0;0;0;6.7760998e-11;1.0691599e-11;0;3.3750253e-11;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86123365;0;0;
0.72169435;0;0;0;0.85580605;0;0;0;0;0;
0;0.2086807;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87690473;0;0;0;0;0;
0;0;0;0;0.87200433;0;0;0;0;0;
0;0;0;0;0;0;0;0.91648573;0;0;
0;0;0.90944517;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86410719;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85583174;0;0;0;0;0;0;0;
0;0;0;0;0;0.85593987;0;0;0.9099049;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85244018;
0;0;0;0;1.021218e-07;0;0;0.86059129;0;0;
0.7201708;0;0;0;0.85332692;0;0;0;0;0;
0;0.20542991;1.0832406e-10;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.0317261e-07;9.2492125e-11;6.3185411e-08;0;0;
0;1.4610362e-10;1.1837304e-07;0;0.87449294;0;0;0;0;0;
0;1.051329e-07;8.1312933e-08;0;0.87204742;0;0;0;0;0;
0;0;0;5.5638417e-08;0;0;0;0.91556764;0;0;
0;0;0;0;0;0;0;2.6298974e-06;0;0;
0.97154576;0;0;0;8.8909678e-07;0;0;0;0;0;
0.03559421;0;0;0;0;0;0;0;2.4176641e-06;0;
0;0;0;0;0;0;0;0;0;3.820199e-05;
0;4.3345284e-07;0;0;0;0;0;0;0.3753593;0;
0;0;0;0;0.0070564756;0;0;0;0;0;
0;0;0;0;0.00013285334;0;0;0;0;0;
0;0;0;0;0;0;0;0.34684014;0;0;
0;0;0.90880018;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.8635354;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85539216;0;0;0;0;0;0;0;
0;0;0;0;0;0.85484606;0;0;0.90943336;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85131884;
0;0;0;0;0;0;0;0;0;0;
0.97122341;0;0;0;0;5.8642006e-12;0;0;0;0;
0.058520462;6.0044005e-13;2.1315019e-11;0;0;0;0;0;7.5478642e-06;0;
0;0;1.2139702e-11;0;0;0;3.2050303e-07;1.2050559e-07;0;4.985842e-05;
0;1.524549e-06;0;0;1.4239102e-07;0;2.1194949e-11;0;0.39456335;0;
0;2.2857849e-11;0;0;0.00021379994;0;0;0;0;0;
1.0759366e-07;0;5.0737941e-07;0;0.00081658544;0;0;0;0;0;
0;0;0;0;0;0;0;0.39562955;0;0;
0;0;0;0;0;0;0;0.86157721;0;0;
0.71666479;0;0;0;0.8572647;0;0;0;0;0;
0;0.19323519;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87578857;0;0;0;0;0;
0;0;0;0;0.86945826;0;0;0;0;0;
0;0;0;0;0;0;0;0.91531712;0;0;
0;0;0.90629482;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85773069;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.8617081;0;0;0;0;0;0;0;
0;0;0;0;0;0.84820682;0;0;0.90692276;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84444678;
0;0;0;0;5.6879766e-16;0;0;0.85871398;0;0;
0.70810145;0;0;0;0.85219347;0;0;0;0;0;
9.4224483e-18;0.16828007;0;0;0;0;0;0;0;4.3781888e-12;
0;0;0;0;0;8.9236743e-12;1.261976e-12;2.6505349e-09;0;0;
0;2.9396863e-09;0;0;0;1.1058454e-11;0;0;0;0;
0;1.6926497e-12;0;0;0.87131369;0;0;0;0;0;
0;0;2.1040475e-11;0;0.86706913;0;0;0;0;0;
0;0;0;5.5284679e-09;0;7.054804e-10;0;0.913185;0;0;
0;0;0;0;0;0;0;0.0001216561;0;0;
0.97022229;0;0;0;0.00010742392;0;0;0;0;0;
0.00028606856;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;4.3176067e-05;0;2.5363991e-06;
0;0.13458803;0;0;0;0;0;0;0.26122546;0;
0;0;0;0;0.029932551;0;0;0;0;0;
0;0;1.2529377e-05;0;6.2947831e-05;0;0;0;0;0;
0;0;0;0;0;0;0;0.32371977;0;0;
0;0;0.90609348;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85761052;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86132574;0;0;0;0;0;0;0;
0;0;0;0;0;0.84773481;0;0;0.90664977;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84387267;
0;0;0;0;0;0;0;0;0;0;
0.970339;0;0;0;0;0;0;0;0;0;
0.0053513166;0;9.027553e-12;0;0;0;0;0;3.0046202e-11;0;
0;0;1.2728932e-12;0;0;0;4.7182241e-10;0.00081901916;0;3.8045428e-06;
0;0.14474182;0;0;1.1243442e-12;0;1.1300779e-11;0;0.26572013;0;
0;1.0603764e-11;0;0;0.00081442267;0;0;0;0;0;
1.5698705e-14;0;0.00053659437;0;8.4213258e-05;0;0;0;0;0;
0;0;0;1.2261928e-11;0;5.6546217e-12;0;0.31190902;0;0;
0;0;0;0;0;0;0;0.85764474;0;0;
0.84010613;0;0;0;0.89658338;0;0;0;0;0;
0;0.75828058;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.906941;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90905327;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86311829;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85576969;0;0;0;0;0;0;0;
0;0;0;0;0;0.86018342;0;0;0.90967637;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85093504;
0;1.7741035e-09;0.90825355;4.5351455e-11;0;3.3691591e-05;3.0213804e-11;0;0;0;
0;0;0;0;0;0;0;6.9349948e-10;0;0;
0;0.8638103;0;4.4277546e-12;0;0;0;0;0;0;
0;8.6540323e-15;0;0;1.8250443e-08;0;0;0;0;0;
3.2209804e-11;0;0.85708493;0;0;0;0;0;0;0;
0;0;0;0;0;0.86096591;0;8.6065931e-08;0.90877056;3.0819065e-05;
1.2710162e-09;2.3793587e-05;0;0;0;0;0;0;0;0;
0;0;1.2977624e-05;0;0;0;1.8066527e-13;2.8580147e-05;0;0.85172498;
0;0;0;0;0;0;0;0;0;0;
0.97236419;0;0;0;0.00031677008;0;0;0;0;0;
8.2500264e-06;0;0;0;0;0;0;0;0.00037492535;0;
0;0;0;0;0;0;0;0;0;0.0042000287;
0;0.00036465455;0;0;0;0;0;0;0.54710978;0;
0;0;0;0;0.050275389;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90884107;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86277092;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85567796;0;0;0;0;0;0;0;
0;0;0;0;0;0.85992002;0;0;0.90955752;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85066479;
0;0;0.90804815;0;0;0;0;0;0;3.607316e-15;
0;0;0;0;0;2.8367983e-12;0;0;7.36433e-09;1.7937475e-07;
0;0.86359769;0;1.6641603e-10;0;0;0;0;8.7112817e-08;0;
0;0;0;3.0681389e-07;1.7119811e-15;1.3061396e-07;0;1.085463e-07;0;0;
0;1.3325075e-07;0.85695583;0;0;0;4.1117084e-07;0;1.879823e-11;0;
0;0;0;1.7171203e-07;0;0.86043298;4.8920434e-08;7.4548412e-10;0.90811777;0;
8.8114533e-08;1.733256e-10;0;0;0;0;0;0;0;0;
4.5088708e-13;0;0;0;0;0;5.3528399e-09;0;0;0.85129005;
0;0;0;0;0;0;0;0.85683948;0;0;
0.83904654;0;0;0;0.89610177;0;0;0;0;0;
0;0.75584918;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.9064396;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90641862;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85744518;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86250871;0;0;0;0;0;0;0;
0;0;0;0;0;0.85384399;0;0;0.90694231;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84391391;
0;0;0;0;0;0;0;0.85679591;0;0;
0.8389349;3.4871075e-10;9.4054667e-06;1.4530439e-10;0.8949337;0;0;0;5.2954495e-11;0;
0;0.75655019;0;0;0;0;0;2.1088903e-10;0;0;
0;0;1.452992e-10;0;0;0;0;1.691077e-05;0;1.1345071e-05;
0;0;0;0;0;2.1419364e-10;0;0;0;0;
0;0;0;0;0.90509117;0;0;8.9324021e-06;0;5.5272585e-07;
0;0;0;1.7635117e-05;0;0;0;0;0;0;
0;6.9016796e-06;1.3203336e-10;0;0;1.4399378e-13;0;8.7855057e-08;1.4464517e-10;0;
0;0;0;0;0;0;0;0;0;0;
0.97126895;0;0;0;0.00013500881;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.0089189829;0;0.0001874666;
0;0.33167511;0;0;0;0;0;0;0.41226381;0;
0;0;0;0;0.019345438;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.90612781;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85731733;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86210263;0;0;0;0;0;0;0;
0;0;0;0;0;0.85366637;0;0;0.90687597;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84366781;
0;0;0;0;0;0;0;0;3.3082882e-19;0;
0.97139901;6.1865872e-15;0;1.3787293e-14;0;0;0;0;0;0;
5.3621951e-09;0;0;0;0;0;0;2.0614466e-13;6.0064181e-06;0;
0;0;3.1301983e-17;0;0;0;2.7117915e-09;0.027844321;0;0.00024555507;
0;0.34340161;0;0;1.86159e-09;3.0823822e-13;0;0;0.42311105;0;
0;0;0;0;0.00044357352;0;0;3.0165764e-12;0;4.619456e-15;
1.4792669e-09;0;9.7865473e-07;0;0;0;0;0;0;0;
0;2.2103669e-12;9.589653e-14;0;0;0;0;0;5.1339633e-15;0;
0;0;0;0;0;0;0;0.86038202;0;0;
0.72127664;0;0;0;0.85601753;0;0;0;0;0;
0;0.20785449;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87707311;0;0;0;0;0;
0;0;0;0;0.87052613;0;0;0;0;0;
0;0;0;0;0;0;0;0.91592002;0;0;
0;0;0.90771222;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.86034441;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85293639;0;0;0;0;0;0;0;
0;0;0;0;0;0.85695928;0;0;0.90835416;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84817684;
0;2.195108e-12;0;0;0;0;0;0.85917723;0;0;
0.71737736;0;0;7.6399852e-11;0.85269368;0;0;2.2341903e-11;0;5.1222514e-13;
0;0.19653898;0;0;0;3.4823075e-11;0;0;0;0;
5.5738161e-11;0;0;0;0;1.7103847e-12;0;0;7.859732e-12;0;
0;0;0;1.793413e-11;0;0;0;0;0;0;
0;0;0;0;0.87412274;0;0;0;0;3.5415545e-11;
0;0;0;0;0.87264657;0;0;0;0;0;
0;0;1.4284945e-11;0;0;0;0;0.91588193;0;0;
0;0;0;0;0;0;0;6.4836909e-06;0;0;
0.97141659;0;0;0;7.1493146e-06;0;0;0;0;0;
0.026792152;0;0;0;0;0;0;0;8.7871575e-07;0;
0;0;0;0;0;0;0;0;0;6.6104731e-05;
0;1.1374572e-06;0;0;0;0;0;0;0.3924832;0;
0;0;0;0;0.01335024;0;0;0;0;0;
0;0;0;0;4.5197635e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0.24487835;0;0;
0;0;0.90726805;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85992676;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85247874;0;0;0;0;0;0;0;
0;0;0;0;0;0.85593152;0;0;0.90778667;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84694082;
0;0;0;0;0;0;0;0;0;0;
0.97143543;0;0;0;0;2.8179819e-13;0;0;0;0;
0.060936451;3.7185322e-14;1.4330013e-12;0;0;0;0;0;7.98573e-06;0;
0;0;9.893489e-13;0;0;0;8.2257872e-09;2.745483e-09;0;6.0568185e-05;
0;1.1366903e-06;0;0;3.1121066e-09;0;1.6083835e-12;0;0.38364238;0;
0;2.2100542e-12;0;0;0.00039920962;0;0;0;0;0;
2.5105646e-09;0;1.2439513e-08;0;8.295825e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0.23800528;0;0;
0;0;0;0;0;0;0;0.85893071;0;0;
0.71271002;0;0;0;0.85586244;0;0;0;0;0;
0;0.18192478;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87482953;0;0;0;0;0;
0;0;0;0;0.86378092;0;0;0;0;0;
0;0;0;0;0;0;0;0.91286957;0;0;
0;0;0.90579522;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85689265;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86173576;0;0;0;0;0;0;0;
0;0;0;0;0;0.85270864;0;0;0.90636462;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.84276175;
0;0;0;0;0;0;0;0.85881805;0;0;
0.71148676;0;0;0;0.8535046;0;0;0;0;0;
0;0.18039434;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.0772319e-15;1.7554176e-13;2.2241556e-10;0;0;
0;2.3371066e-10;0;0;0;0;0;0;0;0;
0;1.7722956e-15;0;0;0.87237406;0;0;0;0;0;
0;0;0;0;0.86458188;0;0;0;0;0;
0;0;0;3.2445352e-10;0;7.8205442e-11;0;0.91218543;0;0;
      };
     };
     float_Data @["DG_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_139";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1433120965957642;
	val_type_fixed=0;
       };
      };
      name="DG_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 20;20;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=90;
      ar {
       name="ar";
      [20 20 42] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.87175369;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.8587324;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89165419;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.86454505;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95782393;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.95269561;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.0632522e-13;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85407722;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;5.4786112e-16;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.870323;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;3.4185355e-13;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.9349462e-15;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89822859;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;8.5885626e-15;
0;7.5441416e-14;0;0;0;0;0;0;0;0;
1.0977154e-16;0;0;0;0;0;0;0;0;0;
0;0;0;0;2.5596719e-16;0;0;0;0;0;
0;2.5659042e-15;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.8692928e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.0354699e-16;0;0;0;0;0.84514278;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.95257306;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95161116;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95301956;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.00013817234;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94656134;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.6718098e-09;0;0;
0;0;0;0;0;1.5858532e-09;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
6.5457334e-11;0;0;0;0;0;0;1.3025154e-13;0;0;
0;0;0.95001948;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;7.9057588e-10;
0;0;0;0;0;0;0;0;3.568673e-07;0;
0;0;0;0;0;0;0;7.8872949e-07;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;9.3024362e-13;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.735265e-10;0;0;0;0;0;0;0;0;
0;0;1.3840751e-09;0;0;0;0;5.5197635e-10;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.223408e-09;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.6645951e-07;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.009907e-10;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.2329144e-09;0;0;0;0;
1.6455477e-09;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.5153744e-09;0;0;0;0;0;0;0;
0;4.1605765e-13;0;0;0;0;0;0;0;0;
1.2763612e-06;0;0;0;0;0;0;1.5116087e-11;0;0;
1.4987268e-06;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;7.9706952e-10;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.1832209e-09;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;7.6427938e-07;3.9846144e-14;0;0;
0;0;0;0;0;0;0;0;0;0.94896716;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86910284;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.83383274;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.87747085;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.86145759;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95292395;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.2944404e-05;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94644845;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.84897506;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.2675515e-11;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.85193557;0;0;0;0;0;
4.1967561e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;2.1282902e-14;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88717747;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;3.3528302e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.9565569e-16;0;0;0;0;0;0;
3.0703582e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2.80558e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.9523655e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.83930618;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.91954988;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.91790128;0;
0;0;0;0;0;0;0;0;0;0.91672862;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95105177;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94400394;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.00010625593;0;0;0;0;0;
0;1.013415e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.3423167e-14;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;4.1970623e-08;3.8293485e-14;
0;0;0;0;0;0;0;0;0;0;
4.5744966e-12;0;0.91359586;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
6.0569112e-13;0;0;7.8986492e-13;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.7828104e-14;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;8.1985339e-12;0;0;0;0;
0;0;0;0;0;0;1.1088284e-10;0;0;0;
6.1087829e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.5305057e-13;
0;7.1666605e-12;0;2.3832149e-13;0;0;3.6148948e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.9968771e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;3.1618281e-08;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;8.3352363e-17;0;0;0;0;0;0;0;0;
0;0;0;0;0;2.9440218e-16;0;0;0;0;
0;0;0;0;0;0;0;0;4.0327666e-14;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.4732515e-11;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;4.7182666e-15;0;0;0;0;0;1.011683e-12;
0;0;0;0;0;0;0;0;0.91891801;0;
0;0;0;0;6.4526599e-11;0;0;0;0;0.9103713;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86058599;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.84690356;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88495207;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.84053195;0;
0;0;0;0;0;0;0;0;0;0.85208476;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.9493947;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94184452;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.00095637928;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.83599341;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;9.0052938e-14;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.8551749;0;0;7.185395e-17;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;4.2249499e-15;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88918829;0;0;
0;0;0;0;0;0;4.2075293e-12;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.3517606e-16;0;0;0;3.1800148e-14;0;
0;8.0953872e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.84962505;0;
0;0;0;0;1.2824373e-11;0;0;0;0;0.82460278;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.92056888;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.91429698;0;
0;0;0;0;0;0;0;0;0;0.91783971;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;8.0865963e-19;0;0;
0;0;0;0;0;0;0;0;0;0.9483307;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;4.7304418e-16;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94041437;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.0358988e-11;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.113222e-09;0;0;
0;0;0;0;0;2.2400193e-14;0;0;0;0;
0;0;0;0;0;0;0;0;9.6397212e-10;0;
6.1853668e-11;0;0;0;0;0;0;0;0;0;
0;0;0.91028523;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.4091303e-15;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.3086619e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.7762528e-11;0;0;0;0;0;0;1.6604944e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;4.4093085e-10;0;0;8.1384832e-10;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.0294779e-11;0;0;0;0;0;0;0;0;0;
4.1740916e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;8.3894219e-16;0;0.9107762;0;
0;0;0;0;0;0;0;0;0;0.9067899;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86223543;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.7985028;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.85922825;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.8185634;0;
0;0;0;0;0;0;0;0;0;0.85386699;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94794363;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;7.9705125e-24;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.93989408;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.7220324e-05;0;0;0;0;0;
0;2.6447829e-15;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;7.5785662e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.1021585e-14;0;0;0;0;0;0;0;0;0;
0;0;0.84027797;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.4410441e-16;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.82031214;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86942953;0;5.0645715e-16;
0;0;0;0;0;0;5.7987876e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
6.6273607e-15;0;0;0;0;0;0;1.0446713e-16;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;4.3486406e-13;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;3.4626005e-17;0;
0;6.999702e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.83829206;0;
0;0;0;0;1.1943852e-11;0;0;0;0;0.82933426;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.95081061;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.2599239e-06;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94977868;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95633078;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.95080823;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;8.0814834e-06;0;0;0;0;
1.8800039e-13;0;0;0;0;0;2.8174141e-10;0;0;0.95425946;
0;0;0;0;0;0;2.5160048e-06;0;0;0;
0;0;0;0;0;1.2795209e-10;0;0;0;0;
0;0;0;0;0;0;1.6518046e-09;0;0;0;
0;0;0;0;0;0;0;4.3174225e-10;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;8.649427e-09;0;0;0;6.5084027e-10;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.8943549e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;4.0911874e-09;0;0;
0;0;3.3946768e-10;0;0;0;0;0;0;0;
0;1.4740306e-11;0;0;0;0;0;0;0;0;
0;7.6860134e-15;0;0;0;0;0;4.6833309e-10;0;4.3171733e-10;
0;0;0;0;0;0;0;0;3.2422245e-10;6.0000421e-11;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;4.1820113e-06;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;2.760696e-11;0;
0;0;0;6.047045e-16;0;0;0;0;0;0;
0;0;0;0;0;5.4417626e-16;0;0;0;0;
0;0;0;0;0;0;0;3.455868e-14;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94835615;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;9.4126052e-13;
0;0;0;0;0;0;0;3.6324993e-06;7.6772864e-15;0;
0;0;0;0;0;2.7723045e-06;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
9.8637431e-16;0;0;4.0295222e-06;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.7746906e-10;0;0;0;5.5315058e-10;0;4.6246906e-10;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.2470446e-12;0;0;3.2071157e-10;1.2626802e-11;4.023358e-13;5.6483562e-10;0;0;0;
0;0;0;0;3.1145933e-10;0;0;0;0;0;
0;0;0;0;0;0;2.0917426e-11;0;0;0;
9.3060715e-13;0;0;0;0;0;0;1.4813678e-11;3.9210211e-12;0;
0;0;0;9.258282e-07;0;3.9505112e-06;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86923862;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.86035907;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89268255;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.86166179;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95569384;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.95000345;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95272863;
0;0;0;0;1.5062131e-10;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;8.0194006e-08;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.1787324e-09;0;0;6.9520527e-14;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;6.2255132e-11;0;0;5.4122727e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;4.4454957e-15;6.7611063e-09;0;0;
2.8109186e-09;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;4.3236101e-10;0;0;0;0;0;0;
0;0;0;0;0;0;0;5.5033072e-13;0;0;
0;0;0;0;0;0;0;0;5.9266448e-08;0;
0;0;0;0;0;0;1.0936772e-07;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;7.1961873e-14;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94643682;0;0;0;
1.0515771e-07;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;7.1694158e-11;0;0;0;
0;6.4842737e-14;0;0;0;0;0;0;0;0;
0;0;0;1.8859723e-12;0;4.7366044e-08;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.4200727e-10;0;6.2882279e-08;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.94901955;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94791645;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95183057;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.9642584e-05;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94502503;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;5.4864525e-08;0;7.8948954e-09;0;0;
0;5.2285905e-13;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
6.9634036e-14;0;0;0;0;0;0;0;0;0;
0;0;0.94539708;0;0;6.6475536e-09;0;0;0;0;
2.0142974e-11;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1.0757874e-07;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;6.8450362e-08;0;0;1.0625576e-12;0;
0;0;0;0;0;0;1.2113353e-09;0;0;0;
0;0;0;0;0;0;0;3.3035781e-13;0;0;
0;0;0;0;0;0;3.9771547e-11;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.0246482e-07;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;2.6632993e-10;3.1970611e-08;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.0469333e-06;0;0;0;0;0;0;
3.2682726e-14;0;0;0;7.9023017e-08;0;0;0;0;0;
0;0;0;0;0;0;0;5.0306307e-06;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.6675206e-11;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;2.5838391e-14;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2.2027658e-16;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.9845291e-15;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.6873712e-07;0;0;0;0;0;
0;0;0;0;0;0;1.4618403e-06;0;0;0;
6.224365e-09;0;0;0;0;0;0;3.7278537e-06;2.0670232e-08;0;
0;0;0;0;0;0;1.5950246e-09;0;0;0.94413894;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86923259;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.82987559;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.87528694;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.8617062;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95193923;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.3379146e-06;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94517326;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.2782608e-14;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.84690148;0;0;0;0;0;0;0;
0;0;0;0;0;0;2.8026006e-14;0;0;0;
0;0;0;0;0;0;0;0;0;3.8981573e-13;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;5.0010571e-13;0;0;0.85082239;0;0;0;0;0;
3.5819237e-13;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;3.7258339e-17;0;0;2.9983074e-18;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88648498;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;7.2203528e-13;0;4.6370165e-14;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
3.3395288e-15;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;5.6188867e-20;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.8486809e-18;0;0;0;0;0;1.0144435e-16;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;9.3116344e-17;0;0;0;0;
0;0;0;0;0;0;6.2681067e-13;0;0;0;
0;0;0;8.2596715e-15;0;0;0;1.1677497e-12;0;0;
0;0;0;0;0;0;0;0;0;0.83697069;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.92102665;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.91491348;0;
0;0;0;0;0;0;0;0;0;0.91834462;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95044833;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94320887;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.3586668e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.6746731e-11;0;0.91492069;0;0;0;2.9285281e-12;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;8.182767e-12;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;8.0714532e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.9636379e-11;0;0;
0;0;2.6567735e-15;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;4.7236529e-12;0;2.6270769e-11;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;3.6567898e-11;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.4382087e-16;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.91699517;0;
0;0;0;1.6403956e-11;0;0;0;0;0;0.91184437;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.86108428;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.84228468;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88226146;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.8113569;0;
0;0;0;0;0;0;0;0;0;0.85257137;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94971889;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94224852;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;4.9379374e-05;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.83927214;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.6730251e-15;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.068796e-20;0;0;0.85739785;0;0;2.7146933e-19;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;7.8949651e-17;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89044642;0;0;
0;0;0;0;0;0;2.8955243e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;2.7055659e-18;0;0;0;4.8820014e-16;0;
0;5.9584e-13;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;6.3122674e-16;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;6.9632478e-15;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.82848769;0;
0;0;0;2.6093878e-18;9.8603114e-13;0;0;0;0;0.82830179;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.92018396;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.90296274;0;
0;0;0;0;0;0;0;0;0;0.91741437;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94985408;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.3286373e-20;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.94244486;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.8359259e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;7.4252701e-11;0;0;
0;0;0;0;0;1.0231092e-15;0;0;0;0;
0;0;0;0;0;0;0;0;7.4872317e-11;0;
5.2369879e-12;0;0;0;0;0;0;0;0;0;
0;0;0.91210455;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1.2325809e-16;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;6.7144088e-13;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.4911865e-13;0;0;0;0;0;0;
2.2868409e-12;0;0;0;0;0;0;3.4136425e-13;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.7036095e-11;0;0;5.8404524e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.9740888e-16;0;0;0;0;0;0;0;0;0;
1.043157e-14;0;0;0;0;0;0;2.0182456e-13;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.1617574e-12;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.0690799e-14;0;0;0;
0;0;0;0;0;0;0;7.5824668e-12;0.90628296;0;
0;0;0;4.7319716e-15;0;0;0;0;0;0.90880293;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [42] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;    };
   };
   DataTable @["EpochTestOutputData"] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1335113495588303;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [5940] 0;0;0;0;0;0;0;0;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;3;3;
3;3;3;3;3;3;3;3;3;3;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;5;5;
5;5;5;5;6;6;6;6;6;6;
6;6;6;6;6;6;7;7;7;7;
7;7;7;7;7;7;7;7;7;7;
7;7;7;7;7;7;8;8;8;8;
8;8;8;8;9;9;9;9;9;9;
9;9;9;9;9;9;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;11;11;
11;11;11;11;11;11;11;11;11;11;
11;11;11;11;11;11;11;11;11;11;
11;11;11;11;11;11;12;12;12;12;
12;12;12;12;12;12;12;12;12;12;
13;13;13;13;13;13;13;13;13;13;
14;14;14;14;14;14;14;14;14;14;
15;15;15;15;15;15;15;15;15;15;
16;16;16;16;16;16;16;16;16;16;
16;16;16;16;17;17;17;17;17;17;
17;17;18;18;18;18;18;18;18;18;
18;18;18;18;19;19;19;19;19;19;
19;19;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;21;21;
21;21;21;21;21;21;22;22;22;22;
22;22;22;22;22;22;22;22;22;22;
22;22;22;22;22;22;22;22;22;22;
22;22;22;22;23;23;23;23;23;23;
23;23;23;23;23;23;24;24;24;24;
24;24;24;24;25;25;25;25;25;25;
25;25;26;26;26;26;26;26;26;26;
27;27;27;27;27;27;27;27;27;27;
27;27;27;27;27;27;28;28;28;28;
28;28;28;28;29;29;29;29;29;29;
29;29;29;29;30;30;30;30;30;30;
30;30;31;31;31;31;31;31;31;31;
31;31;31;31;32;32;32;32;32;32;
32;32;32;32;33;33;33;33;33;33;
33;33;33;33;33;33;34;34;34;34;
34;34;35;35;35;35;35;35;35;35;
36;36;36;36;36;36;36;36;36;36;
37;37;37;37;37;37;37;37;38;38;
38;38;38;38;38;38;39;39;39;39;
39;39;39;39;39;39;39;39;39;39;
39;39;40;40;40;40;40;40;40;40;
40;40;40;40;41;41;41;41;41;41;
41;41;41;41;41;41;42;42;42;42;
42;42;42;42;42;42;42;42;43;43;
43;43;43;43;43;43;43;43;43;43;
44;44;44;44;44;44;44;44;44;44;
44;44;44;44;45;45;45;45;45;45;
45;45;45;45;46;46;46;46;46;46;
46;46;46;46;47;47;47;47;47;47;
47;47;47;47;48;48;48;48;48;48;
48;48;49;49;49;49;49;49;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;51;51;51;51;51;51;52;52;
52;52;52;52;52;52;52;52;52;52;
52;52;52;52;52;52;53;53;53;53;
53;53;53;53;53;53;53;53;53;53;
53;53;53;53;54;54;54;54;54;54;
54;54;55;55;55;55;55;55;55;55;
55;55;55;55;56;56;56;56;56;56;
56;56;56;56;56;56;56;56;57;57;
57;57;57;57;58;58;58;58;58;58;
58;58;58;58;59;59;59;59;59;59;
59;59;59;59;59;59;60;60;60;60;
60;60;60;60;60;60;60;60;60;60;
60;60;60;60;60;60;60;60;60;60;
60;60;60;60;61;61;61;61;61;61;
61;61;62;62;62;62;62;62;62;62;
63;63;63;63;63;63;63;63;63;63;
63;63;63;63;64;64;64;64;64;64;
64;64;65;65;65;65;65;65;65;65;
65;65;65;65;66;66;66;66;66;66;
66;66;66;66;66;66;66;66;66;66;
66;66;66;66;67;67;67;67;67;67;
67;67;67;67;67;67;68;68;68;68;
68;68;68;68;68;68;69;69;69;69;
69;69;70;70;70;70;70;70;70;70;
70;70;70;70;70;70;71;71;71;71;
71;71;71;71;71;71;72;72;72;72;
72;72;72;72;72;72;73;73;73;73;
73;73;73;73;73;73;73;73;73;73;
73;73;74;74;74;74;74;74;74;74;
74;74;75;75;75;75;75;75;75;75;
75;75;75;75;75;75;75;75;76;76;
76;76;76;76;76;76;76;76;76;76;
76;76;76;76;77;77;77;77;77;77;
77;77;77;77;78;78;78;78;78;78;
78;78;79;79;79;79;79;79;79;79;
79;79;79;79;79;79;79;79;80;80;
80;80;80;80;80;80;80;80;81;81;
81;81;81;81;81;81;81;81;81;81;
81;81;82;82;82;82;82;82;82;82;
82;82;83;83;83;83;83;83;83;83;
83;83;83;83;83;83;83;83;83;83;
84;84;84;84;84;84;84;84;84;84;
84;84;84;84;85;85;85;85;85;85;
85;85;86;86;86;86;86;86;86;86;
86;86;86;86;87;87;87;87;87;87;
87;87;87;87;87;87;87;87;87;87;
87;87;87;87;87;87;87;87;87;87;
88;88;88;88;88;88;88;88;88;88;
88;88;88;88;88;88;88;88;88;88;
88;88;88;88;88;88;88;88;89;89;
89;89;89;89;89;89;89;89;90;90;
90;90;90;90;90;90;90;90;90;90;
90;90;90;90;90;90;90;90;91;91;
91;91;91;91;91;91;91;91;91;91;
91;91;91;91;92;92;92;92;92;92;
92;92;92;92;92;92;93;93;93;93;
93;93;93;93;94;94;94;94;94;94;
94;94;94;94;95;95;95;95;95;95;
95;95;96;96;96;96;96;96;96;96;
96;96;96;96;97;97;97;97;97;97;
97;97;97;97;97;97;97;97;97;97;
97;97;97;97;97;97;97;97;97;97;
97;97;97;97;97;97;97;97;97;97;
98;98;98;98;98;98;98;98;99;99;
99;99;99;99;99;99;99;99;100;100;
100;100;100;100;100;100;101;101;101;101;
101;101;101;101;101;101;102;102;102;102;
102;102;102;102;102;102;102;102;102;102;
102;102;102;102;102;102;103;103;103;103;
103;103;103;103;103;103;103;103;103;103;
104;104;104;104;104;104;105;105;105;105;
105;105;105;105;106;106;106;106;106;106;
106;106;106;106;106;106;106;106;107;107;
107;107;107;107;108;108;108;108;108;108;
108;108;109;109;109;109;109;109;109;109;
109;109;109;109;110;110;110;110;110;110;
110;110;111;111;111;111;111;111;111;111;
111;111;112;112;112;112;112;112;112;112;
112;112;112;112;113;113;113;113;113;113;
113;113;113;113;113;113;113;113;113;113;
114;114;114;114;114;114;114;114;114;114;
114;114;115;115;115;115;115;115;115;115;
116;116;116;116;116;116;117;117;117;117;
117;117;117;117;118;118;118;118;118;118;
118;118;118;118;119;119;119;119;119;119;
119;119;119;119;119;119;119;119;119;119;
119;119;119;119;119;119;119;119;119;119;
120;120;120;120;120;120;120;120;121;121;
121;121;121;121;121;121;121;121;122;122;
122;122;122;122;122;122;123;123;123;123;
123;123;123;123;123;123;123;123;123;123;
124;124;124;124;124;124;124;124;124;124;
124;124;125;125;125;125;125;125;126;126;
126;126;126;126;126;126;126;126;127;127;
127;127;127;127;128;128;128;128;128;128;
128;128;128;128;128;128;128;128;128;128;
128;128;128;128;128;128;129;129;129;129;
129;129;129;129;130;130;130;130;130;130;
130;130;131;131;131;131;131;131;131;131;
132;132;132;132;132;132;132;132;132;132;
132;132;133;133;133;133;133;133;133;133;
134;134;134;134;134;134;134;134;135;135;
135;135;135;135;135;135;135;135;136;136;
136;136;136;136;136;136;136;136;136;136;
136;136;136;136;136;136;136;136;137;137;
137;137;137;137;137;137;137;137;137;137;
137;137;137;137;137;137;137;137;137;137;
137;137;138;138;138;138;138;138;138;138;
138;138;138;138;138;138;138;138;139;139;
139;139;139;139;139;139;140;140;140;140;
140;140;140;140;140;140;141;141;141;141;
141;141;142;142;142;142;142;142;142;142;
142;142;142;142;143;143;143;143;143;143;
143;143;143;143;143;143;143;143;144;144;
144;144;144;144;144;144;145;145;145;145;
145;145;145;145;145;145;145;145;145;145;
146;146;146;146;146;146;146;146;147;147;
147;147;147;147;148;148;148;148;148;148;
148;148;149;149;149;149;149;149;149;149;
149;149;149;149;149;149;149;149;149;149;
149;149;150;150;150;150;150;150;150;150;
150;150;150;150;151;151;151;151;151;151;
151;151;151;151;151;151;151;151;151;151;
151;151;151;151;151;151;151;151;151;151;
152;152;152;152;152;152;152;152;153;153;
153;153;153;153;153;153;153;153;154;154;
154;154;154;154;154;154;155;155;155;155;
155;155;155;155;156;156;156;156;156;156;
156;156;156;156;156;156;156;156;157;157;
157;157;157;157;157;157;158;158;158;158;
158;158;158;158;159;159;159;159;159;159;
159;159;159;159;159;159;159;159;160;160;
160;160;160;160;161;161;161;161;161;161;
161;161;162;162;162;162;162;162;162;162;
162;162;162;162;162;162;162;162;162;162;
162;162;163;163;163;163;163;163;163;163;
163;163;164;164;164;164;164;164;164;164;
164;164;164;164;165;165;165;165;165;165;
165;165;165;165;165;165;166;166;166;166;
166;166;166;166;166;166;166;166;166;166;
166;166;167;167;167;167;167;167;167;167;
167;167;167;167;167;167;167;167;167;167;
167;167;167;167;167;167;168;168;168;168;
168;168;168;168;168;168;168;168;168;168;
168;168;168;168;168;168;169;169;169;169;
169;169;169;169;169;169;169;169;169;169;
169;169;169;169;170;170;170;170;170;170;
170;170;171;171;171;171;171;171;171;171;
172;172;172;172;172;172;172;172;173;173;
173;173;173;173;173;173;174;174;174;174;
174;174;174;174;174;174;175;175;175;175;
175;175;175;175;175;175;175;175;176;176;
176;176;176;176;176;176;176;176;176;176;
177;177;177;177;177;177;177;177;177;177;
178;178;178;178;178;178;178;178;178;178;
178;178;178;178;179;179;179;179;179;179;
179;179;180;180;180;180;180;180;180;180;
181;181;181;181;181;181;181;181;181;181;
181;181;181;181;181;181;181;181;181;181;
181;181;181;181;182;182;182;182;182;182;
183;183;183;183;183;183;183;183;184;184;
184;184;184;184;184;184;185;185;185;185;
185;185;185;185;185;185;185;185;186;186;
186;186;186;186;186;186;186;186;186;186;
187;187;187;187;187;187;187;187;188;188;
188;188;188;188;188;188;188;188;188;188;
189;189;189;189;189;189;189;189;189;189;
189;189;189;189;189;189;190;190;190;190;
190;190;190;190;190;190;190;190;190;190;
190;190;191;191;191;191;191;191;191;191;
191;191;191;191;192;192;192;192;192;192;
192;192;193;193;193;193;193;193;193;193;
193;193;194;194;194;194;194;194;194;194;
194;194;194;194;194;194;194;194;194;194;
194;194;195;195;195;195;195;195;195;195;
196;196;196;196;196;196;197;197;197;197;
197;197;197;197;197;197;197;197;197;197;
197;197;197;197;197;197;197;197;198;198;
198;198;198;198;198;198;198;198;199;199;
199;199;199;199;199;199;199;199;199;199;
199;199;199;199;200;200;200;200;200;200;
201;201;201;201;201;201;201;201;201;201;
202;202;202;202;202;202;202;202;202;202;
202;202;202;202;203;203;203;203;203;203;
203;203;204;204;204;204;204;204;204;204;
204;204;204;204;205;205;205;205;205;205;
205;205;205;205;206;206;206;206;206;206;
207;207;207;207;207;207;207;207;207;207;
208;208;208;208;208;208;208;208;209;209;
209;209;209;209;209;209;209;209;210;210;
210;210;210;210;210;210;210;210;210;210;
211;211;211;211;211;211;211;211;212;212;
212;212;212;212;212;212;213;213;213;213;
213;213;213;213;214;214;214;214;214;214;
214;214;214;214;215;215;215;215;215;215;
215;215;215;215;215;215;215;215;215;215;
216;216;216;216;216;216;216;216;216;216;
216;216;216;216;216;216;216;216;216;216;
217;217;217;217;217;217;217;217;217;217;
217;217;217;217;217;217;217;217;217;217;
217;217;218;218;218;218;218;218;218;218;
219;219;219;219;219;219;219;219;219;219;
219;219;219;219;219;219;220;220;220;220;
220;220;220;220;220;220;221;221;221;221;
221;221;221;221;221;221;221;221;222;222;
222;222;222;222;222;222;223;223;223;223;
223;223;223;223;223;223;224;224;224;224;
224;224;224;224;225;225;225;225;225;225;
225;225;225;225;226;226;226;226;226;226;
226;226;226;226;226;226;226;226;227;227;
227;227;227;227;227;227;227;227;227;227;
227;227;228;228;228;228;228;228;228;228;
228;228;228;228;229;229;229;229;229;229;
229;229;230;230;230;230;230;230;231;231;
231;231;231;231;231;231;231;231;231;231;
232;232;232;232;232;232;232;232;232;232;
233;233;233;233;233;233;233;233;233;233;
233;233;233;233;233;233;233;233;233;233;
233;233;233;233;233;233;233;233;233;233;
233;233;233;233;234;234;234;234;234;234;
234;234;234;234;234;234;235;235;235;235;
235;235;235;235;235;235;236;236;236;236;
236;236;236;236;236;236;236;236;237;237;
237;237;237;237;237;237;237;237;237;237;
238;238;238;238;238;238;238;238;239;239;
239;239;239;239;239;239;239;239;239;239;
240;240;240;240;240;240;240;240;240;240;
240;240;241;241;241;241;241;241;241;241;
241;241;242;242;242;242;242;242;242;242;
243;243;243;243;243;243;243;243;243;243;
243;243;243;243;243;243;243;243;243;243;
243;243;243;243;243;243;244;244;244;244;
244;244;244;244;244;244;244;244;244;244;
244;244;244;244;244;244;244;244;244;244;
245;245;245;245;245;245;245;245;245;245;
246;246;246;246;246;246;246;246;246;246;
246;246;246;246;246;246;246;246;246;246;
246;246;246;246;247;247;247;247;247;247;
247;247;248;248;248;248;248;248;248;248;
248;248;248;248;249;249;249;249;249;249;
249;249;249;249;249;249;250;250;250;250;
250;250;250;250;251;251;251;251;251;251;
251;251;251;251;251;251;251;251;252;252;
252;252;252;252;252;252;253;253;253;253;
253;253;253;253;253;253;253;253;253;253;
254;254;254;254;254;254;254;254;254;254;
254;254;254;254;254;254;254;254;255;255;
255;255;255;255;255;255;255;255;256;256;
256;256;256;256;256;256;256;256;257;257;
257;257;257;257;258;258;258;258;258;258;
258;258;258;258;259;259;259;259;259;259;
260;260;260;260;260;260;260;260;261;261;
261;261;261;261;261;261;261;261;262;262;
262;262;262;262;262;262;262;262;262;262;
262;262;263;263;263;263;263;263;263;263;
263;263;263;263;263;263;264;264;264;264;
264;264;264;264;264;264;265;265;265;265;
265;265;266;266;266;266;266;266;267;267;
267;267;267;267;267;267;268;268;268;268;
268;268;268;268;268;268;268;268;268;268;
268;268;268;268;268;268;269;269;269;269;
269;269;269;269;270;270;270;270;270;270;
270;270;270;270;270;270;270;270;270;270;
270;270;270;270;270;270;270;270;270;270;
271;271;271;271;271;271;271;271;271;271;
271;271;272;272;272;272;272;272;273;273;
273;273;273;273;273;273;273;273;274;274;
274;274;274;274;274;274;275;275;275;275;
275;275;275;275;276;276;276;276;276;276;
277;277;277;277;277;277;277;277;277;277;
277;277;277;277;277;277;278;278;278;278;
278;278;279;279;279;279;279;279;279;279;
280;280;280;280;280;280;280;280;280;280;
280;280;280;280;281;281;281;281;281;281;
281;281;281;281;281;281;282;282;282;282;
282;282;282;282;282;282;282;282;283;283;
283;283;283;283;283;283;283;283;283;283;
283;283;283;283;283;283;283;283;284;284;
284;284;284;284;284;284;284;284;284;284;
285;285;285;285;285;285;285;285;285;285;
285;285;285;285;285;285;285;285;285;285;
285;285;285;285;285;285;286;286;286;286;
286;286;286;286;286;286;286;286;286;286;
286;286;286;286;286;286;286;286;286;286;
286;286;287;287;287;287;287;287;287;287;
287;287;287;287;287;287;287;287;287;287;
288;288;288;288;288;288;288;288;288;288;
288;288;289;289;289;289;289;289;290;290;
290;290;290;290;290;290;290;290;290;290;
291;291;291;291;291;291;291;291;291;291;
291;291;291;291;292;292;292;292;292;292;
292;292;292;292;292;292;293;293;293;293;
293;293;293;293;293;293;293;293;293;293;
293;293;293;293;293;293;293;293;293;293;
294;294;294;294;294;294;294;294;295;295;
295;295;295;295;295;295;295;295;295;295;
295;295;295;295;295;295;296;296;296;296;
296;296;296;296;296;296;297;297;297;297;
297;297;297;297;297;297;297;297;298;298;
298;298;298;298;299;299;299;299;299;299;
299;299;299;299;300;300;300;300;300;300;
300;300;300;300;300;300;301;301;301;301;
301;301;301;301;302;302;302;302;302;302;
302;302;303;303;303;303;303;303;303;303;
304;304;304;304;304;304;304;304;304;304;
304;304;304;304;305;305;305;305;305;305;
305;305;305;305;306;306;306;306;306;306;
306;306;306;306;307;307;307;307;307;307;
307;307;308;308;308;308;308;308;308;308;
308;308;308;308;308;308;308;308;309;309;
309;309;309;309;309;309;309;309;310;310;
310;310;310;310;310;310;310;310;310;310;
310;310;310;310;310;310;310;310;311;311;
311;311;311;311;311;311;311;311;311;311;
311;311;311;311;312;312;312;312;312;312;
313;313;313;313;313;313;314;314;314;314;
314;314;314;314;315;315;315;315;315;315;
315;315;316;316;316;316;316;316;316;316;
316;316;316;316;316;316;317;317;317;317;
317;317;317;317;317;317;317;317;318;318;
318;318;318;318;318;318;318;318;318;318;
318;318;319;319;319;319;319;319;319;319;
319;319;319;319;319;319;319;319;319;319;
320;320;320;320;320;320;320;320;320;320;
320;320;321;321;321;321;321;321;321;321;
321;321;321;321;322;322;322;322;322;322;
322;322;322;322;322;322;323;323;323;323;
323;323;323;323;323;323;324;324;324;324;
324;324;324;324;324;324;324;324;325;325;
325;325;325;325;325;325;325;325;325;325;
326;326;326;326;326;326;326;326;326;326;
327;327;327;327;327;327;327;327;327;327;
327;327;327;327;327;327;327;327;327;327;
328;328;328;328;328;328;328;328;329;329;
329;329;329;329;329;329;329;329;330;330;
330;330;330;330;330;330;330;330;330;330;
330;330;330;330;330;330;330;330;330;330;
331;331;331;331;331;331;331;331;331;331;
332;332;332;332;332;332;332;332;332;332;
332;332;332;332;332;332;333;333;333;333;
333;333;333;333;333;333;333;333;333;333;
334;334;334;334;334;334;334;334;334;334;
334;334;334;334;334;334;334;334;335;335;
335;335;335;335;335;335;335;335;335;335;
336;336;336;336;336;336;336;336;337;337;
337;337;337;337;337;337;337;337;338;338;
338;338;338;338;338;338;339;339;339;339;
339;339;339;339;339;339;339;339;339;339;
340;340;340;340;340;340;340;340;340;340;
340;340;341;341;341;341;341;341;342;342;
342;342;342;342;342;342;342;342;342;342;
342;342;342;342;342;342;342;342;343;343;
343;343;343;343;343;343;343;343;343;343;
344;344;344;344;344;344;344;344;345;345;
345;345;345;345;345;345;346;346;346;346;
346;346;346;346;346;346;346;346;346;346;
347;347;347;347;347;347;347;347;347;347;
347;347;347;347;348;348;348;348;348;348;
348;348;348;348;348;348;348;348;349;349;
349;349;349;349;350;350;350;350;350;350;
351;351;351;351;351;351;351;351;351;351;
351;351;352;352;352;352;352;352;352;352;
352;352;352;352;352;352;352;352;352;352;
353;353;353;353;353;353;353;353;353;353;
353;353;353;353;353;353;353;353;353;353;
354;354;354;354;354;354;354;354;355;355;
355;355;355;355;355;355;355;355;356;356;
356;356;356;356;356;356;356;356;356;356;
357;357;357;357;357;357;357;357;358;358;
358;358;358;358;358;358;358;358;359;359;
359;359;359;359;359;359;359;359;360;360;
360;360;360;360;360;360;360;360;360;360;
360;360;360;360;360;360;360;360;360;360;
361;361;361;361;361;361;361;361;361;361;
361;361;361;361;361;361;361;361;361;361;
361;361;361;361;361;361;361;361;361;361;
362;362;362;362;362;362;362;362;362;362;
363;363;363;363;363;363;363;363;363;363;
363;363;363;363;363;363;363;363;363;363;
364;364;364;364;364;364;364;364;364;364;
364;364;364;364;364;364;364;364;364;364;
364;364;364;364;365;365;365;365;365;365;
365;365;365;365;366;366;366;366;366;366;
366;366;367;367;367;367;367;367;367;367;
368;368;368;368;368;368;369;369;369;369;
369;369;369;369;369;369;369;369;369;369;
369;369;369;369;370;370;370;370;370;370;
370;370;371;371;371;371;371;371;371;371;
371;371;372;372;372;372;372;372;373;373;
373;373;373;373;374;374;374;374;374;374;
375;375;375;375;375;375;375;375;375;375;
376;376;376;376;376;376;376;376;377;377;
377;377;377;377;377;377;377;377;378;378;
378;378;378;378;378;378;378;378;379;379;
379;379;379;379;379;379;379;379;379;379;
379;379;380;380;380;380;380;380;380;380;
380;380;381;381;381;381;381;381;381;381;
381;381;381;381;381;381;381;381;382;382;
382;382;382;382;382;382;382;382;382;382;
382;382;382;382;382;382;382;382;382;382;
382;382;382;382;383;383;383;383;383;383;
383;383;383;383;383;383;383;383;383;383;
384;384;384;384;384;384;384;384;384;384;
385;385;385;385;385;385;386;386;386;386;
386;386;387;387;387;387;387;387;387;387;
387;387;387;387;387;387;387;387;387;387;
387;387;387;387;388;388;388;388;388;388;
389;389;389;389;389;389;389;389;390;390;
390;390;390;390;391;391;391;391;391;391;
391;391;391;391;391;391;391;391;391;391;
391;391;392;392;392;392;392;392;392;392;
393;393;393;393;393;393;393;393;393;393;
393;393;394;394;394;394;394;394;394;394;
394;394;394;394;394;394;395;395;395;395;
395;395;395;395;395;395;396;396;396;396;
396;396;397;397;397;397;397;397;397;397;
397;397;397;397;397;397;397;397;397;397;
398;398;398;398;398;398;398;398;398;398;
399;399;399;399;399;399;399;399;399;399;
399;399;399;399;399;399;400;400;400;400;
400;400;400;400;400;400;401;401;401;401;
401;401;401;401;401;401;401;401;402;402;
402;402;402;402;402;402;402;402;402;402;
402;402;403;403;403;403;403;403;403;403;
403;403;404;404;404;404;404;404;404;404;
404;404;404;404;404;404;404;404;404;404;
404;404;404;404;405;405;405;405;405;405;
405;405;406;406;406;406;406;406;406;406;
406;406;407;407;407;407;407;407;408;408;
408;408;408;408;408;408;408;408;408;408;
408;408;408;408;408;408;408;408;409;409;
409;409;409;409;409;409;410;410;410;410;
410;410;410;410;410;410;410;410;411;411;
411;411;411;411;411;411;411;411;411;411;
411;411;411;411;411;411;412;412;412;412;
412;412;412;412;412;412;412;412;413;413;
413;413;413;413;413;413;413;413;413;413;
413;413;413;413;413;413;413;413;413;413;
413;413;414;414;414;414;414;414;414;414;
414;414;414;414;415;415;415;415;415;415;
415;415;415;415;416;416;416;416;416;416;
416;416;417;417;417;417;417;417;417;417;
417;417;417;417;418;418;418;418;418;418;
418;418;419;419;419;419;419;419;419;419;
419;419;419;419;419;419;419;419;420;420;
420;420;420;420;421;421;421;421;421;421;
421;421;421;421;421;421;422;422;422;422;
422;422;423;423;423;423;423;423;423;423;
423;423;423;423;423;423;424;424;424;424;
424;424;424;424;424;424;424;424;424;424;
425;425;425;425;425;425;425;425;425;425;
426;426;426;426;426;426;426;426;426;426;
426;426;426;426;426;426;426;426;427;427;
427;427;427;427;427;427;427;427;428;428;
428;428;428;428;429;429;429;429;429;429;
429;429;429;429;430;430;430;430;430;430;
431;431;431;431;431;431;431;431;432;432;
432;432;432;432;432;432;432;432;432;432;
433;433;433;433;433;433;433;433;434;434;
434;434;434;434;435;435;435;435;435;435;
435;435;435;435;435;435;436;436;436;436;
436;436;436;436;436;436;436;436;437;437;
437;437;437;437;437;437;437;437;437;437;
437;437;438;438;438;438;438;438;438;438;
438;438;438;438;438;438;438;438;438;438;
439;439;439;439;439;439;439;439;440;440;
440;440;440;440;440;440;440;440;440;440;
441;441;441;441;441;441;441;441;441;441;
442;442;442;442;442;442;442;442;442;442;
442;442;442;442;442;442;442;442;442;442;
442;442;442;442;442;442;443;443;443;443;
443;443;444;444;444;444;444;444;444;444;
444;444;444;444;444;444;444;444;444;444;
445;445;445;445;445;445;445;445;446;446;
446;446;446;446;446;446;447;447;447;447;
447;447;447;447;447;447;447;447;448;448;
448;448;448;448;449;449;449;449;449;449;
449;449;449;449;449;449;450;450;450;450;
450;450;450;450;450;450;450;450;450;450;
450;450;450;450;450;450;450;450;450;450;
450;450;451;451;451;451;451;451;451;451;
451;451;452;452;452;452;452;452;452;452;
453;453;453;453;453;453;453;453;454;454;
454;454;454;454;454;454;454;454;455;455;
455;455;455;455;455;455;455;455;455;455;
456;456;456;456;456;456;457;457;457;457;
457;457;457;457;457;457;458;458;458;458;
458;458;458;458;458;458;459;459;459;459;
459;459;459;459;459;459;459;459;459;459;
459;459;460;460;460;460;460;460;460;460;
460;460;461;461;461;461;461;461;461;461;
461;461;462;462;462;462;462;462;462;462;
462;462;462;462;463;463;463;463;463;463;
463;463;464;464;464;464;464;464;464;464;
464;464;465;465;465;465;465;465;465;465;
466;466;466;466;466;466;466;466;466;466;
466;466;466;466;467;467;467;467;467;467;
467;467;467;467;467;467;468;468;468;468;
468;468;468;468;468;468;469;469;469;469;
469;469;469;469;469;469;469;469;470;470;
470;470;470;470;470;470;470;470;470;470;
470;470;470;470;470;470;471;471;471;471;
471;471;471;471;471;471;471;471;471;471;
472;472;472;472;472;472;472;472;473;473;
473;473;473;473;473;473;473;473;474;474;
474;474;474;474;474;474;474;474;474;474;
475;475;475;475;475;475;475;475;476;476;
476;476;476;476;476;476;477;477;477;477;
477;477;477;477;478;478;478;478;478;478;
478;478;478;478;478;478;478;478;479;479;
479;479;479;479;479;479;479;479;479;479;
479;479;480;480;480;480;480;480;480;480;
480;480;480;480;481;481;481;481;481;481;
481;481;481;481;482;482;482;482;482;482;
482;482;482;482;482;482;482;482;482;482;
482;482;483;483;483;483;483;483;483;483;
484;484;484;484;484;484;484;484;484;484;
484;484;484;484;485;485;485;485;485;485;
485;485;485;485;485;485;485;485;485;485;
486;486;486;486;486;486;487;487;487;487;
487;487;487;487;488;488;488;488;488;488;
488;488;489;489;489;489;489;489;489;489;
489;489;489;489;490;490;490;490;490;490;
490;490;490;490;490;490;490;490;491;491;
491;491;491;491;491;491;491;491;491;491;
491;491;491;491;492;492;492;492;492;492;
492;492;492;492;493;493;493;493;493;493;
494;494;494;494;494;494;494;494;495;495;
495;495;495;495;495;495;495;495;495;495;
496;496;496;496;496;496;497;497;497;497;
497;497;497;497;497;497;497;497;497;497;
497;497;498;498;498;498;498;498;498;498;
498;498;499;499;499;499;499;499;499;499;
499;499;499;499;499;499;499;499;499;499;
      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1335113495588303;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [5940] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [5940] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
1320;1321;1322;1323;1324;1325;1326;1327;1328;1329;
1330;1331;1332;1333;1334;1335;1336;1337;1338;1339;
1340;1341;1342;1343;1344;1345;1346;1347;1348;1349;
1350;1351;1352;1353;1354;1355;1356;1357;1358;1359;
1360;1361;1362;1363;1364;1365;1366;1367;1368;1369;
1370;1371;1372;1373;1374;1375;1376;1377;1378;1379;
1380;1381;1382;1383;1384;1385;1386;1387;1388;1389;
1390;1391;1392;1393;1394;1395;1396;1397;1398;1399;
1400;1401;1402;1403;1404;1405;1406;1407;1408;1409;
1410;1411;1412;1413;1414;1415;1416;1417;1418;1419;
1420;1421;1422;1423;1424;1425;1426;1427;1428;1429;
1430;1431;1432;1433;1434;1435;1436;1437;1438;1439;
1440;1441;1442;1443;1444;1445;1446;1447;1448;1449;
1450;1451;1452;1453;1454;1455;1456;1457;1458;1459;
1460;1461;1462;1463;1464;1465;1466;1467;1468;1469;
1470;1471;1472;1473;1474;1475;1476;1477;1478;1479;
1480;1481;1482;1483;1484;1485;1486;1487;1488;1489;
1490;1491;1492;1493;1494;1495;1496;1497;1498;1499;
1500;1501;1502;1503;1504;1505;1506;1507;1508;1509;
1510;1511;1512;1513;1514;1515;1516;1517;1518;1519;
1520;1521;1522;1523;1524;1525;1526;1527;1528;1529;
1530;1531;1532;1533;1534;1535;1536;1537;1538;1539;
1540;1541;1542;1543;1544;1545;1546;1547;1548;1549;
1550;1551;1552;1553;1554;1555;1556;1557;1558;1559;
1560;1561;1562;1563;1564;1565;1566;1567;1568;1569;
1570;1571;1572;1573;1574;1575;1576;1577;1578;1579;
1580;1581;1582;1583;1584;1585;1586;1587;1588;1589;
1590;1591;1592;1593;1594;1595;1596;1597;1598;1599;
1600;1601;1602;1603;1604;1605;1606;1607;1608;1609;
1610;1611;1612;1613;1614;1615;1616;1617;1618;1619;
1620;1621;1622;1623;1624;1625;1626;1627;1628;1629;
1630;1631;1632;1633;1634;1635;1636;1637;1638;1639;
1640;1641;1642;1643;1644;1645;1646;1647;1648;1649;
1650;1651;1652;1653;1654;1655;1656;1657;1658;1659;
1660;1661;1662;1663;1664;1665;1666;1667;1668;1669;
1670;1671;1672;1673;1674;1675;1676;1677;1678;1679;
1680;1681;1682;1683;1684;1685;1686;1687;1688;1689;
1690;1691;1692;1693;1694;1695;1696;1697;1698;1699;
1700;1701;1702;1703;1704;1705;1706;1707;1708;1709;
1710;1711;1712;1713;1714;1715;1716;1717;1718;1719;
1720;1721;1722;1723;1724;1725;1726;1727;1728;1729;
1730;1731;1732;1733;1734;1735;1736;1737;1738;1739;
1740;1741;1742;1743;1744;1745;1746;1747;1748;1749;
1750;1751;1752;1753;1754;1755;1756;1757;1758;1759;
1760;1761;1762;1763;1764;1765;1766;1767;1768;1769;
1770;1771;1772;1773;1774;1775;1776;1777;1778;1779;
1780;1781;1782;1783;1784;1785;1786;1787;1788;1789;
1790;1791;1792;1793;1794;1795;1796;1797;1798;1799;
1800;1801;1802;1803;1804;1805;1806;1807;1808;1809;
1810;1811;1812;1813;1814;1815;1816;1817;1818;1819;
1820;1821;1822;1823;1824;1825;1826;1827;1828;1829;
1830;1831;1832;1833;1834;1835;1836;1837;1838;1839;
1840;1841;1842;1843;1844;1845;1846;1847;1848;1849;
1850;1851;1852;1853;1854;1855;1856;1857;1858;1859;
1860;1861;1862;1863;1864;1865;1866;1867;1868;1869;
1870;1871;1872;1873;1874;1875;1876;1877;1878;1879;
1880;1881;1882;1883;1884;1885;1886;1887;1888;1889;
1890;1891;1892;1893;1894;1895;1896;1897;1898;1899;
1900;1901;1902;1903;1904;1905;1906;1907;1908;1909;
1910;1911;1912;1913;1914;1915;1916;1917;1918;1919;
1920;1921;1922;1923;1924;1925;1926;1927;1928;1929;
1930;1931;1932;1933;1934;1935;1936;1937;1938;1939;
1940;1941;1942;1943;1944;1945;1946;1947;1948;1949;
1950;1951;1952;1953;1954;1955;1956;1957;1958;1959;
1960;1961;1962;1963;1964;1965;1966;1967;1968;1969;
1970;1971;1972;1973;1974;1975;1976;1977;1978;1979;
1980;1981;1982;1983;1984;1985;1986;1987;1988;1989;
1990;1991;1992;1993;1994;1995;1996;1997;1998;1999;
2000;2001;2002;2003;2004;2005;2006;2007;2008;2009;
2010;2011;2012;2013;2014;2015;2016;2017;2018;2019;
2020;2021;2022;2023;2024;2025;2026;2027;2028;2029;
2030;2031;2032;2033;2034;2035;2036;2037;2038;2039;
2040;2041;2042;2043;2044;2045;2046;2047;2048;2049;
2050;2051;2052;2053;2054;2055;2056;2057;2058;2059;
2060;2061;2062;2063;2064;2065;2066;2067;2068;2069;
2070;2071;2072;2073;2074;2075;2076;2077;2078;2079;
2080;2081;2082;2083;2084;2085;2086;2087;2088;2089;
2090;2091;2092;2093;2094;2095;2096;2097;2098;2099;
2100;2101;2102;2103;2104;2105;2106;2107;2108;2109;
2110;2111;2112;2113;2114;2115;2116;2117;2118;2119;
2120;2121;2122;2123;2124;2125;2126;2127;2128;2129;
2130;2131;2132;2133;2134;2135;2136;2137;2138;2139;
2140;2141;2142;2143;2144;2145;2146;2147;2148;2149;
2150;2151;2152;2153;2154;2155;2156;2157;2158;2159;
2160;2161;2162;2163;2164;2165;2166;2167;2168;2169;
2170;2171;2172;2173;2174;2175;2176;2177;2178;2179;
2180;2181;2182;2183;2184;2185;2186;2187;2188;2189;
2190;2191;2192;2193;2194;2195;2196;2197;2198;2199;
2200;2201;2202;2203;2204;2205;2206;2207;2208;2209;
2210;2211;2212;2213;2214;2215;2216;2217;2218;2219;
2220;2221;2222;2223;2224;2225;2226;2227;2228;2229;
2230;2231;2232;2233;2234;2235;2236;2237;2238;2239;
2240;2241;2242;2243;2244;2245;2246;2247;2248;2249;
2250;2251;2252;2253;2254;2255;2256;2257;2258;2259;
2260;2261;2262;2263;2264;2265;2266;2267;2268;2269;
2270;2271;2272;2273;2274;2275;2276;2277;2278;2279;
2280;2281;2282;2283;2284;2285;2286;2287;2288;2289;
2290;2291;2292;2293;2294;2295;2296;2297;2298;2299;
2300;2301;2302;2303;2304;2305;2306;2307;2308;2309;
2310;2311;2312;2313;2314;2315;2316;2317;2318;2319;
2320;2321;2322;2323;2324;2325;2326;2327;2328;2329;
2330;2331;2332;2333;2334;2335;2336;2337;2338;2339;
2340;2341;2342;2343;2344;2345;2346;2347;2348;2349;
2350;2351;2352;2353;2354;2355;2356;2357;2358;2359;
2360;2361;2362;2363;2364;2365;2366;2367;2368;2369;
2370;2371;2372;2373;2374;2375;2376;2377;2378;2379;
2380;2381;2382;2383;2384;2385;2386;2387;2388;2389;
2390;2391;2392;2393;2394;2395;2396;2397;2398;2399;
2400;2401;2402;2403;2404;2405;2406;2407;2408;2409;
2410;2411;2412;2413;2414;2415;2416;2417;2418;2419;
2420;2421;2422;2423;2424;2425;2426;2427;2428;2429;
2430;2431;2432;2433;2434;2435;2436;2437;2438;2439;
2440;2441;2442;2443;2444;2445;2446;2447;2448;2449;
2450;2451;2452;2453;2454;2455;2456;2457;2458;2459;
2460;2461;2462;2463;2464;2465;2466;2467;2468;2469;
2470;2471;2472;2473;2474;2475;2476;2477;2478;2479;
2480;2481;2482;2483;2484;2485;2486;2487;2488;2489;
2490;2491;2492;2493;2494;2495;2496;2497;2498;2499;
2500;2501;2502;2503;2504;2505;2506;2507;2508;2509;
2510;2511;2512;2513;2514;2515;2516;2517;2518;2519;
2520;2521;2522;2523;2524;2525;2526;2527;2528;2529;
2530;2531;2532;2533;2534;2535;2536;2537;2538;2539;
2540;2541;2542;2543;2544;2545;2546;2547;2548;2549;
2550;2551;2552;2553;2554;2555;2556;2557;2558;2559;
2560;2561;2562;2563;2564;2565;2566;2567;2568;2569;
2570;2571;2572;2573;2574;2575;2576;2577;2578;2579;
2580;2581;2582;2583;2584;2585;2586;2587;2588;2589;
2590;2591;2592;2593;2594;2595;2596;2597;2598;2599;
2600;2601;2602;2603;2604;2605;2606;2607;2608;2609;
2610;2611;2612;2613;2614;2615;2616;2617;2618;2619;
2620;2621;2622;2623;2624;2625;2626;2627;2628;2629;
2630;2631;2632;2633;2634;2635;2636;2637;2638;2639;
2640;2641;2642;2643;2644;2645;2646;2647;2648;2649;
2650;2651;2652;2653;2654;2655;2656;2657;2658;2659;
2660;2661;2662;2663;2664;2665;2666;2667;2668;2669;
2670;2671;2672;2673;2674;2675;2676;2677;2678;2679;
2680;2681;2682;2683;2684;2685;2686;2687;2688;2689;
2690;2691;2692;2693;2694;2695;2696;2697;2698;2699;
2700;2701;2702;2703;2704;2705;2706;2707;2708;2709;
2710;2711;2712;2713;2714;2715;2716;2717;2718;2719;
2720;2721;2722;2723;2724;2725;2726;2727;2728;2729;
2730;2731;2732;2733;2734;2735;2736;2737;2738;2739;
2740;2741;2742;2743;2744;2745;2746;2747;2748;2749;
2750;2751;2752;2753;2754;2755;2756;2757;2758;2759;
2760;2761;2762;2763;2764;2765;2766;2767;2768;2769;
2770;2771;2772;2773;2774;2775;2776;2777;2778;2779;
2780;2781;2782;2783;2784;2785;2786;2787;2788;2789;
2790;2791;2792;2793;2794;2795;2796;2797;2798;2799;
2800;2801;2802;2803;2804;2805;2806;2807;2808;2809;
2810;2811;2812;2813;2814;2815;2816;2817;2818;2819;
2820;2821;2822;2823;2824;2825;2826;2827;2828;2829;
2830;2831;2832;2833;2834;2835;2836;2837;2838;2839;
2840;2841;2842;2843;2844;2845;2846;2847;2848;2849;
2850;2851;2852;2853;2854;2855;2856;2857;2858;2859;
2860;2861;2862;2863;2864;2865;2866;2867;2868;2869;
2870;2871;2872;2873;2874;2875;2876;2877;2878;2879;
2880;2881;2882;2883;2884;2885;2886;2887;2888;2889;
2890;2891;2892;2893;2894;2895;2896;2897;2898;2899;
2900;2901;2902;2903;2904;2905;2906;2907;2908;2909;
2910;2911;2912;2913;2914;2915;2916;2917;2918;2919;
2920;2921;2922;2923;2924;2925;2926;2927;2928;2929;
2930;2931;2932;2933;2934;2935;2936;2937;2938;2939;
2940;2941;2942;2943;2944;2945;2946;2947;2948;2949;
2950;2951;2952;2953;2954;2955;2956;2957;2958;2959;
2960;2961;2962;2963;2964;2965;2966;2967;2968;2969;
2970;2971;2972;2973;2974;2975;2976;2977;2978;2979;
2980;2981;2982;2983;2984;2985;2986;2987;2988;2989;
2990;2991;2992;2993;2994;2995;2996;2997;2998;2999;
3000;3001;3002;3003;3004;3005;3006;3007;3008;3009;
3010;3011;3012;3013;3014;3015;3016;3017;3018;3019;
3020;3021;3022;3023;3024;3025;3026;3027;3028;3029;
3030;3031;3032;3033;3034;3035;3036;3037;3038;3039;
3040;3041;3042;3043;3044;3045;3046;3047;3048;3049;
3050;3051;3052;3053;3054;3055;3056;3057;3058;3059;
3060;3061;3062;3063;3064;3065;3066;3067;3068;3069;
3070;3071;3072;3073;3074;3075;3076;3077;3078;3079;
3080;3081;3082;3083;3084;3085;3086;3087;3088;3089;
3090;3091;3092;3093;3094;3095;3096;3097;3098;3099;
3100;3101;3102;3103;3104;3105;3106;3107;3108;3109;
3110;3111;3112;3113;3114;3115;3116;3117;3118;3119;
3120;3121;3122;3123;3124;3125;3126;3127;3128;3129;
3130;3131;3132;3133;3134;3135;3136;3137;3138;3139;
3140;3141;3142;3143;3144;3145;3146;3147;3148;3149;
3150;3151;3152;3153;3154;3155;3156;3157;3158;3159;
3160;3161;3162;3163;3164;3165;3166;3167;3168;3169;
3170;3171;3172;3173;3174;3175;3176;3177;3178;3179;
3180;3181;3182;3183;3184;3185;3186;3187;3188;3189;
3190;3191;3192;3193;3194;3195;3196;3197;3198;3199;
3200;3201;3202;3203;3204;3205;3206;3207;3208;3209;
3210;3211;3212;3213;3214;3215;3216;3217;3218;3219;
3220;3221;3222;3223;3224;3225;3226;3227;3228;3229;
3230;3231;3232;3233;3234;3235;3236;3237;3238;3239;
3240;3241;3242;3243;3244;3245;3246;3247;3248;3249;
3250;3251;3252;3253;3254;3255;3256;3257;3258;3259;
3260;3261;3262;3263;3264;3265;3266;3267;3268;3269;
3270;3271;3272;3273;3274;3275;3276;3277;3278;3279;
3280;3281;3282;3283;3284;3285;3286;3287;3288;3289;
3290;3291;3292;3293;3294;3295;3296;3297;3298;3299;
3300;3301;3302;3303;3304;3305;3306;3307;3308;3309;
3310;3311;3312;3313;3314;3315;3316;3317;3318;3319;
3320;3321;3322;3323;3324;3325;3326;3327;3328;3329;
3330;3331;3332;3333;3334;3335;3336;3337;3338;3339;
3340;3341;3342;3343;3344;3345;3346;3347;3348;3349;
3350;3351;3352;3353;3354;3355;3356;3357;3358;3359;
3360;3361;3362;3363;3364;3365;3366;3367;3368;3369;
3370;3371;3372;3373;3374;3375;3376;3377;3378;3379;
3380;3381;3382;3383;3384;3385;3386;3387;3388;3389;
3390;3391;3392;3393;3394;3395;3396;3397;3398;3399;
3400;3401;3402;3403;3404;3405;3406;3407;3408;3409;
3410;3411;3412;3413;3414;3415;3416;3417;3418;3419;
3420;3421;3422;3423;3424;3425;3426;3427;3428;3429;
3430;3431;3432;3433;3434;3435;3436;3437;3438;3439;
3440;3441;3442;3443;3444;3445;3446;3447;3448;3449;
3450;3451;3452;3453;3454;3455;3456;3457;3458;3459;
3460;3461;3462;3463;3464;3465;3466;3467;3468;3469;
3470;3471;3472;3473;3474;3475;3476;3477;3478;3479;
3480;3481;3482;3483;3484;3485;3486;3487;3488;3489;
3490;3491;3492;3493;3494;3495;3496;3497;3498;3499;
3500;3501;3502;3503;3504;3505;3506;3507;3508;3509;
3510;3511;3512;3513;3514;3515;3516;3517;3518;3519;
3520;3521;3522;3523;3524;3525;3526;3527;3528;3529;
3530;3531;3532;3533;3534;3535;3536;3537;3538;3539;
3540;3541;3542;3543;3544;3545;3546;3547;3548;3549;
3550;3551;3552;3553;3554;3555;3556;3557;3558;3559;
3560;3561;3562;3563;3564;3565;3566;3567;3568;3569;
3570;3571;3572;3573;3574;3575;3576;3577;3578;3579;
3580;3581;3582;3583;3584;3585;3586;3587;3588;3589;
3590;3591;3592;3593;3594;3595;3596;3597;3598;3599;
3600;3601;3602;3603;3604;3605;3606;3607;3608;3609;
3610;3611;3612;3613;3614;3615;3616;3617;3618;3619;
3620;3621;3622;3623;3624;3625;3626;3627;3628;3629;
3630;3631;3632;3633;3634;3635;3636;3637;3638;3639;
3640;3641;3642;3643;3644;3645;3646;3647;3648;3649;
3650;3651;3652;3653;3654;3655;3656;3657;3658;3659;
3660;3661;3662;3663;3664;3665;3666;3667;3668;3669;
3670;3671;3672;3673;3674;3675;3676;3677;3678;3679;
3680;3681;3682;3683;3684;3685;3686;3687;3688;3689;
3690;3691;3692;3693;3694;3695;3696;3697;3698;3699;
3700;3701;3702;3703;3704;3705;3706;3707;3708;3709;
3710;3711;3712;3713;3714;3715;3716;3717;3718;3719;
3720;3721;3722;3723;3724;3725;3726;3727;3728;3729;
3730;3731;3732;3733;3734;3735;3736;3737;3738;3739;
3740;3741;3742;3743;3744;3745;3746;3747;3748;3749;
3750;3751;3752;3753;3754;3755;3756;3757;3758;3759;
3760;3761;3762;3763;3764;3765;3766;3767;3768;3769;
3770;3771;3772;3773;3774;3775;3776;3777;3778;3779;
3780;3781;3782;3783;3784;3785;3786;3787;3788;3789;
3790;3791;3792;3793;3794;3795;3796;3797;3798;3799;
3800;3801;3802;3803;3804;3805;3806;3807;3808;3809;
3810;3811;3812;3813;3814;3815;3816;3817;3818;3819;
3820;3821;3822;3823;3824;3825;3826;3827;3828;3829;
3830;3831;3832;3833;3834;3835;3836;3837;3838;3839;
3840;3841;3842;3843;3844;3845;3846;3847;3848;3849;
3850;3851;3852;3853;3854;3855;3856;3857;3858;3859;
3860;3861;3862;3863;3864;3865;3866;3867;3868;3869;
3870;3871;3872;3873;3874;3875;3876;3877;3878;3879;
3880;3881;3882;3883;3884;3885;3886;3887;3888;3889;
3890;3891;3892;3893;3894;3895;3896;3897;3898;3899;
3900;3901;3902;3903;3904;3905;3906;3907;3908;3909;
3910;3911;3912;3913;3914;3915;3916;3917;3918;3919;
3920;3921;3922;3923;3924;3925;3926;3927;3928;3929;
3930;3931;3932;3933;3934;3935;3936;3937;3938;3939;
3940;3941;3942;3943;3944;3945;3946;3947;3948;3949;
3950;3951;3952;3953;3954;3955;3956;3957;3958;3959;
3960;3961;3962;3963;3964;3965;3966;3967;3968;3969;
3970;3971;3972;3973;3974;3975;3976;3977;3978;3979;
3980;3981;3982;3983;3984;3985;3986;3987;3988;3989;
3990;3991;3992;3993;3994;3995;3996;3997;3998;3999;
4000;4001;4002;4003;4004;4005;4006;4007;4008;4009;
4010;4011;4012;4013;4014;4015;4016;4017;4018;4019;
4020;4021;4022;4023;4024;4025;4026;4027;4028;4029;
4030;4031;4032;4033;4034;4035;4036;4037;4038;4039;
4040;4041;4042;4043;4044;4045;4046;4047;4048;4049;
4050;4051;4052;4053;4054;4055;4056;4057;4058;4059;
4060;4061;4062;4063;4064;4065;4066;4067;4068;4069;
4070;4071;4072;4073;4074;4075;4076;4077;4078;4079;
4080;4081;4082;4083;4084;4085;4086;4087;4088;4089;
4090;4091;4092;4093;4094;4095;4096;4097;4098;4099;
4100;4101;4102;4103;4104;4105;4106;4107;4108;4109;
4110;4111;4112;4113;4114;4115;4116;4117;4118;4119;
4120;4121;4122;4123;4124;4125;4126;4127;4128;4129;
4130;4131;4132;4133;4134;4135;4136;4137;4138;4139;
4140;4141;4142;4143;4144;4145;4146;4147;4148;4149;
4150;4151;4152;4153;4154;4155;4156;4157;4158;4159;
4160;4161;4162;4163;4164;4165;4166;4167;4168;4169;
4170;4171;4172;4173;4174;4175;4176;4177;4178;4179;
4180;4181;4182;4183;4184;4185;4186;4187;4188;4189;
4190;4191;4192;4193;4194;4195;4196;4197;4198;4199;
4200;4201;4202;4203;4204;4205;4206;4207;4208;4209;
4210;4211;4212;4213;4214;4215;4216;4217;4218;4219;
4220;4221;4222;4223;4224;4225;4226;4227;4228;4229;
4230;4231;4232;4233;4234;4235;4236;4237;4238;4239;
4240;4241;4242;4243;4244;4245;4246;4247;4248;4249;
4250;4251;4252;4253;4254;4255;4256;4257;4258;4259;
4260;4261;4262;4263;4264;4265;4266;4267;4268;4269;
4270;4271;4272;4273;4274;4275;4276;4277;4278;4279;
4280;4281;4282;4283;4284;4285;4286;4287;4288;4289;
4290;4291;4292;4293;4294;4295;4296;4297;4298;4299;
4300;4301;4302;4303;4304;4305;4306;4307;4308;4309;
4310;4311;4312;4313;4314;4315;4316;4317;4318;4319;
4320;4321;4322;4323;4324;4325;4326;4327;4328;4329;
4330;4331;4332;4333;4334;4335;4336;4337;4338;4339;
4340;4341;4342;4343;4344;4345;4346;4347;4348;4349;
4350;4351;4352;4353;4354;4355;4356;4357;4358;4359;
4360;4361;4362;4363;4364;4365;4366;4367;4368;4369;
4370;4371;4372;4373;4374;4375;4376;4377;4378;4379;
4380;4381;4382;4383;4384;4385;4386;4387;4388;4389;
4390;4391;4392;4393;4394;4395;4396;4397;4398;4399;
4400;4401;4402;4403;4404;4405;4406;4407;4408;4409;
4410;4411;4412;4413;4414;4415;4416;4417;4418;4419;
4420;4421;4422;4423;4424;4425;4426;4427;4428;4429;
4430;4431;4432;4433;4434;4435;4436;4437;4438;4439;
4440;4441;4442;4443;4444;4445;4446;4447;4448;4449;
4450;4451;4452;4453;4454;4455;4456;4457;4458;4459;
4460;4461;4462;4463;4464;4465;4466;4467;4468;4469;
4470;4471;4472;4473;4474;4475;4476;4477;4478;4479;
4480;4481;4482;4483;4484;4485;4486;4487;4488;4489;
4490;4491;4492;4493;4494;4495;4496;4497;4498;4499;
4500;4501;4502;4503;4504;4505;4506;4507;4508;4509;
4510;4511;4512;4513;4514;4515;4516;4517;4518;4519;
4520;4521;4522;4523;4524;4525;4526;4527;4528;4529;
4530;4531;4532;4533;4534;4535;4536;4537;4538;4539;
4540;4541;4542;4543;4544;4545;4546;4547;4548;4549;
4550;4551;4552;4553;4554;4555;4556;4557;4558;4559;
4560;4561;4562;4563;4564;4565;4566;4567;4568;4569;
4570;4571;4572;4573;4574;4575;4576;4577;4578;4579;
4580;4581;4582;4583;4584;4585;4586;4587;4588;4589;
4590;4591;4592;4593;4594;4595;4596;4597;4598;4599;
4600;4601;4602;4603;4604;4605;4606;4607;4608;4609;
4610;4611;4612;4613;4614;4615;4616;4617;4618;4619;
4620;4621;4622;4623;4624;4625;4626;4627;4628;4629;
4630;4631;4632;4633;4634;4635;4636;4637;4638;4639;
4640;4641;4642;4643;4644;4645;4646;4647;4648;4649;
4650;4651;4652;4653;4654;4655;4656;4657;4658;4659;
4660;4661;4662;4663;4664;4665;4666;4667;4668;4669;
4670;4671;4672;4673;4674;4675;4676;4677;4678;4679;
4680;4681;4682;4683;4684;4685;4686;4687;4688;4689;
4690;4691;4692;4693;4694;4695;4696;4697;4698;4699;
4700;4701;4702;4703;4704;4705;4706;4707;4708;4709;
4710;4711;4712;4713;4714;4715;4716;4717;4718;4719;
4720;4721;4722;4723;4724;4725;4726;4727;4728;4729;
4730;4731;4732;4733;4734;4735;4736;4737;4738;4739;
4740;4741;4742;4743;4744;4745;4746;4747;4748;4749;
4750;4751;4752;4753;4754;4755;4756;4757;4758;4759;
4760;4761;4762;4763;4764;4765;4766;4767;4768;4769;
4770;4771;4772;4773;4774;4775;4776;4777;4778;4779;
4780;4781;4782;4783;4784;4785;4786;4787;4788;4789;
4790;4791;4792;4793;4794;4795;4796;4797;4798;4799;
4800;4801;4802;4803;4804;4805;4806;4807;4808;4809;
4810;4811;4812;4813;4814;4815;4816;4817;4818;4819;
4820;4821;4822;4823;4824;4825;4826;4827;4828;4829;
4830;4831;4832;4833;4834;4835;4836;4837;4838;4839;
4840;4841;4842;4843;4844;4845;4846;4847;4848;4849;
4850;4851;4852;4853;4854;4855;4856;4857;4858;4859;
4860;4861;4862;4863;4864;4865;4866;4867;4868;4869;
4870;4871;4872;4873;4874;4875;4876;4877;4878;4879;
4880;4881;4882;4883;4884;4885;4886;4887;4888;4889;
4890;4891;4892;4893;4894;4895;4896;4897;4898;4899;
4900;4901;4902;4903;4904;4905;4906;4907;4908;4909;
4910;4911;4912;4913;4914;4915;4916;4917;4918;4919;
4920;4921;4922;4923;4924;4925;4926;4927;4928;4929;
4930;4931;4932;4933;4934;4935;4936;4937;4938;4939;
4940;4941;4942;4943;4944;4945;4946;4947;4948;4949;
4950;4951;4952;4953;4954;4955;4956;4957;4958;4959;
4960;4961;4962;4963;4964;4965;4966;4967;4968;4969;
4970;4971;4972;4973;4974;4975;4976;4977;4978;4979;
4980;4981;4982;4983;4984;4985;4986;4987;4988;4989;
4990;4991;4992;4993;4994;4995;4996;4997;4998;4999;
5000;5001;5002;5003;5004;5005;5006;5007;5008;5009;
5010;5011;5012;5013;5014;5015;5016;5017;5018;5019;
5020;5021;5022;5023;5024;5025;5026;5027;5028;5029;
5030;5031;5032;5033;5034;5035;5036;5037;5038;5039;
5040;5041;5042;5043;5044;5045;5046;5047;5048;5049;
5050;5051;5052;5053;5054;5055;5056;5057;5058;5059;
5060;5061;5062;5063;5064;5065;5066;5067;5068;5069;
5070;5071;5072;5073;5074;5075;5076;5077;5078;5079;
5080;5081;5082;5083;5084;5085;5086;5087;5088;5089;
5090;5091;5092;5093;5094;5095;5096;5097;5098;5099;
5100;5101;5102;5103;5104;5105;5106;5107;5108;5109;
5110;5111;5112;5113;5114;5115;5116;5117;5118;5119;
5120;5121;5122;5123;5124;5125;5126;5127;5128;5129;
5130;5131;5132;5133;5134;5135;5136;5137;5138;5139;
5140;5141;5142;5143;5144;5145;5146;5147;5148;5149;
5150;5151;5152;5153;5154;5155;5156;5157;5158;5159;
5160;5161;5162;5163;5164;5165;5166;5167;5168;5169;
5170;5171;5172;5173;5174;5175;5176;5177;5178;5179;
5180;5181;5182;5183;5184;5185;5186;5187;5188;5189;
5190;5191;5192;5193;5194;5195;5196;5197;5198;5199;
5200;5201;5202;5203;5204;5205;5206;5207;5208;5209;
5210;5211;5212;5213;5214;5215;5216;5217;5218;5219;
5220;5221;5222;5223;5224;5225;5226;5227;5228;5229;
5230;5231;5232;5233;5234;5235;5236;5237;5238;5239;
5240;5241;5242;5243;5244;5245;5246;5247;5248;5249;
5250;5251;5252;5253;5254;5255;5256;5257;5258;5259;
5260;5261;5262;5263;5264;5265;5266;5267;5268;5269;
5270;5271;5272;5273;5274;5275;5276;5277;5278;5279;
5280;5281;5282;5283;5284;5285;5286;5287;5288;5289;
5290;5291;5292;5293;5294;5295;5296;5297;5298;5299;
5300;5301;5302;5303;5304;5305;5306;5307;5308;5309;
5310;5311;5312;5313;5314;5315;5316;5317;5318;5319;
5320;5321;5322;5323;5324;5325;5326;5327;5328;5329;
5330;5331;5332;5333;5334;5335;5336;5337;5338;5339;
5340;5341;5342;5343;5344;5345;5346;5347;5348;5349;
5350;5351;5352;5353;5354;5355;5356;5357;5358;5359;
5360;5361;5362;5363;5364;5365;5366;5367;5368;5369;
5370;5371;5372;5373;5374;5375;5376;5377;5378;5379;
5380;5381;5382;5383;5384;5385;5386;5387;5388;5389;
5390;5391;5392;5393;5394;5395;5396;5397;5398;5399;
5400;5401;5402;5403;5404;5405;5406;5407;5408;5409;
5410;5411;5412;5413;5414;5415;5416;5417;5418;5419;
5420;5421;5422;5423;5424;5425;5426;5427;5428;5429;
5430;5431;5432;5433;5434;5435;5436;5437;5438;5439;
5440;5441;5442;5443;5444;5445;5446;5447;5448;5449;
5450;5451;5452;5453;5454;5455;5456;5457;5458;5459;
5460;5461;5462;5463;5464;5465;5466;5467;5468;5469;
5470;5471;5472;5473;5474;5475;5476;5477;5478;5479;
5480;5481;5482;5483;5484;5485;5486;5487;5488;5489;
5490;5491;5492;5493;5494;5495;5496;5497;5498;5499;
5500;5501;5502;5503;5504;5505;5506;5507;5508;5509;
5510;5511;5512;5513;5514;5515;5516;5517;5518;5519;
5520;5521;5522;5523;5524;5525;5526;5527;5528;5529;
5530;5531;5532;5533;5534;5535;5536;5537;5538;5539;
5540;5541;5542;5543;5544;5545;5546;5547;5548;5549;
5550;5551;5552;5553;5554;5555;5556;5557;5558;5559;
5560;5561;5562;5563;5564;5565;5566;5567;5568;5569;
5570;5571;5572;5573;5574;5575;5576;5577;5578;5579;
5580;5581;5582;5583;5584;5585;5586;5587;5588;5589;
5590;5591;5592;5593;5594;5595;5596;5597;5598;5599;
5600;5601;5602;5603;5604;5605;5606;5607;5608;5609;
5610;5611;5612;5613;5614;5615;5616;5617;5618;5619;
5620;5621;5622;5623;5624;5625;5626;5627;5628;5629;
5630;5631;5632;5633;5634;5635;5636;5637;5638;5639;
5640;5641;5642;5643;5644;5645;5646;5647;5648;5649;
5650;5651;5652;5653;5654;5655;5656;5657;5658;5659;
5660;5661;5662;5663;5664;5665;5666;5667;5668;5669;
5670;5671;5672;5673;5674;5675;5676;5677;5678;5679;
5680;5681;5682;5683;5684;5685;5686;5687;5688;5689;
5690;5691;5692;5693;5694;5695;5696;5697;5698;5699;
5700;5701;5702;5703;5704;5705;5706;5707;5708;5709;
5710;5711;5712;5713;5714;5715;5716;5717;5718;5719;
5720;5721;5722;5723;5724;5725;5726;5727;5728;5729;
5730;5731;5732;5733;5734;5735;5736;5737;5738;5739;
5740;5741;5742;5743;5744;5745;5746;5747;5748;5749;
5750;5751;5752;5753;5754;5755;5756;5757;5758;5759;
5760;5761;5762;5763;5764;5765;5766;5767;5768;5769;
5770;5771;5772;5773;5774;5775;5776;5777;5778;5779;
5780;5781;5782;5783;5784;5785;5786;5787;5788;5789;
5790;5791;5792;5793;5794;5795;5796;5797;5798;5799;
5800;5801;5802;5803;5804;5805;5806;5807;5808;5809;
5810;5811;5812;5813;5814;5815;5816;5817;5818;5819;
5820;5821;5822;5823;5824;5825;5826;5827;5828;5829;
5830;5831;5832;5833;5834;5835;5836;5837;5838;5839;
5840;5841;5842;5843;5844;5845;5846;5847;5848;5849;
5850;5851;5852;5853;5854;5855;5856;5857;5858;5859;
5860;5861;5862;5863;5864;5865;5866;5867;5868;5869;
5870;5871;5872;5873;5874;5875;5876;5877;5878;5879;
5880;5881;5882;5883;5884;5885;5886;5887;5888;5889;
5890;5891;5892;5893;5894;5895;5896;5897;5898;5899;
5900;5901;5902;5903;5904;5905;5906;5907;5908;5909;
5910;5911;5912;5913;5914;5915;5916;5917;5918;5919;
5920;5921;5922;5923;5924;5925;5926;5927;5928;5929;
5930;5931;5932;5933;5934;5935;5936;5937;5938;5939;
    };
   };
   DataTable @["SlotEpochOutputData"] {
    name="SlotEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1472754031419754;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [150] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1472754031419754;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [150] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
      };
     };
     float_Data @["avg_sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_124";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1472754031419754;
	val_type_fixed=0;
       };
      };
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [150] 2.609426;1.5287158;0.94249511;0.48676977;0.49306193;0.37589213;0.22162923;0.15045092;0.098839603;0.069785051;
0.040275149;0.12367451;0.14898865;0.090231419;0.051763557;0.01346948;0.025878498;0.062495299;0.025709555;0.024532722;
0.046221193;0.06486699;0.034697194;0.066911913;0.045079187;0.022268077;0.0090831276;0;0.058219515;0.020243179;
0;0;0;0.026876036;0.078507274;0.024057578;0.025878135;0.039981145;0;0.030203938;
0;0;0;0.048112631;0.035277847;0.060585894;0.027468793;0.059019186;0;0.026797961;
0.029995633;0;0.030120667;0;0;0;0.039029166;0.029313751;0.024244262;0.030620731;
0.030055888;0.028689075;0.030124823;0;0.029951459;0;0;0.0084460275;0.030114822;0;
0.055594206;0;0.025419526;0;0;0.059835032;0.029240351;0;0.030645989;0.044188287;
0.015625;0;0.029522544;0;0.058777574;0.015625;0.04689496;0;0.047569595;0.0576603;
0.075739093;0.058073852;0.028262205;0;0.0091422051;0.030090503;0.089898109;0.027465634;0;0.030228874;
0.050449409;0.0088469237;0.015625;0.0040623657;0.03002567;0.070793591;0;0.065503418;0;0.015625;
0.029735357;0;0.057514481;0.054229937;0.029810563;0;0.016069902;0;0.015625;0.029586993;
0;0;0.029640712;0;0.060021058;0.0063270549;0;0.0061437218;0.020969298;0.015625;
0.030226123;0.029247943;0;0.028826844;0;0.015625;0.044503827;0;0;0.030113773;
0.027190965;0.015625;0;0;0;0.015625;0.059461877;0.060366958;0.054282136;0;
      };
     };
     float_Data @["cnt_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_125";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1472754031419754;
	val_type_fixed=0;
       };
      };
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [150] 63;54;43;29;28;20;13;10;7;5;
2;6;8;6;3;2;3;4;2;3;
5;4;3;3;3;1;1;0;2;1;
0;0;0;1;3;1;1;2;0;1;
0;0;0;2;2;2;1;2;0;1;
1;0;1;0;0;0;2;1;1;1;
1;1;1;0;1;0;0;1;1;0;
2;0;1;0;0;2;1;0;1;2;
1;0;1;0;2;1;2;0;2;2;
4;2;1;0;1;1;4;1;0;1;
2;1;1;1;1;4;0;3;0;1;
1;0;2;2;1;0;1;0;1;1;
0;0;1;0;2;1;0;1;2;1;
1;1;0;1;0;1;2;0;0;1;
1;1;0;0;0;1;2;2;2;0;
      };
     };
     float_Data @["avg_ext_rew"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_126";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1472754031419754;
	val_type_fixed=0;
       };
      };
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [150] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @["avg_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_127";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1472754031419754;
	val_type_fixed=0;
       };
      };
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [150] 33.15625;30.109375;30.359375;27.453125;26.921875;25;23.34375;22.875;21.296875;20.609375;
19.96875;19.984375;20.09375;19.46875;18.78125;18.6875;18.484375;18.609375;18.1875;18.65625;
18;18.1875;18.203125;17.640625;17.703125;17.6875;17.53125;17.5625;17.546875;17.296875;
17.234375;17.203125;17.4375;17.546875;17.8125;17.171875;17.5625;17.203125;16.921875;17.0625;
17;17.046875;17.25;17.765625;17.046875;17.046875;16.90625;17.09375;16.921875;16.84375;
16.90625;16.75;17.03125;16.921875;16.984375;17.46875;17.453125;17.09375;17.015625;16.90625;
16.75;16.9375;17.484375;16.796875;17.03125;16.828125;17.234375;18.140625;16.9375;16.84375;
16.921875;16.734375;17.015625;16.8125;16.78125;16.9375;16.953125;16.859375;17;17.25;
16.96875;16.8125;17.078125;17.0625;17.3125;17.296875;17.34375;17.03125;17.34375;17.25;
17.625;17.328125;17.109375;17.03125;17.1875;16.84375;17.65625;17.296875;17.09375;16.921875;
17.25;16.8125;16.921875;16.953125;16.84375;17.5625;16.703125;16.953125;16.859375;17.015625;
16.984375;16.640625;16.890625;17.40625;16.46875;16.546875;16.6875;16.40625;16.90625;16.765625;
16.5625;16.640625;16.734375;16.8125;16.96875;16.28125;16.296875;16.390625;16.890625;16.734375;
16.40625;16.96875;16.3125;16.625;16.359375;16.765625;16.8125;16.453125;16.40625;16.328125;
16.734375;16.796875;16.515625;16.46875;16.578125;16.5625;16.78125;16.8125;16.734375;16.546875;
      };
     };
     float_Data @["epoch_time_tot"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_128";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1472754031419754;
	val_type_fixed=0;
       };
      };
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [150] 0.54000002;0.38999999;0.40000001;0.38;0.49000001;0.36000001;0.34;0.33000001;0.31999999;0.31999999;
0.31;0.31;0.31;0.31;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;
0.28999999;0.30000001;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.28;0.40000001;0.28999999;
0.28999999;0.34999999;0.38999999;0.38999999;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.38999999;
0.28999999;0.38;0.30000001;0.36000001;0.28;0.28;0.28999999;0.28999999;0.28999999;0.28999999;
0.36000001;0.31;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28;0.28;
0.28;0.28999999;0.28999999;0.28;0.28999999;0.28;0.28999999;0.30000001;0.28;0.28;
0.28;0.28;0.28999999;0.28999999;0.28999999;0.28;0.28999999;0.28;0.28;0.28;
0.28;0.28;0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28999999;0.28999999;
0.28999999;0.28999999;0.28999999;0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28;
0.28;0.28;0.28;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28;
0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28;0.28;0.28999999;0.28;
0.28;0.28;0.28;0.28;0.28;0.28;0.28;0.28;0.28999999;0.28;
0.28;0.28;0.27000001;0.28;0.28;0.28;0.28;0.28;0.28;0.28;
0.28999999;0.28;0.28;0.28;0.28;0.28;0.28999999;0.30000001;13.1;0.38;
      };
     };
     float_Data @["epoch_time_usr"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_129";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1472754031419754;
	val_type_fixed=0;
       };
      };
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [150] 0.47;0.34999999;0.34999999;0.34;0.41999999;0.31;0.30000001;0.30000001;0.28;0.28;
0.28;0.27000001;0.27000001;0.27000001;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;
0.25;0.25999999;0.25999999;0.25;0.25999999;0.25;0.25;0.25999999;0.34;0.25;
0.25999999;0.30000001;0.31999999;0.34;0.25;0.25;0.25999999;0.25;0.25;0.34;
0.25;0.33000001;0.25999999;0.31;0.25999999;0.25;0.25;0.25;0.25;0.25;
0.30000001;0.28;0.25999999;0.25;0.25;0.25999999;0.25999999;0.25;0.25;0.25;
0.25;0.25;0.25999999;0.25;0.25;0.25;0.25;0.27000001;0.25;0.25;
0.25;0.25;0.25999999;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.25;0.25999999;0.25999999;0.25999999;0.25999999;0.25;0.25;0.25;
0.25999999;0.25;0.25;0.25;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.23999999;0.23999999;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.23999999;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.23999999;0.25;0.25;0.25;0.25;0.25999999;1.95;0.33000001;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [150] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  Program_Group @.gp["LeabraAll_Std"] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @["LeabraBatch"] {
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=.projects["hip_cat"].networks["WPT_lesions"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["hip_cat"].data.gp["InputData"]["WPT_train"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["batch"] {
      name="batch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @["init_batch"] {
      name="init_batch";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="initialize batch counter at start of run -- turn off if using \"parallel batch\" mode to run different batches on different processes";
      init_from=NULL;
     };
     ProgVar @["max_batch"] {
      name="max_batch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
      local_ctr_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="init_batch";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       NetCounterInit @[0] {
	desc="initializes local batch counter and batch field on network";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
     };
     Else @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      else_code {
       name="else_code";
       el_typ=ProgCode;
       el_def=0;
       MemberAssign @[0] {
	desc="just set directly to current batch value";
	flags=0;
	orig_prog_code=;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	path="batch";
	expr {
	 expr="batch";
	};
	update_after=0;
       };
      };
     };
     WhileLoop @[2] {
      desc="the main loop over training runs";
      flags=0;
      orig_prog_code=;
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=int;
	  type="int";
	  name="batch";
	  required=1;
	  def_val=;
	  expr {
	   expr="batch";
	  };
	 };
	};
	target=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$$;
    step_n=1;
   };
   Program @["LeabraTrain"] {
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=0;
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed @["rnd_seed"] {
      name="rnd_seed";
      seed{ 1247618706;1114235648;2135496807;145700417;418394281;23897010;1163188032;275887532;-557205276;1541050924;816890059;-1233800414;1596705708;-1979584434;510687754;-1040875519;1063949018;160995859;-1372719983;67709202;907400750;1233002043;-930810120;-377568226;-1899895671;-107311632;-1785328647;-2005332702;2074627516;-1221865298;-72785926;-1711399332;1007962422;1470679151;-874778232;1624682234;-986424277;940688365;-128507481;-1227028005;1080624069;1724801149;-193827562;-2062006668;897774266;1269124495;1436194612;-10746600;-2050591017;414703418;-1181279212;591387361;-59063303;589700055;-1177548023;-1773519218;-862480012;1060191020;1967842454;1325530830;-1999679769;-1354388074;-1620201566;-425530785;1714795148;1838671586;-1682795823;97245314;601357710;-1849030837;-1583746797;-415943428;-1202495517;-497337074;1225132907;325335837;603510717;-20167970;-429283713;1328220987;194213938;-572576245;-1696108166;-1286538069;1254694913;58302549;-1273184545;-444165496;944845871;-297812508;-1055421571;-1067288815;1913625718;-702191024;1861115421;-1221845653;-100414515;640853671;800857925;2027373468;-177753515;2025022035;-425612096;-2137881514;820717964;1490505893;-1416194786;737726583;1744498271;2082625923;-1509825864;740949457;35454181;-553036854;319004607;1663319502;-2029442529;-1863179546;-395327382;1295598308;-1935216175;1980519352;-2118514313;1537759396;1230915221;-1006433055;-1454962776;-1178206063;1232201087;1546778935;-1232127792;-777532067;-911387494;802636258;928837808;1766401527;-2132369258;452497133;-1928840949;1711493656;-789723799;-900031137;1903841754;-603095306;-554224583;672179571;-1052716559;-997501171;1710348058;-364621508;-920140431;595126417;991976141;-1678342022;-762048526;1820935088;-851939727;1199347095;1062095564;-75583717;-296293096;1827405640;196659567;-641933202;446292133;-1737429314;1802816722;-2072593690;420987036;-1330218443;-353982627;1478710977;245234284;-1203005111;-1466811;-657921971;1303864694;-924272732;1202312341;1758466839;-2115482014;926436501;-565906305;-1754345053;-1269899715;-3774828;-1739699891;1363620838;187636191;1736871096;-1099725125;-1313068868;373014966;-734538865;1930453758;1936361054;1267260223;822390331;2142458125;-1619892605;1518631597;-2036436315;2121243565;1846245287;-619181238;1770358170;560638453;1169959800;1926228109;-78795763;1394237528;359048432;575898500;-2064611351;118449037;976469112;1837995056;-1233080018;1204450102;84468878;-424400158;-2010229598;1441858558;-1825371270;1418641208;120976222;119034616;-1245219653;-1305014559;-219849868;1185990105;109487903;1214809891;-1954774189;1839016159;535948929;77406929;156735074;62310296;-585820185;1515680228;699825482;-1022228188;1360297046;234921543;585331192;964800462;-840852675;1556639342;-1221199420;-2023718376;-1788264643;-1810388009;-1491154682;-1747684462;-2120636209;1989168865;-1455095967;1956232721;969837907;962866627;-984061452;1180171897;1831706207;2035403294;1028150852;-275747362;198286908;2063960760;1467727114;-1958119067;197526962;-569736630;-1780647714;-1005425698;1711854660;-453530291;-2036850981;-428520013;313186183;-1552988069;-1894896330;859089566;-1251483791;-927681413;1931963509;1858330338;1640197038;-326949845;1529785577;-1907728214;1974078315;1947745270;-1654138728;-1860640792;1711968889;-1948908928;-1672179597;-1916766529;-408617284;1000716679;1063023216;-641263778;1452801504;1576768501;-1306856331;-1799937243;404864662;308836450;-833490465;-1379456766;1132736055;1801134726;102752124;-443512538;1198385620;1095974725;-1114678511;47258301;2063184592;887908021;-1892785238;-365282678;-133469616;-458465533;265845829;-1664289409;-22560616;-427888273;154930405;-1109744477;1438916048;-955540031;-414183209;23337202;-462071095;-1553404670;440042065;1695138887;-53614863;1450287310;-1551091200;-9701856;189126694;-1002135978;1478555106;-439582999;1241468333;-2114014664;-294429633;-1518108406;-1809370745;-476465191;234828899;1265477489;1156448403;741498110;378838939;860482701;-1080243704;1061228890;946537451;-960606175;-890908459;122153946;-947013521;764383242;-167825567;1102521626;1473910808;-1801460657;-295876396;-1465266873;582675118;-1911048676;1654843725;-1976321932;123268615;-207050435;751760625;-850223727;518606359;-478732399;-220030951;931261890;-959602421;1099289002;1454193914;1993892747;-1586880265;-1120592081;-371236024;743592223;-709060156;1780821005;160484935;-596221297;390450889;-38590501;787042759;-1891515373;1062630726;-20399056;-1689350990;1746383620;-1052094578;-1346447049;-990113664;1407033415;-1692421321;1826361987;306766053;-111261451;-1644662613;-1477581493;-1584494484;658551558;-1988175617;-870972813;-1660098605;1625116697;-137006307;-811369860;1434864834;-94001769;650283277;-1586296629;1268058616;-437112343;1789521151;-1479512092;-664257171;1073880086;-629250620;-1798920139;-806957466;-884573043;995697595;-60347011;847209069;-991351879;578472987;1248459617;1928760987;734834302;-1097578637;718449235;1317576574;163243483;-2000952280;1952546900;1987584076;1690891557;846527737;2052591875;-1259943535;1743926215;-1834130201;128605475;-2113700966;-1448338236;1572295147;160402720;-200749201;980329324;1259292525;1312029550;1612290974;-205816177;92658449;-108885877;1732814719;1572766862;-452733628;815211997;1408251660;-1466519811;-2079161480;335555328;672397535;1646889179;-1433032221;-165908313;-1778633065;2143963053;819811521;1995750155;1005332185;-1595640187;-280886228;-1433284747;869173982;1826593154;334736796;-699401094;1325031084;-1205014223;-751536624;-1519926671;-1641790382;1796064644;499522670;-211675300;1003360626;1908467186;-372324904;-1284291487;516421642;686307310;1494118627;1263107368;-1072147412;-269525109;-1068991831;-1193058028;-1874586191;1985895587;322650095;-551542191;-1035375007;1337524402;-29224024;1514489729;-1525106805;767015961;232102122;-1434415008;1554737849;-691694424;-1389351800;-1952616828;-487828751;1547582862;-1234644352;-1450139296;236658625;1593365053;-1336864827;1407040157;-1449386585;-503840459;-1342676373;1451755147;1425043601;50952944;-501746991;1076048124;906279668;-459909016;865019740;-686897806;-762027844;-1249287037;1367650830;1594706197;199592719;-1436293609;-702675594;217499223;1306644866;-1848916513;928208738;693300700;431615;920102607;-285042464;-1576218939;1697060282;1328130047;1179137903;1277804192;-2048696128;-20250426;1256439030;-893731151;983072889;1245344509;92027821;1135485571;-1380372083;1417615023;1611207403;-82201960;401960046;702326702;-1752414225;-799983669;-1923281869;-1835857247;-1826000996;-244934236;-851050446;537874085;-1717348758;1132904794;1864433210;1471079067;1501156119;-1935601660;-1521972555;115059595;-1740303568;-1461430508;2118853641;1713734020;96422102;-397654836;-1399656694;-1592027000;-1203041581;1444683735;754718673;2062237913;1248604061;1600997106;-1782969530;-1588996036;948797663;-1545326235;-1790402802;739782184;2035654709;49285874;53335529;      };
      mti=624;
      is_gauss_double_cached=0;
      cached_gauss_double=0;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["RndInitType"] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["OLD_SEED"] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @["NEW_SEED"] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=.projects["hip_cat"].networks["WPT"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_train"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @["no_prompts"] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
     ProgVar @["batch"] {
      name="batch";
      var_type=T_Int;
      int_val=499;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["max_epoch"] {
      name="max_epoch";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @["error_counter"] {
      name="error_counter";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="number of trial with sse smaller than set criterion";
      init_from=NULL;
     };
     ProgVar @["current_sse"] {
      name="current_sse";
      var_type=T_Real;
      real_val=0.3616869151592255;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      name="epoch";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @["MSP_learning_rate"] {
      name="MSP_learning_rate";
      var_type=T_Real;
      real_val=0.002;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="default .02";
      init_from=NULL;
     };
     ProgVar @["MSP_sparse_projs"] {
      name="MSP_sparse_projs";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["CA1_prop_act"] {
      name="CA1_prop_act";
      var_type=T_Real;
      real_val=0.25;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="default .25";
      init_from=NULL;
     };
     ProgVar @["train_mode"] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @["rnd_init"] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].types["RndInitType"]$$;
       value=1;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @["err_stopcrit_sse"] {
      name="err_stopcrit_sse";
      var_type=T_Real;
      real_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (mean error)
goes <= this value, stop training (when set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @["rnd_seed"] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seed"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
     ProgVar @["train_timer"] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["hip_cat"].networks["WPT"].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["output_table"] {
      name="output_table";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["hip_cat"].data.gp["OutputData"]["TrialTestOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["test_data"] {
      name="test_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["hip_cat"].data.gp["InputData"]["WPT_test"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["fname"] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["fname_prefix"] {
      name="fname_prefix";
      var_type=T_String;
      string_val="output_acts";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["runtest"] {
      name="runtest";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["no_prompts"]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$$;
      expr {
       expr="network.train_time";
      };
     };
     If @[3] {
      desc="initialize random seed (either old or new)";
      flags=0;
      orig_prog_code=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     Else @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      else_code {
       name="else_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[5] {
      desc="don't initialize weights without checking";
      flags=0;
      orig_prog_code=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="do a build to get different projections each time";
	flags=NON_STD;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Build;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       MethodCall @[1] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[2] {
	desc=;
	flags=0;
	orig_prog_code=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	my_mask=NULL;
	debug_level=NULL;
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     AssignExpr @[1] {
      desc="get our pointer to the network training time object";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[2] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[3] {
      desc="set network's training mode to our local value";
      flags=0;
      orig_prog_code=;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="do a build to get different projections each time";
	flags=NON_STD;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Build;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       MethodCall @[1] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[2] {
	desc=;
	flags=0;
	orig_prog_code=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	my_mask=NULL;
	debug_level=NULL;
       };
      };
     };
     AssignExpr @[5] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[6] {
      desc="main loop over epochs of training";
      flags=0;
      orig_prog_code=;
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       If @[1] {
	desc=;
	flags=OFF;
	orig_prog_code=;
	cond {
	 expr="runtest";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["output_table"]$$;
	  method=DataTable::ResetData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 ProgramCall @[1] {
	  desc="record the initial response";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name="prog_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="test_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="cycle_stop";
	    required=1;
	    def_val=;
	    expr {
	     expr="20";
	    };
	   };
	  };
	  target=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
	  targ_ld_init="*LeabraEpoch*";
	 };
	 AssignExpr @[2] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$$;
	  expr {
	   expr="fname_prefix";
	  };
	 };
	 VarIncr @[3] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="\"_batch\"";
	  };
	 };
	 VarIncr @[4] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="batch";
	  };
	 };
	 VarIncr @[5] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="\"_epoch\"";
	  };
	 };
	 VarIncr @[6] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="epoch";
	  };
	 };
	 VarIncr @[7] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="\"_20cyc\"";
	  };
	 };
	 MethodCall @[8] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["output_table"]$;
	  method=DataTable::ExportData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="fname";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable::Delimiters;
	    type="DataTable::Delimiters";
	    name="delim";
	    required=0;
	    def_val="DataTable::COMMA";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="quote_str";
	    required=0;
	    def_val="true";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[3] {
	    arg_type=bool;
	    type="bool";
	    name="headers";
	    required=0;
	    def_val="true";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	 MethodCall @[9] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["output_table"]$;
	  method=DataTable::ResetData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 ProgramCall @[10] {
	  desc="record the settled response";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name="prog_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="test_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="cycle_stop";
	    required=1;
	    def_val=;
	    expr {
	     expr="80";
	    };
	   };
	  };
	  target=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
	  targ_ld_init="*LeabraEpoch*";
	 };
	 AssignExpr @[11] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="fname_prefix";
	  };
	 };
	 VarIncr @[12] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="\"_batch\"";
	  };
	 };
	 VarIncr @[13] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="batch";
	  };
	 };
	 VarIncr @[14] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="\"_epoch\"";
	  };
	 };
	 VarIncr @[15] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="epoch";
	  };
	 };
	 VarIncr @[16] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
	  expr {
	   expr="\"_80cyc\"";
	  };
	 };
	 MethodCall @[17] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["output_table"]$;
	  method=DataTable::ExportData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="fname";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable::Delimiters;
	    type="DataTable::Delimiters";
	    name="delim";
	    required=0;
	    def_val="DataTable::COMMA";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="quote_str";
	    required=0;
	    def_val="true";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[3] {
	    arg_type=bool;
	    type="bool";
	    name="headers";
	    required=0;
	    def_val="true";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	};
       };
       ProgramCall @[2] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="batch";
	  required=1;
	  def_val=;
	  expr {
	   expr="batch";
	  };
	 };
	};
	target=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       AssignExpr @[3] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["current_sse"]$$;
	expr {
	 expr="network.sse";
	};
       };
       NetCounterIncr @[4] {
	desc="increment the epoch counter (locally and on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
	counter=Network::epoch;
	update_after=1;
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[7] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$;
    step_n=1;
   };
   Program @["LeabraEpoch"] {
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_train"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["batch"] {
      name="batch";
      var_type=T_Int;
      int_val=499;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["data_loop_order"] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=85;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["hip_cat"].data.gp["OutputData"]["TrialOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["hip_cat"].networks["WPT"].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=1000001;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @["max_num_trials"] {
      name="max_num_trials";
      var_type=T_Int;
      int_val=350;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["when_to_test"] {
      name="when_to_test";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set to 4 for RndDots, 10 for SAT and WPT networks";
      init_from=NULL;
     };
     ProgVar @["trial_counter_for_test"] {
      name="trial_counter_for_test";
      var_type=T_Int;
      int_val=9;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="needed to count number of trials and run test after every 10th trial";
      init_from=NULL;
     };
     ProgVar @["output_table"] {
      name="output_table";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["OutputData"]["TrialTestOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["test_data"] {
      name="test_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_test"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["fname"] {
      name="fname";
      var_type=T_String;
      string_val="output_acts_batch499_epoch0_trial80_120cyc";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["fname_prefix"] {
      name="fname_prefix";
      var_type=T_String;
      string_val="output_acts";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy";
      init_from=NULL;
     };
     ProgVar @["runtest"] {
      name="runtest";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @["correct_trials_counter"] {
      name="correct_trials_counter";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of trial with sse smaller than set criterion";
      init_from=NULL;
     };
     ProgVar @["min_total_num_trials"] {
      name="min_total_num_trials";
      var_type=T_Int;
      int_val=25;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="minimum number of trials before the netowrk can stop";
      init_from=NULL;
     };
     ProgVar @["threshold_correct_trials_stopcrit"] {
      name="threshold_correct_trials_stopcrit";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of consecutive trials below sse-threshold needed to stop the network";
      init_from=NULL;
     };
     ProgVar @["threshold_sse_stopcrit"] {
      name="threshold_sse_stopcrit";
      var_type=T_Real;
      real_val=1.2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (mean error)
goes <= this value, stop training (when set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     NetCounterInit @[1] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$$;
      local_ctr_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[2] {
      desc=;
      flags=NEW_EL;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_counter_for_test"]$$;
      expr {
       expr="when_to_test -1";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=OFF|NEW_EL;
      orig_prog_code=;
      result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_counter_for_test"]$;
      expr {
       expr="9";
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=NEW_EL;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["correct_trials_counter"]$$;
      expr {
       expr="0";
      };
     };
     AssignExpr @[5] {
      desc="get pointer to epoch timer object on network";
      flags=NEW_EL;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch"]$$;
      expr {
       expr="network.epoch";
      };
     };
     MemberAssign @[1] {
      desc="set back to training mode";
      flags=0;
      orig_prog_code=;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
     NetCounterInit @[2] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       PrintVar @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	message=;
	print_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_counter_for_test"]$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
	my_mask=NULL;
	debug_level=NULL;
       };
       PrintVar @[2] {
	desc=;
	flags=0;
	orig_prog_code=;
	message=;
	print_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
	my_mask=NULL;
	debug_level=NULL;
       };
       PrintVar @[3] {
	desc=;
	flags=0;
	orig_prog_code=;
	message=;
	print_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
	my_mask=NULL;
	debug_level=NULL;
       };
       PrintVar @[4] {
	desc=;
	flags=0;
	orig_prog_code=;
	message=;
	print_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["correct_trials_counter"]$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
	my_mask=NULL;
	debug_level=NULL;
       };
       VarIncr @[5] {
	desc=;
	flags=NEW_EL;
	orig_prog_code=;
	var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_counter_for_test"]$;
	expr {
	 expr="1";
	};
       };
       If @[6] {
	desc=;
	flags=NEW_EL;
	orig_prog_code=;
	cond {
	 expr="trial_counter_for_test == when_to_test";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=NEW_EL;
	  orig_prog_code=;
	  result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_counter_for_test"]$;
	  expr {
	   expr="0";
	  };
	 };
	 If @[1] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="runtest";
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=NULL;
	    obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["output_table"]$$;
	    method=DataTable::ResetData;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	   };
	   ProgramCall @[1] {
	    desc="record the initial response";
	    flags=0;
	    orig_prog_code=;
	    prog_args {
	     name="prog_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=LeabraNetwork;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      expr {
	       expr="network";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable;
	      type="DataTable*";
	      name="input_data";
	      required=1;
	      def_val=;
	      expr {
	       expr="test_data";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=int;
	      type="int";
	      name="cycle_stop";
	      required=1;
	      def_val=;
	      expr {
	       expr="45";
	      };
	     };
	    };
	    target=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
	    targ_ld_init="*LeabraEpoch*";
	   };
	   AssignExpr @[2] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$$;
	    expr {
	     expr="fname_prefix";
	    };
	   };
	   VarIncr @[3] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="\"_batch\"";
	    };
	   };
	   VarIncr @[4] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="batch";
	    };
	   };
	   VarIncr @[5] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="\"_epoch\"";
	    };
	   };
	   VarIncr @[6] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="epoch";
	    };
	   };
	   VarIncr @[7] {
	    desc=;
	    flags=NEW_EL;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="\"_trial\"";
	    };
	   };
	   VarIncr @[8] {
	    desc=;
	    flags=NEW_EL;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="trial";
	    };
	   };
	   VarIncr @[9] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="\"_45cyc\"";
	    };
	   };
	   MethodCall @[10] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=NULL;
	    obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["output_table"]$;
	    method=DataTable::ExportData;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="fname";
	      required=0;
	      def_val="\"\"";
	      expr {
	       expr="fname";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable::Delimiters;
	      type="DataTable::Delimiters";
	      name="delim";
	      required=0;
	      def_val="DataTable::COMMA";
	      expr {
	       expr=;
	      };
	     };
	     ProgArg @[2] {
	      arg_type=bool;
	      type="bool";
	      name="quote_str";
	      required=0;
	      def_val="true";
	      expr {
	       expr=;
	      };
	     };
	     ProgArg @[3] {
	      arg_type=bool;
	      type="bool";
	      name="headers";
	      required=0;
	      def_val="true";
	      expr {
	       expr=;
	      };
	     };
	    };
	   };
	   MethodCall @[11] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=NULL;
	    obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["output_table"]$;
	    method=DataTable::ResetData;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	   };
	   ProgramCall @[12] {
	    desc="record the settled response";
	    flags=0;
	    orig_prog_code=;
	    prog_args {
	     name="prog_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=LeabraNetwork;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      expr {
	       expr="network";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable;
	      type="DataTable*";
	      name="input_data";
	      required=1;
	      def_val=;
	      expr {
	       expr="test_data";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=int;
	      type="int";
	      name="cycle_stop";
	      required=1;
	      def_val=;
	      expr {
	       expr="120";
	      };
	     };
	    };
	    target=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
	    targ_ld_init="*LeabraEpoch*";
	   };
	   AssignExpr @[13] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="fname_prefix";
	    };
	   };
	   VarIncr @[14] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="\"_batch\"";
	    };
	   };
	   VarIncr @[15] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="batch";
	    };
	   };
	   VarIncr @[16] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="\"_epoch\"";
	    };
	   };
	   VarIncr @[17] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="epoch";
	    };
	   };
	   VarIncr @[18] {
	    desc=;
	    flags=NEW_EL;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="\"_trial\"";
	    };
	   };
	   VarIncr @[19] {
	    desc=;
	    flags=NEW_EL;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="trial";
	    };
	   };
	   VarIncr @[20] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["fname"]$;
	    expr {
	     expr="\"_120cyc\"";
	    };
	   };
	   MethodCall @[21] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=NULL;
	    obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["output_table"]$;
	    method=DataTable::ExportData;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="fname";
	      required=0;
	      def_val="\"\"";
	      expr {
	       expr="fname";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable::Delimiters;
	      type="DataTable::Delimiters";
	      name="delim";
	      required=0;
	      def_val="DataTable::COMMA";
	      expr {
	       expr=;
	      };
	     };
	     ProgArg @[2] {
	      arg_type=bool;
	      type="bool";
	      name="quote_str";
	      required=0;
	      def_val="true";
	      expr {
	       expr=;
	      };
	     };
	     ProgArg @[3] {
	      arg_type=bool;
	      type="bool";
	      name="headers";
	      required=0;
	      def_val="true";
	      expr {
	       expr=;
	      };
	     };
	    };
	   };
	  };
	 };
	};
       };
       ProgramCall @[7] {
	desc="run the trial program, passing network and input_data";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[8] {
	desc=;
	flags=NEW_EL;
	orig_prog_code=;
	cond {
	 expr="network.sse < threshold_sse_stopcrit";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  desc="if sse is below the specified criterion, increase the counter";
	  flags=NEW_EL;
	  orig_prog_code=;
	  var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["correct_trials_counter"]$;
	  expr {
	   expr="1";
	  };
	 };
	};
       };
       Else @[9] {
	desc="reset the counter";
	flags=NEW_EL;
	orig_prog_code=;
	else_code {
	 name="else_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=NEW_EL;
	  orig_prog_code=;
	  result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["correct_trials_counter"]$;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       If @[10] {
	desc=;
	flags=NEW_EL;
	orig_prog_code=;
	cond {
	 expr="correct_trials_counter == threshold_correct_trials_stopcrit & trial>min_total_num_trials";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc="cut off epoch here";
	  flags=0;
	  orig_prog_code=;
	  result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$;
	  expr {
	   expr="1000000";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=NEW_EL;
	  orig_prog_code=;
	  result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_counter_for_test"]$;
	  expr {
	   expr="9";
	  };
	 };
	};
       };
       If @[11] {
	desc=;
	flags=0;
	orig_prog_code=;
	cond {
	 expr="data_loop_index ==  max_num_trials";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc="cut off epoch here";
	  flags=0;
	  orig_prog_code=;
	  result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$;
	  expr {
	   expr="1000000";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=NEW_EL;
	  orig_prog_code=;
	  result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_counter_for_test"]$;
	  expr {
	   expr="9";
	  };
	 };
	};
       };
      };
      data_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$$;
      index_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$;
      order_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_order"]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     MethodCall @[8] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      orig_prog_code="network.Compute_StableWeights()";
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_StableWeights;
      meth_args {
       name="ProgArg_List_0";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[10] {
      desc=;
      flags=NON_STD;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_AvgAbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[11] {
      desc="done with the computation in the epoch -- record time it took";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[12] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$$;
    step_n=1;
   };
   Program @["LeabraTrial"] {
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_train"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["phase_no"] {
      name="phase_no";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      orig_prog_code=;
      network_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$$;
      local_ctr_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     NetCounterInit @[1] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[2] {
      desc="initializes various counters at start of trial";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
	local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc="special for adapting netin";
      flags=NON_STD;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Compute_AbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[6] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[7] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      update_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraSettle"] {
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_train"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      name="cycle";
      var_type=T_Int;
      int_val=20;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["min_cycles"] {
      name="min_cycles";
      var_type=T_Int;
      int_val=50;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$$;
      local_ctr_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=0;
	orig_prog_code=;
	result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["min_cycles"]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
     };
     Else @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      else_code {
       name="else_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=0;
	orig_prog_code=;
	result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["min_cycles"]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[6] {
      desc="the main loop over cycles of updating";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
	local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[7] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[8] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[9] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[10] {
      desc="update network views, if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      update_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraCycle"] {
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$;
      update_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=10;
   };
   Program @["ApplyInputs"] {
    name="ApplyInputs";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=$.projects["hip_cat"].data.gp["InputData"]["WPT_train"]$;
      network=$.projects["hip_cat"].networks["WPT"]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="EC_out";
	net_target=LAYER;
	layer_name="EC_out";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_train"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["ApplyInputs"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrialMonitor"] {
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["phase_no"] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["minus_cycles"] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act"] {
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="acts.avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["hip_cat"].networks["WPT"]$;
      data=$.projects["hip_cat"].data.gp["OutputData"]["TrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraEpochMonitor"] {
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["hip_cat"].networks["WPT"]$;
      data=.projects["hip_cat"].data.gp["OutputData"]["EpochOutputData"]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["OutputData"]["EpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["hip_cat"].networks["WPT"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["SaveWeights"] {
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @["wts_subdir"] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @["fname"] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @["epoch_str"] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["batch_str"] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["final_tag"] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=0;
      orig_prog_code=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["batch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["epoch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["final_tag"]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["fname"]$$;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp["LeabraAll_Test"] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @["LeabraEpochTest"] {
    name="LeabraEpochTest";
    short_nm="EpcTst";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_test"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["cycle_stop"] {
      name="cycle_stop";
      var_type=T_Int;
      int_val=120;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["data_loop_order"] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=41;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["low_inhib_test"] {
      name="low_inhib_test";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["OutputData"]["TrialTestOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["last_trial_mon"] {
      name="last_trial_mon";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["hip_cat"].data.gp["OutputData"]["LastTestOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["hip_cat"].networks["WPT"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=42;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @["ec_out_RndDots"] {
      name="ec_out_RndDots";
      var_type=T_Object;
      object_type=ECoutLayerSpec;
      object_val=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ec_in_RndDots"] {
      name="ec_in_RndDots";
      var_type=T_Object;
      object_type=ECinLayerSpec;
      object_val=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$$;
      local_ctr_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      desc="set to testing mode";
      flags=NEW_EL;
      orig_prog_code=;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     If @[2] {
      desc="allow more items to be active at test";
      flags=OFF;
      orig_prog_code=;
      cond {
       expr="low_inhib_test";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MemberAssign @[0] {
	desc=;
	flags=NEW_EL;
	orig_prog_code=;
	obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["ec_in_RndDots"]$$;
	path="kwta.k";
	expr {
	 expr="5";
	};
	update_after=0;
       };
       MemberAssign @[1] {
	desc=;
	flags=NEW_EL;
	orig_prog_code=;
	obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["ec_out_RndDots"]$$;
	path="kwta.k";
	expr {
	 expr="5";
	};
	update_after=0;
       };
      };
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["last_trial_mon"]$$;
      method=DataTable::Copy_NoData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_DataTable_ref;
	type="DataTable&";
	name="cp";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="cycle_stop";
	  required=1;
	  def_val=;
	  expr {
	   expr="cycle_stop";
	  };
	 };
	};
	target=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["input_data"]$$;
      index_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_index"]$$;
      order_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc=;
      flags=NON_STD;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      method=LeabraNetwork::Compute_AvgAbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[10] {
      desc="done with the computation in the epoch -- record time it took";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[11] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     Comment @[12] {
      desc="Set k values back to default";
      flags=OFF;
      orig_prog_code=;
     };
     MemberAssign @[13] {
      desc="ec_out_RndDots.kwta.k = 2";
      flags=OFF|NEW_EL;
      orig_prog_code=;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["ec_out_RndDots"]$;
      path="kwta.k";
      expr {
       expr="2";
      };
      update_after=0;
     };
     MemberAssign @[14] {
      desc=;
      flags=OFF|NEW_EL;
      orig_prog_code=;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["ec_in_RndDots"]$;
      path="kwta.k";
      expr {
       expr="2";
      };
      update_after=0;
     };
     MemberAssign @[15] {
      desc="set back to training mode";
      flags=NEW_EL;
      orig_prog_code=;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$;
    step_n=1;
   };
   Program @["LeabraTrialTest"] {
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_test"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
     ProgVar @["cycle_stop"] {
      name="cycle_stop";
      var_type=T_Int;
      int_val=120;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["phase_no"] {
      name="phase_no";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      orig_prog_code=;
      network_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$$;
      local_ctr_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$;
      counter=LeabraNetwork::phase_no;
      update_after=1;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="cyc_stop";
	  required=1;
	  def_val=;
	  expr {
	   expr="cycle_stop";
	  };
	 };
	};
	target=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
	local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$;
	counter=LeabraNetwork::phase_no;
	update_after=1;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc="special for adapting netin";
      flags=NON_STD;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Compute_AbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[6] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[7] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      update_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraSettleTest"] {
    name="LeabraSettleTest";
    short_nm="SttTst";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_test"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["cyc_stop"] {
      name="cyc_stop";
      var_type=T_Int;
      int_val=120;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      name="cycle";
      var_type=T_Int;
      int_val=120;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["min_cycles"] {
      name="min_cycles";
      var_type=T_Int;
      int_val=50;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$$;
      local_ctr_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=0;
	orig_prog_code=;
	result_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["min_cycles"]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
     };
     Else @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      else_code {
       name="else_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=0;
	orig_prog_code=;
	result_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["min_cycles"]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[6] {
      desc="the main loop over cycles of updating";
      flags=NON_STD;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
	local_ctr_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle <  cyc_stop";
      };
     };
     MethodCall @[7] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="compute trial-level statistics";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      method=LeabraNetwork::Compute_TrialStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[9] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=OFF;
      orig_prog_code=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     If @[10] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[11] {
      desc="update network views, if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      update_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraCycleTest"] {
    name="LeabraCycleTest";
    short_nm="CycTst";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$;
      update_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["ApplyInputsTest"] {
    name="ApplyInputsTest";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=$.projects["hip_cat"].data.gp["InputData"]["WPT_test"]$;
      network=$.projects["hip_cat"].networks["WPT"]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="EC_out";
	net_target=LAYER;
	layer_name="EC_out";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["InputData"]["WPT_test"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
     ProgVar @["group_name"] {
      name="group_name";
      var_type=T_String;
      string_val="pat14";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["group_name"]$$;
      expr {
       expr="network.trial_name.before(\"_\")";
      };
     };
     MemberAssign @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].args["network"]$$;
      path="group_name";
      expr {
       expr="group_name";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrialMonitorTest"] {
    name="LeabraTrialMonitorTest";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["minus_cycles"] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["EC_out_act"] {
	name="EC_out_act";
	computed=0;
	object_type=LeabraLayer;
	object=.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_out"]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["EC_in_act"] {
	name="EC_in_act";
	computed=0;
	object_type=LeabraLayer;
	object=.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_in"]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["CA1_act"] {
	name="CA1_act";
	computed=0;
	object_type=LeabraLayer;
	object=.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA1"]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["CA3_act"] {
	name="CA3_act";
	computed=0;
	object_type=LeabraLayer;
	object=.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA3"]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["DG_act"] {
	name="DG_act";
	computed=0;
	object_type=LeabraLayer;
	object=.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["DG"]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["hip_cat"].networks["WPT"]$;
      data=$.projects["hip_cat"].data.gp["OutputData"]["TrialTestOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["OutputData"]["TrialTestOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["last_trial_mon_data"] {
      name="last_trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["OutputData"]["LastTestOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="just the last epoch of data";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
     AddNewDataRow @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      data_var=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["last_trial_mon_data"]$$;
     };
     MethodCall @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["last_trial_mon_data"]$;
      method=DataTable::CopyFromRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="dest_row";
	required=1;
	def_val=;
	expr {
	 expr="last_trial_mon_data.rows-1";
	};
       };
       ProgArg @[1] {
	arg_type=const_DataTable_ref;
	type="DataTable&";
	name="cp";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="src_row";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data.rows-1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraEpochMonitorTest"] {
    name="LeabraEpochMonitorTest";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["hip_cat"].networks["WPT"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["hip_cat"].networks["WPT"]$;
      data=.projects["hip_cat"].data.gp["OutputData"]["EpochTestOutputData"]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["hip_cat"].networks["WPT"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["hip_cat"].data.gp["OutputData"]["EpochTestOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set data and network on NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check configuration and emit errors/warnings for problems";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["hip_cat"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser3"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 6 0=0.0007812500116415322;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 6 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 6 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 6 0=0.9822404384613037;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAAA7wAAAlgAAAGtAQAAAAYBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser3";
   m_data=.projects["hip_cat"]$$;
   visible=1;
   win_name=".projects[\"hip_cat\"] - hip-cat.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Tree"] {
     name="Tree";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["hip_cat"]$;
    };
    PanelViewer @["Panels"] {
     name="Panels";
     m_data=NULL;
     visible=1;
    };
    T3PanelViewer @["T3Frames"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_117";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="T3Frames";
     m_data=NULL;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["Satellite"] {
       name="Satellite";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @["Satellites_View"] {
	  name="Satellites_View";
	  m_data=.projects["hip_cat"].networks["Satellite"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=0;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=1: y=0: z=-0.5: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers.gp[0][4].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=27: y=27: z=2.333333: };
	  max_size2d {x=30: y=193: z=1: };
	  eff_max_size {x=27: y=27: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;EC_in=-1;EC_out=-1;DG=-1;CA3=-1;CA1=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.7109447: y=0.5463408: z=1.749643: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.079822;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["Satellite_lesions"] {
       name="Satellite_lesions";
       m_data=NULL;
       visible=1;
       root_view {
	name="T3DataViewRoot_0";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="T3DataView_List_0";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @["NetView_4"] {
	  name="NetView_4";
	  m_data=.projects["hip_cat"].networks["Satellite_lesions"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="T3Annotation_List_11";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="T3DataView_List_0";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=1: y=0: z=-0.5: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers.gp[0][4].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=27: y=27: z=2.333333: };
	  max_size2d {x=30: y=193: z=1: };
	  eff_max_size {x=27: y=27: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="ScaleRange_List_0";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;EC_in=-1;EC_out=-1;DG=-1;CA3=-1;CA1=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="T3SavedView_List_8";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.7103061: y=0.5420091: z=3.060571: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.393465;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["WPT"] {
       name="WPT";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @["WPT_theta_View"] {
	  name="WPT_theta_View";
	  m_data=$.projects["hip_cat"].networks["WPT"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=0;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=1: y=0: z=-0.5: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers.gp[0][1].units[7]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=29: y=20: z=2.333333: };
	  max_size2d {x=30: y=193: z=1: };
	  eff_max_size {x=29: y=20: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="act_eq";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;EC_in=-1;EC_out=-1;DG=-1;CA3=-1;CA1=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.7682543: y=0.5416439: z=3.447595: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.779488;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["WPT_lesions"] {
       name="WPT_lesions";
       m_data=NULL;
       visible=1;
       root_view {
	name="T3DataViewRoot_0";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="T3DataView_List_0";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @["NetView_5"] {
	  name="NetView_5";
	  m_data=$.projects["hip_cat"].networks["WPT_lesions"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="T3Annotation_List_12";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="T3DataView_List_0";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=1: y=0: z=-0.5: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers.gp[0][4].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=29: y=20: z=2.333333: };
	  max_size2d {x=30: y=193: z=1: };
	  eff_max_size {x=29: y=20: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="ScaleRange_List_0";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;EC_in=-1;EC_out=-1;DG=-1;CA3=-1;CA1=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="T3SavedView_List_10";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.7670043: y=0.5416439: z=3.158931: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.490824;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["Dinos"] {
       name="Dinos";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @["Dinos_View"] {
	  name="Dinos_View";
	  m_data=.projects["hip_cat"].networks["Dinos"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=0;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=1: y=0: z=-0.5: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers.gp[0][4].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=29: y=20: z=2.333333: };
	  max_size2d {x=30: y=193: z=1: };
	  eff_max_size {x=29: y=20: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;EC_in=-1;EC_out=-1;DG=-1;CA3=-1;CA1=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.7109447: y=0.5463408: z=2.474804: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.804983;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["Dinos_lesions"] {
       name="Dinos_lesions";
       m_data=NULL;
       visible=1;
       root_view {
	name="T3DataViewRoot_0";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="T3DataView_List_0";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @["NetView_6"] {
	  name="NetView_6";
	  m_data=.projects["hip_cat"].networks["Dinos_lesions"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="T3Annotation_List_13";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="T3DataView_List_0";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=1: y=0: z=-0.5: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers.gp[0][4].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=29: y=20: z=2.333333: };
	  max_size2d {x=30: y=193: z=1: };
	  eff_max_size {x=29: y=20: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="ScaleRange_List_0";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;EC_in=-1;EC_out=-1;DG=-1;CA3=-1;CA1=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="T3SavedView_List_12";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.7109447: y=0.5416439: z=3.058262: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.390155;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 6 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 6 0=-0.0314207635819912;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 6 0=0.06015624850988388;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 6 0=0.7404371500015259;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=0;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["Satellite"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="Satellite";
   desc=;
   specs {
    name="specs";
    el_typ=BaseSpec;
    el_def=0;
    LeabraLayerSpec @["Input_Output"] {
     name="Input_Output";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_INHIB;
      kwta_pt=0.25;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_K: k=5: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] {
     name="HippoSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["HippoUnitSpec"] {
      name="HippoUnitSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["HippoBiasSpec"]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {gelin=1: thr=0.5: gain=100: nvar=0.005: avg_dt=0.005: avg_init=0.15: rescale_ctxt=1: i_thr=STD: };
      act_lrn_on=0;
      act_lrn {gelin=1: thr=0.5: gain=100: nvar=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_dt=0.02: };
      spike_misc {
       exp_slope=0.02;
       spk_thr=1.2;
       clamp_max_p=0.12;
       clamp_type=REGULAR;
       vm_r=0.3;
       t_r=6;
       vm_dend=0.3;
       vm_dend_dt=0.16;
       vm_dend_time=6.25;
      };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: xcal_lrn=0.01: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      v_m_init {name="v_m_init": type=NONE: mean=0.300000011920929: var=0: par=1: };
      act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
      dt {integ=1: vm=0.3: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=3.333333: net_time=1.428571: };
      act_avg {l_up_add=1: l_dn_pct=1: l_up_dt=0.25: l_dn_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=2.5: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.3: i=0.25: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {
       on=0;
       dt=0.007;
       vm_gain=0.04;
       spike_gain=0.00805;
       interval=10;
       trials=0;
       dt_time=142.8571;
      };
      depress {phase_act=ACT_ND: on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: delay=0: interval=10: trials=0: max_amp=1: };
      syn_delay {
       on=0;
       delay=4;
      };
      cifer {on=0: phase_updt=0: super_gain=0.05: thal_5b_thr=0.5: act_5b_thr=0.5: binary5b=0: ti_5b=0.5: bg_lrate=1: fg_lrate=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] {
      name="EC_CA1ConSpecs";
      desc=;
      unique{ lmix;wt_sig;rel_net_adapt;      };
      children {
       name="children";
       el_typ=HippoEncoderConSpec;
       el_def=0;
       HippoEncoderConSpec @["EC_in_CA1"] {
	name="EC_in_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=3: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] {
	name="CA1_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;rnd;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] {
	name="EC_out_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] {
	name="EC_in_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=0: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] {
	name="EC_out_EC_in";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;lrate;wt_scale;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=2: rel=0.5: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       LeabraConSpec @["Input_EC_in"] {
	name="Input_EC_in";
	desc=;
	unique{ wt_sig;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.005: err=0.995: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=1: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] {
      name="HippoConSpecs";
      desc=;
      unique{ lrate;lmix;      };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @["HippoBiasSpec"] {
	name="HippoBiasSpec";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
       XCalCHLConSpec @["PerfPath"] {
	name="PerfPath";
	desc=;
	unique{ wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["Mossy"] {
	name="Mossy";
	desc=;
	unique{ rnd;wt_scale;lrate;rel_net_adapt;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=8: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA3"] {
	name="CA3_CA3";
	desc=;
	unique{ wt_scale;rel_net_adapt;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA1"] {
	name="CA3_CA1";
	desc=;
	unique{ lrate;lmix;wt_scale;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.05;
	cur_lrate=0.05;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.05: err=0.95: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
      use_chl=1;
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] {
      name="HippoLayerSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=ECoutLayerSpec;
       el_def=0;
       ECoutLayerSpec @["EC_out"] {
	name="EC_out";
	desc=;
	unique{ inhib;clamp;decay;kwta;inhib_group;gp_kwta;	};
	children {
	 name="children";
	 el_typ=ECinLayerSpec;
	 el_def=0;
	 ECinLayerSpec @["EC_in"] {
	  name="EC_in";
	  desc=;
	  unique{ decay;clamp;inhib;kwta;inhib_group;gp_kwta;	  };
	  children {
	   name="children";
	   el_typ=ECinLayerSpec;
	   el_def=0;
	  };
	  inhib_group=UNIT_GROUPS;
	  inhib {
	   type=KWTA_AVG_INHIB;
	   kwta_pt=0.5;
	   gi=1.7;
	   ff=1;
	   fb=0.5;
	   self_fb=0;
	   prv_trl_ff=0;
	   prv_phs_ff=0;
	   dt=0.7;
	   up_immed=0;
	   ff0=0.1;
	   min_i=0;
	  };
	  kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  gp_kwta {k_from=USE_K: k=5: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  clamp {hard=1: gain=0.9: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	  decay {event=1: phase=0: phase2=0: };
	  cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	  ct_inhib_mod {
	   manual_sravg=0;
	   sravg_delay=0;
	   use_sin=0;
	   burst_i=0.02;
	   trough_i=0.02;
	   use_fin=0;
	   inhib_i=0;
	  };
	  tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	  adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	  abs_net_adapt {
	   on=0;
	   trg_net=0.5;
	   tol=0.1;
	   abs_lrate=0.2;
	  };
	  auto_m_cycles=30;
	 };
	};
	inhib_group=UNIT_GROUPS;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.5;
	 gi=1.7;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_K: k=5: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.999: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       LeabraLayerSpec @["DG"] {
	name="DG";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 gi=20;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
       };
       CA3LayerSpec @["CA3"] {
	name="CA3";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=CA3LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=3;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.06: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       CA1LayerSpec @["CA1"] {
	name="CA1";
	desc=;
	unique{ gp_kwta;decay;inhib;kwta;	};
	children {
	 name="children";
	 el_typ=CA1LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=2.2;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
	recall_decay=1;
	use_test_mode=1;
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.5;
       gi=2;
       ff=1;
       fb=0.5;
       self_fb=0;
       prv_trl_ff=0;
       prv_phs_ff=0;
       dt=0.7;
       up_immed=0;
       ff0=0.1;
       min_i=0;
      };
      kwta {k_from=USE_K: k=5: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
      decay {event=1: phase=1: phase2=0: };
      cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=0;
       burst_i=0.02;
       trough_i=0.02;
       use_fin=0;
       inhib_i=0;
      };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      auto_m_cycles=30;
     };
     BaseSpec_Group @.gp["HippoPrjns"] {
      name="HippoPrjns";
      el_typ=FullPrjnSpec;
      el_def=0;
      FullPrjnSpec @["FullPrjn"] {
       name="FullPrjn";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=FullPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
      OneToOnePrjnSpec @["OneToOne"] {
       name="OneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=OneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] {
       name="GpOneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=GpOneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      UniformRndPrjnSpec @["RandomPerfPath"] {
       name="RandomPerfPath";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.25;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] {
       name="UniformRndMossy";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] {
       name="SymmetricPrjnSpec";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=SymmetricPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=27: y=27: z=3: };
    max_disp_size2d {x=30: y=193: };
    LeabraLayer @["Input"] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=27: n_not_xy=0: n=27: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=27: n_not_xy=0: n=27: };
     disp_geom {x=1: y=27: n_not_xy=0: n=56: };
     scaled_disp_geom {x=1: y=27: n_not_xy=0: n=1: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_Input"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Satellite"].specs["Input_Output"]$$: };
    };
    Layer_Group @.gp["Hippocampus"] {
     name="Hippocampus";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=64: };
     max_disp_size {x=27: y=27: z=3: };
     max_disp_size2d {x=30: y=129: };
     LeabraLayer @["EC_in"] {
      name="EC_in";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=13: y=0: z=0: };
      pos2d {x=0: y=0: };
      disp_scale=1;
      un_geom {x=1: y=27: n_not_xy=0: n=27: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=27: n_not_xy=0: n=27: };
      disp_geom {x=1: y=27: n_not_xy=0: n=56: };
      scaled_disp_geom {x=1: y=27: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["EC_out"]$$;
	spec {type=OneToOnePrjnSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_EC_in"]$$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_Input"] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite"].layers["Input"]$$;
	spec {type=OneToOnePrjnSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=LeabraConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["Input_EC_in"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["DG"].projections["Fm_EC_in"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA3"].projections["Fm_EC_in"];
       Projection_Group @. = [2] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_in"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=ECinLayerSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"].children["EC_in"]$$: };
     };
     LeabraLayer @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["enc_sse"] {
	name="enc_sse";
	value 6 0=0.268797904253006;
	val_type_fixed=0;
       };
       UserDataItem @["enc_norm_err"] {
	name="enc_norm_err";
	value 6 0=0.1000000014901161;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      desc=;
      flags=0;
      layer_type=TARGET;
      pos {x=26: y=0: z=0: };
      pos2d {x=0: y=64: };
      disp_scale=1;
      un_geom {x=1: y=27: n_not_xy=0: n=27: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=27: n_not_xy=0: n=27: };
      disp_geom {x=1: y=27: n_not_xy=0: n=56: };
      scaled_disp_geom {x=1: y=27: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_CA1"] {
	name="Fm_CA1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA1"]$$;
	spec {type=SymmetricPrjnSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["SymmetricPrjnSpec"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["CA1_EC_out"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_EC_out"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=ECoutLayerSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"]$$: };
     };
     LeabraLayer @["DG"] {
      name="DG";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=1: };
      pos2d {x=0: y=93: };
      disp_scale=1;
      un_geom {x=20: y=20: n_not_xy=0: n=400: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=20: y=20: n_not_xy=0: n=400: };
      disp_geom {x=20: y=20: n_not_xy=0: n=400: };
      scaled_disp_geom {x=20: y=20: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["EC_in"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA3"].projections["Fm_DG"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus dentate gyrus";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["DG"]$$: };
     };
     LeabraLayer @["CA3"] {
      name="CA3";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=3: y=0: z=2: };
      pos2d {x=3: y=121: };
      disp_scale=1;
      un_geom {x=10: y=8: n_not_xy=0: n=80: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=8: n_not_xy=0: n=80: };
      disp_geom {x=10: y=8: n_not_xy=0: n=80: };
      scaled_disp_geom {x=10: y=8: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=UniformRndPrjnSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_DG"] {
	name="Fm_DG";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["DG"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["UniformRndMossy"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["Mossy"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=SELF;
	from=.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA3"]$$;
	spec {type=FullPrjnSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA3"]$$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA3"].projections["Fm_CA3"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA1"].projections["Fm_CA3"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=CA3LayerSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA3"]$$: };
     };
     LeabraLayer @["CA1"] {
      name="CA1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=16: y=0: z=2: };
      pos2d {x=20: y=116: };
      disp_scale=1;
      un_geom {x=10: y=10: n_not_xy=0: n=100: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=10: n_not_xy=0: n=100: };
      disp_geom {x=10: y=10: n_not_xy=0: n=100: };
      scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["EC_out"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_CA1"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["CA3"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"]$$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite"].layers.gp["Hippocampus"]["EC_out"].projections["Fm_CA1"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=CA1LayerSpec: spec=.projects["hip_cat"].networks["Satellite"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA1"]$$: };
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name="Talairach";
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=nan;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=661;
   n_cons=27434;
   max_prjns=3;
   max_disp_size {x=27: y=27: z=3: };
   max_disp_size2d {x=30: y=193: };
   learn_rule=CTLEABRA_XCAL;
   ti_mode=0;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase_max=2;
   time_inc=1;
   cycle_max=20;
   mid_minus_cycle=-1;
   min_cycles=50;
   min_cycles_phase2=0;
   dwt_norm_enabled=0;
   ct_time {
    use=1;
    minus=80;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=101;
    inhib_start=100;
   };
   ct_sravg {
    manual=0;
    start=60;
    end=1;
    interval=1;
    plus_s_st=19;
    plus_s_only=0;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
   };
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   maxda_stopcrit=-1;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
   cos_diff_on=0;
   cos_diff_auto=1;
  };
  LeabraNetwork @["Satellite_lesions"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="Satellite_lesions";
   desc=;
   specs {
    name="specs";
    el_typ=BaseSpec;
    el_def=0;
    LeabraLayerSpec @["Input_Output"] {
     name="Input_Output";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_INHIB;
      kwta_pt=0.25;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_K: k=5: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["EC_out_non_theta"] {
     name="EC_out_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=UNIT_GROUPS;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.5;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=5: pct=0.23: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["EC_in_non_theta"] {
     name="EC_in_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=UNIT_GROUPS;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.5;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=5: pct=0.23: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["CA3_non_theta"] {
     name="CA3_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.7;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.06: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["CA1_non_theta"] {
     name="CA1_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.7;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.25: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["DG_non_theta"] {
     name="DG_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.9;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.01: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] {
     name="HippoSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["HippoUnitSpec"] {
      name="HippoUnitSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["HippoBiasSpec"]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {gelin=1: thr=0.5: gain=100: nvar=0.005: avg_dt=0.005: avg_init=0.15: rescale_ctxt=1: i_thr=STD: };
      act_lrn_on=0;
      act_lrn {gelin=1: thr=0.5: gain=100: nvar=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_dt=0.02: };
      spike_misc {
       exp_slope=0.02;
       spk_thr=1.2;
       clamp_max_p=0.12;
       clamp_type=REGULAR;
       vm_r=0.3;
       t_r=6;
       vm_dend=0.3;
       vm_dend_dt=0.16;
       vm_dend_time=6.25;
      };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: xcal_lrn=0.01: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      v_m_init {name="v_m_init": type=NONE: mean=0.300000011920929: var=0: par=1: };
      act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
      dt {integ=1: vm=0.3: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=3.333333: net_time=1.428571: };
      act_avg {l_up_add=1: l_dn_pct=1: l_up_dt=0.25: l_dn_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=2.5: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.3: i=0.25: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {
       on=0;
       dt=0.007;
       vm_gain=0.04;
       spike_gain=0.00805;
       interval=10;
       trials=0;
       dt_time=142.8571;
      };
      depress {phase_act=ACT_ND: on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: delay=0: interval=10: trials=0: max_amp=1: };
      syn_delay {
       on=0;
       delay=4;
      };
      cifer {on=0: phase_updt=0: super_gain=0.05: thal_5b_thr=0.5: act_5b_thr=0.5: binary5b=0: ti_5b=0.5: bg_lrate=1: fg_lrate=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] {
      name="EC_CA1ConSpecs";
      desc=;
      unique{ lmix;wt_sig;rel_net_adapt;      };
      children {
       name="children";
       el_typ=HippoEncoderConSpec;
       el_def=0;
       HippoEncoderConSpec @["EC_in_CA1"] {
	name="EC_in_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=3: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] {
	name="CA1_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;rnd;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] {
	name="EC_out_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] {
	name="EC_in_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=0: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] {
	name="EC_out_EC_in";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;lrate;wt_scale;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=2: rel=0.5: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       LeabraConSpec @["Input_EC_in"] {
	name="Input_EC_in";
	desc=;
	unique{ wt_sig;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.005: err=0.995: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=1: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] {
      name="HippoConSpecs";
      desc=;
      unique{ lrate;lmix;      };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @["HippoBiasSpec"] {
	name="HippoBiasSpec";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
       XCalCHLConSpec @["PerfPath"] {
	name="PerfPath";
	desc=;
	unique{ wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["Mossy"] {
	name="Mossy";
	desc=;
	unique{ rnd;wt_scale;lrate;rel_net_adapt;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=8: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA3"] {
	name="CA3_CA3";
	desc=;
	unique{ wt_scale;rel_net_adapt;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA1"] {
	name="CA3_CA1";
	desc=;
	unique{ lrate;lmix;wt_scale;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.05;
	cur_lrate=0.05;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.05: err=0.95: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
      use_chl=1;
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] {
      name="HippoLayerSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=ECoutLayerSpec;
       el_def=0;
       ECoutLayerSpec @["EC_out"] {
	name="EC_out";
	desc=;
	unique{ inhib;clamp;decay;kwta;inhib_group;gp_kwta;	};
	children {
	 name="children";
	 el_typ=ECinLayerSpec;
	 el_def=0;
	 ECinLayerSpec @["EC_in"] {
	  name="EC_in";
	  desc=;
	  unique{ decay;clamp;inhib;kwta;inhib_group;gp_kwta;	  };
	  children {
	   name="children";
	   el_typ=ECinLayerSpec;
	   el_def=0;
	  };
	  inhib_group=UNIT_GROUPS;
	  inhib {
	   type=KWTA_AVG_INHIB;
	   kwta_pt=0.5;
	   gi=1.7;
	   ff=1;
	   fb=0.5;
	   self_fb=0;
	   prv_trl_ff=0;
	   prv_phs_ff=0;
	   dt=0.7;
	   up_immed=0;
	   ff0=0.1;
	   min_i=0;
	  };
	  kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  gp_kwta {k_from=USE_PAT_K: k=4: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  clamp {hard=1: gain=0.9: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	  decay {event=1: phase=0: phase2=0: };
	  cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	  ct_inhib_mod {
	   manual_sravg=0;
	   sravg_delay=0;
	   use_sin=0;
	   burst_i=0.02;
	   trough_i=0.02;
	   use_fin=0;
	   inhib_i=0;
	  };
	  tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	  adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	  abs_net_adapt {
	   on=0;
	   trg_net=0.5;
	   tol=0.1;
	   abs_lrate=0.2;
	  };
	  auto_m_cycles=30;
	 };
	};
	inhib_group=UNIT_GROUPS;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.5;
	 gi=1.7;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PAT_K: k=2: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.999: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       LeabraLayerSpec @["DG"] {
	name="DG";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 gi=20;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
       };
       CA3LayerSpec @["CA3"] {
	name="CA3";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=CA3LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=3;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.06: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       CA1LayerSpec @["CA1"] {
	name="CA1";
	desc=;
	unique{ gp_kwta;decay;inhib;kwta;	};
	children {
	 name="children";
	 el_typ=CA1LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=2.2;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
	recall_decay=1;
	use_test_mode=1;
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.5;
       gi=2;
       ff=1;
       fb=0.5;
       self_fb=0;
       prv_trl_ff=0;
       prv_phs_ff=0;
       dt=0.7;
       up_immed=0;
       ff0=0.1;
       min_i=0;
      };
      kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
      decay {event=1: phase=1: phase2=0: };
      cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=0;
       burst_i=0.02;
       trough_i=0.02;
       use_fin=0;
       inhib_i=0;
      };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      auto_m_cycles=30;
     };
     BaseSpec_Group @.gp["HippoPrjns"] {
      name="HippoPrjns";
      el_typ=FullPrjnSpec;
      el_def=0;
      FullPrjnSpec @["FullPrjn"] {
       name="FullPrjn";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=FullPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
      OneToOnePrjnSpec @["OneToOne"] {
       name="OneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=OneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] {
       name="GpOneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=GpOneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      UniformRndPrjnSpec @["RandomPerfPath"] {
       name="RandomPerfPath";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.25;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] {
       name="UniformRndMossy";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] {
       name="SymmetricPrjnSpec";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=SymmetricPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=27: y=27: z=3: };
    max_disp_size2d {x=30: y=193: };
    LeabraLayer @["Input"] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=27: n_not_xy=0: n=27: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=27: n_not_xy=0: n=27: };
     disp_geom {x=1: y=27: n_not_xy=0: n=56: };
     scaled_disp_geom {x=1: y=27: n_not_xy=0: n=1: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_Input"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs["Input_Output"]$$: };
    };
    Layer_Group @.gp["Hippocampus"] {
     name="Hippocampus";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=64: };
     max_disp_size {x=27: y=27: z=3: };
     max_disp_size2d {x=30: y=129: };
     LeabraLayer @["EC_in"] {
      name="EC_in";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=13: y=0: z=0: };
      pos2d {x=0: y=0: };
      disp_scale=1;
      un_geom {x=1: y=27: n_not_xy=0: n=27: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=27: n_not_xy=0: n=27: };
      disp_geom {x=1: y=27: n_not_xy=0: n=56: };
      scaled_disp_geom {x=1: y=27: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["EC_out"]$$;
	spec {type=OneToOnePrjnSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_EC_in"]$$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_Input"] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite_lesions"].layers["Input"]$$;
	spec {type=OneToOnePrjnSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=LeabraConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["Input_EC_in"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["DG"].projections["Fm_EC_in"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_EC_in"];
       Projection_Group @. = [2] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_in"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs["EC_in_non_theta"]$$: };
     };
     LeabraLayer @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["enc_sse"] {
	name="enc_sse";
	value 6 0=0;
	val_type_fixed=0;
       };
       UserDataItem @["enc_norm_err"] {
	name="enc_norm_err";
	value 6 0=0;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      desc=;
      flags=0;
      layer_type=TARGET;
      pos {x=26: y=0: z=0: };
      pos2d {x=0: y=64: };
      disp_scale=1;
      un_geom {x=1: y=27: n_not_xy=0: n=27: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=27: n_not_xy=0: n=27: };
      disp_geom {x=1: y=27: n_not_xy=0: n=56: };
      scaled_disp_geom {x=1: y=27: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_CA1"] {
	name="Fm_CA1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA1"]$$;
	spec {type=SymmetricPrjnSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["SymmetricPrjnSpec"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["CA1_EC_out"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_EC_out"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs["EC_out_non_theta"]$$: };
     };
     LeabraLayer @["DG"] {
      name="DG";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=1: };
      pos2d {x=3: y=89: };
      disp_scale=1;
      un_geom {x=20: y=20: n_not_xy=0: n=400: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=20: y=20: n_not_xy=0: n=400: };
      disp_geom {x=20: y=20: n_not_xy=0: n=400: };
      scaled_disp_geom {x=20: y=20: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["EC_in"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_DG"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus dentate gyrus";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs["DG_non_theta"]$$: };
     };
     LeabraLayer @["CA3"] {
      name="CA3";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=3: y=0: z=2: };
      pos2d {x=3: y=121: };
      disp_scale=1;
      un_geom {x=10: y=8: n_not_xy=0: n=80: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=8: n_not_xy=0: n=80: };
      disp_geom {x=10: y=8: n_not_xy=0: n=80: };
      scaled_disp_geom {x=10: y=8: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=UniformRndPrjnSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_DG"] {
	name="Fm_DG";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["DG"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["UniformRndMossy"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["Mossy"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=SELF;
	from=.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA3"]$$;
	spec {type=FullPrjnSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA3"]$$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_CA3"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_CA3"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs["CA3_non_theta"]$$: };
     };
     LeabraLayer @["CA1"] {
      name="CA1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=16: y=0: z=2: };
      pos2d {x=20: y=116: };
      disp_scale=1;
      un_geom {x=10: y=10: n_not_xy=0: n=100: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=10: n_not_xy=0: n=100: };
      disp_geom {x=10: y=10: n_not_xy=0: n=100: };
      scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["EC_out"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_CA1"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["CA3"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"]$$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Satellite_lesions"].layers.gp["Hippocampus"]["EC_out"].projections["Fm_CA1"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Satellite_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Satellite_lesions"].specs["CA1_non_theta"]$$: };
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name="Talairach";
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=nan;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=661;
   n_cons=27434;
   max_prjns=3;
   max_disp_size {x=27: y=27: z=3: };
   max_disp_size2d {x=30: y=193: };
   learn_rule=CTLEABRA_XCAL;
   ti_mode=0;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase_max=2;
   time_inc=1;
   cycle_max=20;
   mid_minus_cycle=-1;
   min_cycles=50;
   min_cycles_phase2=0;
   dwt_norm_enabled=0;
   ct_time {
    use=1;
    minus=80;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=101;
    inhib_start=100;
   };
   ct_sravg {
    manual=0;
    start=60;
    end=1;
    interval=1;
    plus_s_st=19;
    plus_s_only=0;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
   };
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   maxda_stopcrit=-1;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
   cos_diff_on=0;
   cos_diff_auto=1;
  };
  LeabraNetwork @["WPT"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_247";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="WPT";
   desc=;
   specs {
    name="specs";
    el_typ=BaseSpec;
    el_def=0;
    LeabraLayerSpec @["Input_Output"] {
     name="Input_Output";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_INHIB;
      kwta_pt=0.25;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] {
     name="HippoSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["HippoUnitSpec"] {
      name="HippoUnitSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["HippoBiasSpec"]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {gelin=1: thr=0.5: gain=100: nvar=0.005: avg_dt=0.005: avg_init=0.15: rescale_ctxt=1: i_thr=STD: };
      act_lrn_on=0;
      act_lrn {gelin=1: thr=0.5: gain=100: nvar=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_dt=0.02: };
      spike_misc {
       exp_slope=0.02;
       spk_thr=1.2;
       clamp_max_p=0.12;
       clamp_type=REGULAR;
       vm_r=0.3;
       t_r=6;
       vm_dend=0.3;
       vm_dend_dt=0.16;
       vm_dend_time=6.25;
      };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: xcal_lrn=0.01: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      v_m_init {name="v_m_init": type=NONE: mean=0.300000011920929: var=0: par=1: };
      act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
      dt {integ=1: vm=0.3: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=3.333333: net_time=1.428571: };
      act_avg {l_up_add=1: l_dn_pct=1: l_up_dt=0.25: l_dn_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=2.5: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.3: i=0.25: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {
       on=0;
       dt=0.007;
       vm_gain=0.04;
       spike_gain=0.00805;
       interval=10;
       trials=0;
       dt_time=142.8571;
      };
      depress {phase_act=ACT_ND: on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: delay=0: interval=10: trials=0: max_amp=1: };
      syn_delay {
       on=0;
       delay=4;
      };
      cifer {on=0: phase_updt=0: super_gain=0.05: thal_5b_thr=0.5: act_5b_thr=0.5: binary5b=0: ti_5b=0.5: bg_lrate=1: fg_lrate=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] {
      name="EC_CA1ConSpecs";
      desc=;
      unique{ lmix;wt_sig;rel_net_adapt;      };
      children {
       name="children";
       el_typ=HippoEncoderConSpec;
       el_def=0;
       HippoEncoderConSpec @["EC_in_CA1"] {
	name="EC_in_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=3: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] {
	name="CA1_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;rnd;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] {
	name="EC_out_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] {
	name="EC_in_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=0: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] {
	name="EC_out_EC_in";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;lrate;wt_scale;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=2: rel=0.5: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       LeabraConSpec @["Input_EC_in"] {
	name="Input_EC_in";
	desc=;
	unique{ wt_sig;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.005: err=0.995: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=1: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] {
      name="HippoConSpecs";
      desc=;
      unique{ lrate;lmix;      };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @["HippoBiasSpec"] {
	name="HippoBiasSpec";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
       XCalCHLConSpec @["PerfPath"] {
	name="PerfPath";
	desc=;
	unique{ wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["Mossy"] {
	name="Mossy";
	desc=;
	unique{ rnd;wt_scale;lrate;rel_net_adapt;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=8: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA3"] {
	name="CA3_CA3";
	desc=;
	unique{ wt_scale;rel_net_adapt;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA1"] {
	name="CA3_CA1";
	desc=;
	unique{ lrate;lmix;wt_scale;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.05;
	cur_lrate=0.05;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.05: err=0.95: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
      use_chl=1;
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] {
      name="HippoLayerSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=ECoutLayerSpec;
       el_def=0;
       ECoutLayerSpec @["EC_out"] {
	name="EC_out";
	desc=;
	unique{ inhib;clamp;decay;kwta;inhib_group;gp_kwta;	};
	children {
	 name="children";
	 el_typ=ECinLayerSpec;
	 el_def=0;
	 ECinLayerSpec @["EC_in"] {
	  name="EC_in";
	  desc=;
	  unique{ decay;clamp;inhib;kwta;inhib_group;gp_kwta;	  };
	  children {
	   name="children";
	   el_typ=ECinLayerSpec;
	   el_def=0;
	  };
	  inhib_group=UNIT_GROUPS;
	  inhib {
	   type=KWTA_AVG_INHIB;
	   kwta_pt=0.5;
	   gi=1.7;
	   ff=1;
	   fb=0.5;
	   self_fb=0;
	   prv_trl_ff=0;
	   prv_phs_ff=0;
	   dt=0.7;
	   up_immed=0;
	   ff0=0.1;
	   min_i=0;
	  };
	  kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  gp_kwta {k_from=USE_PAT_K: k=4: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  clamp {hard=1: gain=0.9: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	  decay {event=1: phase=0: phase2=0: };
	  cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	  ct_inhib_mod {
	   manual_sravg=0;
	   sravg_delay=0;
	   use_sin=0;
	   burst_i=0.02;
	   trough_i=0.02;
	   use_fin=0;
	   inhib_i=0;
	  };
	  tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	  adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	  abs_net_adapt {
	   on=0;
	   trg_net=0.5;
	   tol=0.1;
	   abs_lrate=0.2;
	  };
	  auto_m_cycles=30;
	 };
	};
	inhib_group=UNIT_GROUPS;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.5;
	 gi=1.7;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PAT_K: k=2: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.999: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       LeabraLayerSpec @["DG"] {
	name="DG";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 gi=20;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
       };
       CA3LayerSpec @["CA3"] {
	name="CA3";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=CA3LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=3;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.06: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       CA1LayerSpec @["CA1"] {
	name="CA1";
	desc=;
	unique{ gp_kwta;decay;inhib;kwta;	};
	children {
	 name="children";
	 el_typ=CA1LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=2.2;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
	recall_decay=1;
	use_test_mode=1;
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.5;
       gi=2;
       ff=1;
       fb=0.5;
       self_fb=0;
       prv_trl_ff=0;
       prv_phs_ff=0;
       dt=0.7;
       up_immed=0;
       ff0=0.1;
       min_i=0;
      };
      kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
      decay {event=1: phase=1: phase2=0: };
      cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=0;
       burst_i=0.02;
       trough_i=0.02;
       use_fin=0;
       inhib_i=0;
      };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      auto_m_cycles=30;
     };
     BaseSpec_Group @.gp["HippoPrjns"] {
      name="HippoPrjns";
      el_typ=FullPrjnSpec;
      el_def=0;
      FullPrjnSpec @["FullPrjn"] {
       name="FullPrjn";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=FullPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
      OneToOnePrjnSpec @["OneToOne"] {
       name="OneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=OneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] {
       name="GpOneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=GpOneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      UniformRndPrjnSpec @["RandomPerfPath"] {
       name="RandomPerfPath";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.25;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] {
       name="UniformRndMossy";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] {
       name="SymmetricPrjnSpec";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=SymmetricPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=29: y=20: z=3: };
    max_disp_size2d {x=30: y=193: };
    LeabraLayer @["Input"] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=4: n_not_xy=0: n=4: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=2: y=1: n_not_xy=0: n=2: };
     gp_spc {x=1: y=1: };
     flat_geom {x=2: y=4: n_not_xy=0: n=8: };
     disp_geom {x=3: y=4: n_not_xy=0: n=20: };
     scaled_disp_geom {x=3: y=4: n_not_xy=0: n=1: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_Input"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["WPT"].specs["Input_Output"]$$: };
    };
    Layer_Group @.gp["Hippocampus"] {
     name="Hippocampus";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=64: };
     max_disp_size {x=29: y=20: z=3: };
     max_disp_size2d {x=30: y=129: };
     LeabraLayer @["EC_in"] {
      name="EC_in";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=13: y=0: z=0: };
      pos2d {x=0: y=0: };
      disp_scale=1;
      un_geom {x=1: y=4: n_not_xy=0: n=4: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=1: n_not_xy=0: n=2: };
      gp_spc {x=1: y=1: };
      flat_geom {x=2: y=4: n_not_xy=0: n=8: };
      disp_geom {x=3: y=4: n_not_xy=0: n=20: };
      scaled_disp_geom {x=3: y=4: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_out"]$;
	spec {type=OneToOnePrjnSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_EC_in"]$$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_Input"] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["WPT"].layers["Input"]$$;
	spec {type=OneToOnePrjnSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=LeabraConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["Input_EC_in"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["DG"].projections["Fm_EC_in"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA3"].projections["Fm_EC_in"];
       Projection_Group @. = [2] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_in"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=ECinLayerSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"].children["EC_in"]$$: };
     };
     LeabraLayer @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["enc_sse"] {
	name="enc_sse";
	value 6 0=0.4726246893405914;
	val_type_fixed=0;
       };
       UserDataItem @["enc_norm_err"] {
	name="enc_norm_err";
	value 6 0=0.125;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      desc=;
      flags=0;
      layer_type=TARGET;
      pos {x=26: y=0: z=0: };
      pos2d {x=0: y=64: };
      disp_scale=1;
      un_geom {x=1: y=4: n_not_xy=0: n=4: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=1: n_not_xy=0: n=2: };
      gp_spc {x=1: y=1: };
      flat_geom {x=2: y=4: n_not_xy=0: n=8: };
      disp_geom {x=3: y=4: n_not_xy=0: n=20: };
      scaled_disp_geom {x=3: y=4: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_CA1"] {
	name="Fm_CA1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA1"]$;
	spec {type=SymmetricPrjnSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["SymmetricPrjnSpec"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["CA1_EC_out"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_EC_out"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=ECoutLayerSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"]$$: };
     };
     LeabraLayer @["DG"] {
      name="DG";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=1: };
      pos2d {x=0: y=89: };
      disp_scale=1;
      un_geom {x=20: y=20: n_not_xy=0: n=400: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=20: y=20: n_not_xy=0: n=400: };
      disp_geom {x=20: y=20: n_not_xy=0: n=400: };
      scaled_disp_geom {x=20: y=20: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA3"].projections["Fm_DG"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus dentate gyrus";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["DG"]$$: };
     };
     LeabraLayer @["CA3"] {
      name="CA3";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=3: y=0: z=2: };
      pos2d {x=3: y=121: };
      disp_scale=1;
      un_geom {x=10: y=8: n_not_xy=0: n=80: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=8: n_not_xy=0: n=80: };
      disp_geom {x=10: y=8: n_not_xy=0: n=80: };
      scaled_disp_geom {x=10: y=8: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=UniformRndPrjnSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_DG"] {
	name="Fm_DG";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["DG"]$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["UniformRndMossy"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["Mossy"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=SELF;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA3"]$;
	spec {type=FullPrjnSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA3"]$$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA3"].projections["Fm_CA3"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA1"].projections["Fm_CA3"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=CA3LayerSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA3"]$$: };
     };
     LeabraLayer @["CA1"] {
      name="CA1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=16: y=0: z=2: };
      pos2d {x=20: y=116: };
      disp_scale=1;
      un_geom {x=10: y=10: n_not_xy=0: n=100: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=10: n_not_xy=0: n=100: };
      disp_geom {x=10: y=10: n_not_xy=0: n=100: };
      scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_out"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_CA1"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["CA3"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"]$$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT"].layers.gp["Hippocampus"]["EC_out"].projections["Fm_CA1"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=CA1LayerSpec: spec=.projects["hip_cat"].networks["WPT"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA1"]$$: };
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name="Talairach";
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {
    run_time {name="TimeUsedHR_88": s_used=0: n_used=0: };
    sync_time {name="TimeUsedHR_89": s_used=0: n_used=0: };
    total_time {name="TimeUsedHR_90": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=604;
   n_cons=19296;
   max_prjns=3;
   max_disp_size {x=29: y=20: z=3: };
   max_disp_size2d {x=30: y=193: };
   learn_rule=CTLEABRA_XCAL;
   ti_mode=0;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase_max=2;
   time_inc=1;
   cycle_max=20;
   mid_minus_cycle=-1;
   min_cycles=50;
   min_cycles_phase2=0;
   dwt_norm_enabled=0;
   ct_time {
    use=1;
    minus=80;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=101;
    inhib_start=100;
   };
   ct_sravg {
    manual=0;
    start=60;
    end=1;
    interval=1;
    plus_s_st=19;
    plus_s_only=0;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
   };
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   maxda_stopcrit=-1;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
   cos_diff_on=0;
   cos_diff_auto=1;
  };
  LeabraNetwork @["WPT_lesions"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="WPT_lesions";
   desc=;
   specs {
    name="specs";
    el_typ=BaseSpec;
    el_def=0;
    LeabraLayerSpec @["Input_Output"] {
     name="Input_Output";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_INHIB;
      kwta_pt=0.25;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["EC_out_non_theta"] {
     name="EC_out_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=UNIT_GROUPS;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.5;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_PAT_K: k=3: pct=0.23: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["EC_in_non_theta"] {
     name="EC_in_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=UNIT_GROUPS;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.5;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_PAT_K: k=3: pct=0.23: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["CA3_non_theta"] {
     name="CA3_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.7;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.06: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["CA1_non_theta"] {
     name="CA1_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.7;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.25: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["DG_non_theta"] {
     name="DG_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.9;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.01: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] {
     name="HippoSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["HippoUnitSpec"] {
      name="HippoUnitSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["HippoBiasSpec"]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {gelin=1: thr=0.5: gain=100: nvar=0.005: avg_dt=0.005: avg_init=0.15: rescale_ctxt=1: i_thr=STD: };
      act_lrn_on=0;
      act_lrn {gelin=1: thr=0.5: gain=100: nvar=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_dt=0.02: };
      spike_misc {
       exp_slope=0.02;
       spk_thr=1.2;
       clamp_max_p=0.12;
       clamp_type=REGULAR;
       vm_r=0.3;
       t_r=6;
       vm_dend=0.3;
       vm_dend_dt=0.16;
       vm_dend_time=6.25;
      };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: xcal_lrn=0.01: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      v_m_init {name="v_m_init": type=NONE: mean=0.300000011920929: var=0: par=1: };
      act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
      dt {integ=1: vm=0.3: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=3.333333: net_time=1.428571: };
      act_avg {l_up_add=1: l_dn_pct=1: l_up_dt=0.25: l_dn_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=2.5: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.3: i=0.25: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {
       on=0;
       dt=0.007;
       vm_gain=0.04;
       spike_gain=0.00805;
       interval=10;
       trials=0;
       dt_time=142.8571;
      };
      depress {phase_act=ACT_ND: on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: delay=0: interval=10: trials=0: max_amp=1: };
      syn_delay {
       on=0;
       delay=4;
      };
      cifer {on=0: phase_updt=0: super_gain=0.05: thal_5b_thr=0.5: act_5b_thr=0.5: binary5b=0: ti_5b=0.5: bg_lrate=1: fg_lrate=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] {
      name="EC_CA1ConSpecs";
      desc=;
      unique{ lmix;wt_sig;rel_net_adapt;      };
      children {
       name="children";
       el_typ=HippoEncoderConSpec;
       el_def=0;
       HippoEncoderConSpec @["EC_in_CA1"] {
	name="EC_in_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=3: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] {
	name="CA1_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;rnd;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] {
	name="EC_out_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] {
	name="EC_in_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=0: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] {
	name="EC_out_EC_in";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;lrate;wt_scale;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=2: rel=0.5: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       LeabraConSpec @["Input_EC_in"] {
	name="Input_EC_in";
	desc=;
	unique{ wt_sig;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.005: err=0.995: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=1: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] {
      name="HippoConSpecs";
      desc=;
      unique{ lrate;lmix;      };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @["HippoBiasSpec"] {
	name="HippoBiasSpec";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
       XCalCHLConSpec @["PerfPath"] {
	name="PerfPath";
	desc=;
	unique{ wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["Mossy"] {
	name="Mossy";
	desc=;
	unique{ rnd;wt_scale;lrate;rel_net_adapt;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=8: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA3"] {
	name="CA3_CA3";
	desc=;
	unique{ wt_scale;rel_net_adapt;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA1"] {
	name="CA3_CA1";
	desc=;
	unique{ lrate;lmix;wt_scale;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.05;
	cur_lrate=0.05;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.05: err=0.95: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
      use_chl=1;
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] {
      name="HippoLayerSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=ECoutLayerSpec;
       el_def=0;
       ECoutLayerSpec @["EC_out"] {
	name="EC_out";
	desc=;
	unique{ inhib;clamp;decay;kwta;inhib_group;gp_kwta;	};
	children {
	 name="children";
	 el_typ=ECinLayerSpec;
	 el_def=0;
	 ECinLayerSpec @["EC_in"] {
	  name="EC_in";
	  desc=;
	  unique{ decay;clamp;inhib;kwta;inhib_group;gp_kwta;	  };
	  children {
	   name="children";
	   el_typ=ECinLayerSpec;
	   el_def=0;
	  };
	  inhib_group=UNIT_GROUPS;
	  inhib {
	   type=KWTA_AVG_INHIB;
	   kwta_pt=0.5;
	   gi=1.7;
	   ff=1;
	   fb=0.5;
	   self_fb=0;
	   prv_trl_ff=0;
	   prv_phs_ff=0;
	   dt=0.7;
	   up_immed=0;
	   ff0=0.1;
	   min_i=0;
	  };
	  kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  gp_kwta {k_from=USE_PAT_K: k=4: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  clamp {hard=1: gain=0.9: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	  decay {event=1: phase=0: phase2=0: };
	  cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	  ct_inhib_mod {
	   manual_sravg=0;
	   sravg_delay=0;
	   use_sin=0;
	   burst_i=0.02;
	   trough_i=0.02;
	   use_fin=0;
	   inhib_i=0;
	  };
	  tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	  adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	  abs_net_adapt {
	   on=0;
	   trg_net=0.5;
	   tol=0.1;
	   abs_lrate=0.2;
	  };
	  auto_m_cycles=30;
	 };
	};
	inhib_group=UNIT_GROUPS;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.5;
	 gi=1.7;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PAT_K: k=2: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.999: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       LeabraLayerSpec @["DG"] {
	name="DG";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 gi=20;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
       };
       CA3LayerSpec @["CA3"] {
	name="CA3";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=CA3LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=3;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.06: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       CA1LayerSpec @["CA1"] {
	name="CA1";
	desc=;
	unique{ gp_kwta;decay;inhib;kwta;	};
	children {
	 name="children";
	 el_typ=CA1LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=2.2;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
	recall_decay=1;
	use_test_mode=1;
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.5;
       gi=2;
       ff=1;
       fb=0.5;
       self_fb=0;
       prv_trl_ff=0;
       prv_phs_ff=0;
       dt=0.7;
       up_immed=0;
       ff0=0.1;
       min_i=0;
      };
      kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
      decay {event=1: phase=1: phase2=0: };
      cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=0;
       burst_i=0.02;
       trough_i=0.02;
       use_fin=0;
       inhib_i=0;
      };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      auto_m_cycles=30;
     };
     BaseSpec_Group @.gp["HippoPrjns"] {
      name="HippoPrjns";
      el_typ=FullPrjnSpec;
      el_def=0;
      FullPrjnSpec @["FullPrjn"] {
       name="FullPrjn";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=FullPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
      OneToOnePrjnSpec @["OneToOne"] {
       name="OneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=OneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] {
       name="GpOneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=GpOneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      UniformRndPrjnSpec @["RandomPerfPath"] {
       name="RandomPerfPath";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.25;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] {
       name="UniformRndMossy";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] {
       name="SymmetricPrjnSpec";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=SymmetricPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=29: y=20: z=3: };
    max_disp_size2d {x=30: y=193: };
    LeabraLayer @["Input"] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=4: n_not_xy=0: n=4: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=2: y=1: n_not_xy=0: n=2: };
     gp_spc {x=1: y=1: };
     flat_geom {x=2: y=4: n_not_xy=0: n=8: };
     disp_geom {x=3: y=4: n_not_xy=0: n=20: };
     scaled_disp_geom {x=3: y=4: n_not_xy=0: n=1: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_Input"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs["Input_Output"]$$: };
    };
    Layer_Group @.gp["Hippocampus"] {
     name="Hippocampus";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=64: };
     max_disp_size {x=29: y=20: z=3: };
     max_disp_size2d {x=30: y=129: };
     LeabraLayer @["EC_in"] {
      name="EC_in";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=13: y=0: z=0: };
      pos2d {x=0: y=0: };
      disp_scale=1;
      un_geom {x=1: y=4: n_not_xy=0: n=4: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=1: n_not_xy=0: n=2: };
      gp_spc {x=1: y=1: };
      flat_geom {x=2: y=4: n_not_xy=0: n=8: };
      disp_geom {x=3: y=4: n_not_xy=0: n=20: };
      scaled_disp_geom {x=3: y=4: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["EC_out"]$$;
	spec {type=OneToOnePrjnSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_EC_in"]$$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_Input"] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["WPT_lesions"].layers["Input"]$$;
	spec {type=OneToOnePrjnSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=LeabraConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["Input_EC_in"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["DG"].projections["Fm_EC_in"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_EC_in"];
       Projection_Group @. = [2] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_in"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs["EC_in_non_theta"]$$: };
     };
     LeabraLayer @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["enc_sse"] {
	name="enc_sse";
	value 6 0=0;
	val_type_fixed=0;
       };
       UserDataItem @["enc_norm_err"] {
	name="enc_norm_err";
	value 6 0=0;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      desc=;
      flags=0;
      layer_type=TARGET;
      pos {x=26: y=0: z=0: };
      pos2d {x=0: y=64: };
      disp_scale=1;
      un_geom {x=1: y=4: n_not_xy=0: n=4: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=1: n_not_xy=0: n=2: };
      gp_spc {x=1: y=1: };
      flat_geom {x=2: y=4: n_not_xy=0: n=8: };
      disp_geom {x=3: y=4: n_not_xy=0: n=20: };
      scaled_disp_geom {x=3: y=4: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_CA1"] {
	name="Fm_CA1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA1"]$$;
	spec {type=SymmetricPrjnSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["SymmetricPrjnSpec"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["CA1_EC_out"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_EC_out"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs["EC_out_non_theta"]$$: };
     };
     LeabraLayer @["DG"] {
      name="DG";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=1: };
      pos2d {x=0: y=89: };
      disp_scale=1;
      un_geom {x=20: y=20: n_not_xy=0: n=400: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=20: y=20: n_not_xy=0: n=400: };
      disp_geom {x=20: y=20: n_not_xy=0: n=400: };
      scaled_disp_geom {x=20: y=20: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["EC_in"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_DG"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus dentate gyrus";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs["DG_non_theta"]$$: };
     };
     LeabraLayer @["CA3"] {
      name="CA3";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=3: y=0: z=2: };
      pos2d {x=3: y=121: };
      disp_scale=1;
      un_geom {x=10: y=8: n_not_xy=0: n=80: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=8: n_not_xy=0: n=80: };
      disp_geom {x=10: y=8: n_not_xy=0: n=80: };
      scaled_disp_geom {x=10: y=8: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=UniformRndPrjnSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_DG"] {
	name="Fm_DG";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["DG"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["UniformRndMossy"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["Mossy"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=SELF;
	from=.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA3"]$$;
	spec {type=FullPrjnSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA3"]$$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_CA3"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_CA3"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs["CA3_non_theta"]$$: };
     };
     LeabraLayer @["CA1"] {
      name="CA1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=16: y=0: z=2: };
      pos2d {x=20: y=116: };
      disp_scale=1;
      un_geom {x=10: y=10: n_not_xy=0: n=100: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=10: n_not_xy=0: n=100: };
      disp_geom {x=10: y=10: n_not_xy=0: n=100: };
      scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["EC_out"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_CA1"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["CA3"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"]$$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["WPT_lesions"].layers.gp["Hippocampus"]["EC_out"].projections["Fm_CA1"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["WPT_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["WPT_lesions"].specs["CA1_non_theta"]$$: };
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name="Talairach";
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=604;
   n_cons=19296;
   max_prjns=3;
   max_disp_size {x=29: y=20: z=3: };
   max_disp_size2d {x=30: y=193: };
   learn_rule=CTLEABRA_XCAL;
   ti_mode=0;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase_max=2;
   time_inc=1;
   cycle_max=20;
   mid_minus_cycle=-1;
   min_cycles=50;
   min_cycles_phase2=0;
   dwt_norm_enabled=0;
   ct_time {
    use=1;
    minus=80;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=101;
    inhib_start=100;
   };
   ct_sravg {
    manual=0;
    start=60;
    end=1;
    interval=1;
    plus_s_st=19;
    plus_s_only=0;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
   };
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   maxda_stopcrit=-1;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
   cos_diff_on=0;
   cos_diff_auto=1;
  };
  LeabraNetwork @["Dinos"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="Dinos";
   desc=;
   specs {
    name="specs";
    el_typ=BaseSpec;
    el_def=0;
    LeabraLayerSpec @["Input_Output"] {
     name="Input_Output";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_INHIB;
      kwta_pt=0.25;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PAT_K: k=15: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] {
     name="HippoSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["HippoUnitSpec"] {
      name="HippoUnitSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["HippoBiasSpec"]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {gelin=1: thr=0.5: gain=100: nvar=0.005: avg_dt=0.005: avg_init=0.15: rescale_ctxt=1: i_thr=STD: };
      act_lrn_on=0;
      act_lrn {gelin=1: thr=0.5: gain=100: nvar=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_dt=0.02: };
      spike_misc {
       exp_slope=0.02;
       spk_thr=1.2;
       clamp_max_p=0.12;
       clamp_type=REGULAR;
       vm_r=0.3;
       t_r=6;
       vm_dend=0.3;
       vm_dend_dt=0.16;
       vm_dend_time=6.25;
      };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: xcal_lrn=0.01: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      v_m_init {name="v_m_init": type=NONE: mean=0.300000011920929: var=0: par=1: };
      act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
      dt {integ=1: vm=0.3: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=3.333333: net_time=1.428571: };
      act_avg {l_up_add=1: l_dn_pct=1: l_up_dt=0.25: l_dn_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=2.5: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.3: i=0.25: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {
       on=0;
       dt=0.007;
       vm_gain=0.04;
       spike_gain=0.00805;
       interval=10;
       trials=0;
       dt_time=142.8571;
      };
      depress {phase_act=ACT_ND: on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: delay=0: interval=10: trials=0: max_amp=1: };
      syn_delay {
       on=0;
       delay=4;
      };
      cifer {on=0: phase_updt=0: super_gain=0.05: thal_5b_thr=0.5: act_5b_thr=0.5: binary5b=0: ti_5b=0.5: bg_lrate=1: fg_lrate=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] {
      name="EC_CA1ConSpecs";
      desc=;
      unique{ lmix;wt_sig;rel_net_adapt;      };
      children {
       name="children";
       el_typ=HippoEncoderConSpec;
       el_def=0;
       HippoEncoderConSpec @["EC_in_CA1"] {
	name="EC_in_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=3: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] {
	name="CA1_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;rnd;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] {
	name="EC_out_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] {
	name="EC_in_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=0: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] {
	name="EC_out_EC_in";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;lrate;wt_scale;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=2: rel=0.5: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       LeabraConSpec @["Input_EC_in"] {
	name="Input_EC_in";
	desc=;
	unique{ wt_sig;lrate;	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.005: err=0.995: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=1: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] {
      name="HippoConSpecs";
      desc=;
      unique{ lrate;lmix;      };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @["HippoBiasSpec"] {
	name="HippoBiasSpec";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
       XCalCHLConSpec @["PerfPath"] {
	name="PerfPath";
	desc=;
	unique{ wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["Mossy"] {
	name="Mossy";
	desc=;
	unique{ rnd;wt_scale;lrate;rel_net_adapt;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=8: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA3"] {
	name="CA3_CA3";
	desc=;
	unique{ wt_scale;rel_net_adapt;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA1"] {
	name="CA3_CA1";
	desc=;
	unique{ lrate;lmix;wt_scale;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.05;
	cur_lrate=0.05;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.2;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.05: err=0.95: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
      use_chl=1;
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] {
      name="HippoLayerSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=ECoutLayerSpec;
       el_def=0;
       ECoutLayerSpec @["EC_out"] {
	name="EC_out";
	desc=;
	unique{ inhib;clamp;decay;kwta;	};
	children {
	 name="children";
	 el_typ=ECinLayerSpec;
	 el_def=0;
	 ECinLayerSpec @["EC_in"] {
	  name="EC_in";
	  desc=;
	  unique{ decay;clamp;inhib;kwta;	  };
	  children {
	   name="children";
	   el_typ=ECinLayerSpec;
	   el_def=0;
	  };
	  inhib_group=ENTIRE_LAYER;
	  inhib {
	   type=KWTA_AVG_INHIB;
	   kwta_pt=0.5;
	   gi=1.7;
	   ff=1;
	   fb=0.5;
	   self_fb=0;
	   prv_trl_ff=0;
	   prv_phs_ff=0;
	   dt=0.7;
	   up_immed=0;
	   ff0=0.1;
	   min_i=0;
	  };
	  kwta {k_from=USE_PAT_K: k=10: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  clamp {hard=1: gain=0.9: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	  decay {event=1: phase=0: phase2=0: };
	  cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	  ct_inhib_mod {
	   manual_sravg=0;
	   sravg_delay=0;
	   use_sin=0;
	   burst_i=0.02;
	   trough_i=0.02;
	   use_fin=0;
	   inhib_i=0;
	  };
	  tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	  adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	  abs_net_adapt {
	   on=0;
	   trg_net=0.5;
	   tol=0.1;
	   abs_lrate=0.2;
	  };
	  auto_m_cycles=30;
	 };
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.5;
	 gi=1.7;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PAT_K: k=10: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.999: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       LeabraLayerSpec @["DG"] {
	name="DG";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 gi=20;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
       };
       CA3LayerSpec @["CA3"] {
	name="CA3";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=CA3LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=3;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.06: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       CA1LayerSpec @["CA1"] {
	name="CA1";
	desc=;
	unique{ gp_kwta;decay;inhib;kwta;	};
	children {
	 name="children";
	 el_typ=CA1LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=2.2;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
	recall_decay=1;
	use_test_mode=1;
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.5;
       gi=2;
       ff=1;
       fb=0.5;
       self_fb=0;
       prv_trl_ff=0;
       prv_phs_ff=0;
       dt=0.7;
       up_immed=0;
       ff0=0.1;
       min_i=0;
      };
      kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
      decay {event=1: phase=1: phase2=0: };
      cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=0;
       burst_i=0.02;
       trough_i=0.02;
       use_fin=0;
       inhib_i=0;
      };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      auto_m_cycles=30;
     };
     BaseSpec_Group @.gp["HippoPrjns"] {
      name="HippoPrjns";
      el_typ=FullPrjnSpec;
      el_def=0;
      FullPrjnSpec @["FullPrjn"] {
       name="FullPrjn";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=FullPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
      OneToOnePrjnSpec @["OneToOne"] {
       name="OneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=OneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] {
       name="GpOneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=GpOneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      UniformRndPrjnSpec @["RandomPerfPath"] {
       name="RandomPerfPath";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] {
       name="UniformRndMossy";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] {
       name="SymmetricPrjnSpec";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=SymmetricPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=29: y=20: z=3: };
    max_disp_size2d {x=30: y=193: };
    LeabraLayer @["Input"] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=3: y=10: n_not_xy=0: n=30: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=3: y=10: n_not_xy=0: n=30: };
     disp_geom {x=3: y=10: n_not_xy=0: n=30: };
     scaled_disp_geom {x=3: y=10: n_not_xy=0: n=1: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_Input"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Dinos"].specs["Input_Output"]$$: };
    };
    Layer_Group @.gp["Hippocampus"] {
     name="Hippocampus";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=64: };
     max_disp_size {x=29: y=20: z=3: };
     max_disp_size2d {x=30: y=129: };
     LeabraLayer @["EC_in"] {
      name="EC_in";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=13: y=0: z=0: };
      pos2d {x=0: y=0: };
      disp_scale=1;
      un_geom {x=3: y=10: n_not_xy=0: n=30: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=3: y=10: n_not_xy=0: n=30: };
      disp_geom {x=3: y=10: n_not_xy=0: n=30: };
      scaled_disp_geom {x=3: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["EC_out"]$$;
	spec {type=OneToOnePrjnSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_EC_in"]$$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_Input"] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos"].layers["Input"]$$;
	spec {type=OneToOnePrjnSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=LeabraConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["Input_EC_in"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["DG"].projections["Fm_EC_in"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA3"].projections["Fm_EC_in"];
       Projection_Group @. = [2] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_in"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=ECinLayerSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"].children["EC_in"]$$: };
     };
     LeabraLayer @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["enc_sse"] {
	name="enc_sse";
	value 6 0=0.4727262556552887;
	val_type_fixed=0;
       };
       UserDataItem @["enc_norm_err"] {
	name="enc_norm_err";
	value 6 0=0.06666667014360428;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      desc=;
      flags=0;
      layer_type=TARGET;
      pos {x=26: y=0: z=0: };
      pos2d {x=0: y=64: };
      disp_scale=1;
      un_geom {x=3: y=10: n_not_xy=0: n=30: };
      unit_groups=0;
      virt_groups=0;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=3: y=10: n_not_xy=0: n=30: };
      disp_geom {x=3: y=10: n_not_xy=0: n=30: };
      scaled_disp_geom {x=3: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_CA1"] {
	name="Fm_CA1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA1"]$$;
	spec {type=SymmetricPrjnSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["SymmetricPrjnSpec"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["CA1_EC_out"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_EC_out"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=ECoutLayerSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"]$$: };
     };
     LeabraLayer @["DG"] {
      name="DG";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=1: };
      pos2d {x=0: y=89: };
      disp_scale=1;
      un_geom {x=20: y=20: n_not_xy=0: n=400: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=20: y=20: n_not_xy=0: n=400: };
      disp_geom {x=20: y=20: n_not_xy=0: n=400: };
      scaled_disp_geom {x=20: y=20: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["EC_in"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA3"].projections["Fm_DG"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus dentate gyrus";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["DG"]$$: };
     };
     LeabraLayer @["CA3"] {
      name="CA3";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=3: y=0: z=2: };
      pos2d {x=3: y=121: };
      disp_scale=1;
      un_geom {x=10: y=8: n_not_xy=0: n=80: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=8: n_not_xy=0: n=80: };
      disp_geom {x=10: y=8: n_not_xy=0: n=80: };
      scaled_disp_geom {x=10: y=8: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=UniformRndPrjnSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_DG"] {
	name="Fm_DG";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["DG"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["UniformRndMossy"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["Mossy"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=SELF;
	from=.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA3"]$$;
	spec {type=FullPrjnSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA3"]$$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA3"].projections["Fm_CA3"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA1"].projections["Fm_CA3"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=CA3LayerSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA3"]$$: };
     };
     LeabraLayer @["CA1"] {
      name="CA1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=16: y=0: z=2: };
      pos2d {x=20: y=116: };
      disp_scale=1;
      un_geom {x=10: y=10: n_not_xy=0: n=100: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=10: n_not_xy=0: n=100: };
      disp_geom {x=10: y=10: n_not_xy=0: n=100: };
      scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["EC_out"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_CA1"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["CA3"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"]$$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos"].layers.gp["Hippocampus"]["EC_out"].projections["Fm_CA1"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=CA1LayerSpec: spec=.projects["hip_cat"].networks["Dinos"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA1"]$$: };
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name="Talairach";
   train_mode=TEST;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=6.953293389055403e-310;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=670;
   n_cons=25940;
   max_prjns=3;
   max_disp_size {x=29: y=20: z=3: };
   max_disp_size2d {x=30: y=193: };
   learn_rule=CTLEABRA_XCAL;
   ti_mode=0;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase_max=1;
   time_inc=1;
   cycle_max=80;
   mid_minus_cycle=-1;
   min_cycles=50;
   min_cycles_phase2=0;
   dwt_norm_enabled=0;
   ct_time {
    use=1;
    minus=80;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=101;
    inhib_start=100;
   };
   ct_sravg {
    manual=0;
    start=60;
    end=1;
    interval=1;
    plus_s_st=19;
    plus_s_only=0;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
   };
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   maxda_stopcrit=-1;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
   cos_diff_on=0;
   cos_diff_auto=1;
  };
  LeabraNetwork @["Dinos_lesions"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="Dinos_lesions";
   desc=;
   specs {
    name="specs";
    el_typ=BaseSpec;
    el_def=0;
    LeabraLayerSpec @["Input_Output"] {
     name="Input_Output";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_INHIB;
      kwta_pt=0.25;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PAT_K: k=15: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["EC_out_non_theta"] {
     name="EC_out_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.5;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PAT_K: k=10: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=5: pct=0.23: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["EC_in_non_theta"] {
     name="EC_in_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.5;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PAT_K: k=10: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=5: pct=0.23: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["CA3_non_theta"] {
     name="CA3_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.7;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.06: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["CA1_non_theta"] {
     name="CA1_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.7;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.25: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraLayerSpec @["DG_non_theta"] {
     name="DG_non_theta";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.9;
      gi=2;
      ff=1;
      fb=0.5;
      self_fb=0;
      prv_trl_ff=0;
      prv_phs_ff=0;
      dt=0.7;
      up_immed=0;
      ff0=0.1;
      min_i=0;
     };
     kwta {k_from=USE_PCT: k=6: pct=0.01: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp["HippoSpecs"] {
     name="HippoSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["HippoUnitSpec"] {
      name="HippoUnitSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["HippoBiasSpec"]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {gelin=1: thr=0.5: gain=100: nvar=0.005: avg_dt=0.005: avg_init=0.15: rescale_ctxt=1: i_thr=STD: };
      act_lrn_on=0;
      act_lrn {gelin=1: thr=0.5: gain=100: nvar=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_dt=0.02: };
      spike_misc {
       exp_slope=0.02;
       spk_thr=1.2;
       clamp_max_p=0.12;
       clamp_type=REGULAR;
       vm_r=0.3;
       t_r=6;
       vm_dend=0.3;
       vm_dend_dt=0.16;
       vm_dend_time=6.25;
      };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: xcal_lrn=0.01: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      v_m_init {name="v_m_init": type=NONE: mean=0.300000011920929: var=0: par=1: };
      act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
      dt {integ=1: vm=0.3: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=3.333333: net_time=1.428571: };
      act_avg {l_up_add=1: l_dn_pct=1: l_up_dt=0.25: l_dn_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=2.5: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.3: i=0.25: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {
       on=0;
       dt=0.007;
       vm_gain=0.04;
       spike_gain=0.00805;
       interval=10;
       trials=0;
       dt_time=142.8571;
      };
      depress {phase_act=ACT_ND: on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: delay=0: interval=10: trials=0: max_amp=1: };
      syn_delay {
       on=0;
       delay=4;
      };
      cifer {on=0: phase_updt=0: super_gain=0.05: thal_5b_thr=0.5: act_5b_thr=0.5: binary5b=0: ti_5b=0.5: bg_lrate=1: fg_lrate=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     HippoEncoderConSpec @["EC_CA1ConSpecs"] {
      name="EC_CA1ConSpecs";
      desc=;
      unique{ lmix;wt_sig;rel_net_adapt;      };
      children {
       name="children";
       el_typ=HippoEncoderConSpec;
       el_def=0;
       HippoEncoderConSpec @["EC_in_CA1"] {
	name="EC_in_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=3: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["CA1_EC_out"] {
	name="CA1_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;rnd;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_CA1"] {
	name="EC_out_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.002;
	cur_lrate=0.002;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_in_EC_out"] {
	name="EC_in_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=0: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       HippoEncoderConSpec @["EC_out_EC_in"] {
	name="EC_out_EC_in";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;lrate;wt_scale;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=2: rel=0.5: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       LeabraConSpec @["Input_EC_in"] {
	name="Input_EC_in";
	desc=;
	unique{ wt_sig;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.005: err=0.995: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=1: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     XCalCHLConSpec @["HippoConSpecs"] {
      name="HippoConSpecs";
      desc=;
      unique{ lrate;lmix;      };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @["HippoBiasSpec"] {
	name="HippoBiasSpec";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
       XCalCHLConSpec @["PerfPath"] {
	name="PerfPath";
	desc=;
	unique{ wt_scale;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["Mossy"] {
	name="Mossy";
	desc=;
	unique{ rnd;wt_scale;lrate;rel_net_adapt;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=8: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA3"] {
	name="CA3_CA3";
	desc=;
	unique{ wt_scale;rel_net_adapt;lrate;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
       XCalCHLConSpec @["CA3_CA1"] {
	name="CA3_CA1";
	desc=;
	unique{ lrate;lmix;wt_scale;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.05;
	cur_lrate=0.05;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	use_chl=1;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.05: err=0.95: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
      use_chl=1;
     };
     ThetaPhaseLayerSpec @["HippoLayerSpec"] {
      name="HippoLayerSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=ECoutLayerSpec;
       el_def=0;
       ECoutLayerSpec @["EC_out"] {
	name="EC_out";
	desc=;
	unique{ inhib;clamp;decay;kwta;gp_kwta;	};
	children {
	 name="children";
	 el_typ=ECinLayerSpec;
	 el_def=0;
	 ECinLayerSpec @["EC_in"] {
	  name="EC_in";
	  desc=;
	  unique{ decay;clamp;inhib;kwta;gp_kwta;	  };
	  children {
	   name="children";
	   el_typ=ECinLayerSpec;
	   el_def=0;
	  };
	  inhib_group=ENTIRE_LAYER;
	  inhib {
	   type=KWTA_AVG_INHIB;
	   kwta_pt=0.5;
	   gi=1.7;
	   ff=1;
	   fb=0.5;
	   self_fb=0;
	   prv_trl_ff=0;
	   prv_phs_ff=0;
	   dt=0.7;
	   up_immed=0;
	   ff0=0.1;
	   min_i=0;
	  };
	  kwta {k_from=USE_PAT_K: k=10: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  gp_kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  clamp {hard=1: gain=0.9: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	  decay {event=1: phase=0: phase2=0: };
	  cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	  ct_inhib_mod {
	   manual_sravg=0;
	   sravg_delay=0;
	   use_sin=0;
	   burst_i=0.02;
	   trough_i=0.02;
	   use_fin=0;
	   inhib_i=0;
	  };
	  tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	  adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	  abs_net_adapt {
	   on=0;
	   trg_net=0.5;
	   tol=0.1;
	   abs_lrate=0.2;
	  };
	  auto_m_cycles=30;
	 };
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.5;
	 gi=1.7;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PAT_K: k=10: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_K: k=6: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.999: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       LeabraLayerSpec @["DG"] {
	name="DG";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 gi=20;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
       };
       CA3LayerSpec @["CA3"] {
	name="CA3";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=CA3LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=3;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.06: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
       };
       CA1LayerSpec @["CA1"] {
	name="CA1";
	desc=;
	unique{ gp_kwta;decay;inhib;kwta;	};
	children {
	 name="children";
	 el_typ=CA1LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.7;
	 gi=2.2;
	 ff=1;
	 fb=0.5;
	 self_fb=0;
	 prv_trl_ff=0;
	 prv_phs_ff=0;
	 dt=0.7;
	 up_immed=0;
	 ff0=0.1;
	 min_i=0;
	};
	kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=0;
	 burst_i=0.02;
	 trough_i=0.02;
	 use_fin=0;
	 inhib_i=0;
	};
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	auto_m_cycles=30;
	recall_decay=1;
	use_test_mode=1;
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.5;
       gi=2;
       ff=1;
       fb=0.5;
       self_fb=0;
       prv_trl_ff=0;
       prv_phs_ff=0;
       dt=0.7;
       up_immed=0;
       ff0=0.1;
       min_i=0;
      };
      kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
      decay {event=1: phase=1: phase2=0: };
      cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=0;
       burst_i=0.02;
       trough_i=0.02;
       use_fin=0;
       inhib_i=0;
      };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      auto_m_cycles=30;
     };
     BaseSpec_Group @.gp["HippoPrjns"] {
      name="HippoPrjns";
      el_typ=FullPrjnSpec;
      el_def=0;
      FullPrjnSpec @["FullPrjn"] {
       name="FullPrjn";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=FullPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
      OneToOnePrjnSpec @["OneToOne"] {
       name="OneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=OneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      GpOneToOnePrjnSpec @["GpOneToOne"] {
       name="GpOneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=GpOneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      UniformRndPrjnSpec @["RandomPerfPath"] {
       name="RandomPerfPath";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      UniformRndPrjnSpec @["UniformRndMossy"] {
       name="UniformRndMossy";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;	};
	mti=566;
	is_gauss_double_cached=0;
	cached_gauss_double=0;
       };
      };
      SymmetricPrjnSpec @["SymmetricPrjnSpec"] {
       name="SymmetricPrjnSpec";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=SymmetricPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=29: y=20: z=3: };
    max_disp_size2d {x=30: y=193: };
    LeabraLayer @["Input"] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=3: y=10: n_not_xy=0: n=30: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=3: y=10: n_not_xy=0: n=30: };
     disp_geom {x=3: y=10: n_not_xy=0: n=30: };
     scaled_disp_geom {x=3: y=10: n_not_xy=0: n=1: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_Input"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs["Input_Output"]$$: };
    };
    Layer_Group @.gp["Hippocampus"] {
     name="Hippocampus";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=64: };
     max_disp_size {x=29: y=20: z=3: };
     max_disp_size2d {x=30: y=129: };
     LeabraLayer @["EC_in"] {
      name="EC_in";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=13: y=0: z=0: };
      pos2d {x=0: y=0: };
      disp_scale=1;
      un_geom {x=3: y=10: n_not_xy=0: n=30: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=3: y=10: n_not_xy=0: n=30: };
      disp_geom {x=3: y=10: n_not_xy=0: n=30: };
      scaled_disp_geom {x=3: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["EC_out"]$$;
	spec {type=OneToOnePrjnSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_EC_in"]$$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_Input"] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos_lesions"].layers["Input"]$$;
	spec {type=OneToOnePrjnSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=LeabraConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["Input_EC_in"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["DG"].projections["Fm_EC_in"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_EC_in"];
       Projection_Group @. = [2] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_in"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs["EC_in_non_theta"]$$: };
     };
     LeabraLayer @["EC_out"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["enc_sse"] {
	name="enc_sse";
	value 6 0=0;
	val_type_fixed=0;
       };
       UserDataItem @["enc_norm_err"] {
	name="enc_norm_err";
	value 6 0=0;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      desc=;
      flags=0;
      layer_type=TARGET;
      pos {x=26: y=0: z=0: };
      pos2d {x=0: y=64: };
      disp_scale=1;
      un_geom {x=3: y=10: n_not_xy=0: n=30: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=3: y=10: n_not_xy=0: n=30: };
      disp_geom {x=3: y=10: n_not_xy=0: n=30: };
      scaled_disp_geom {x=3: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_CA1"] {
	name="Fm_CA1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA1"]$$;
	spec {type=SymmetricPrjnSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["SymmetricPrjnSpec"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["CA1_EC_out"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_EC_out"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs["EC_out_non_theta"]$$: };
     };
     LeabraLayer @["DG"] {
      name="DG";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=1: };
      pos2d {x=3: y=89: };
      disp_scale=1;
      un_geom {x=20: y=20: n_not_xy=0: n=400: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=20: y=20: n_not_xy=0: n=400: };
      disp_geom {x=20: y=20: n_not_xy=0: n=400: };
      scaled_disp_geom {x=20: y=20: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["EC_in"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_DG"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus dentate gyrus";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs["DG_non_theta"]$$: };
     };
     LeabraLayer @["CA3"] {
      name="CA3";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=3: y=0: z=2: };
      pos2d {x=3: y=121: };
      disp_scale=1;
      un_geom {x=10: y=8: n_not_xy=0: n=80: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=8: n_not_xy=0: n=80: };
      disp_geom {x=10: y=8: n_not_xy=0: n=80: };
      scaled_disp_geom {x=10: y=8: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=UniformRndPrjnSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_DG"] {
	name="Fm_DG";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["DG"]$$;
	spec {type=UniformRndPrjnSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["UniformRndMossy"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["Mossy"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=SELF;
	from=.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA3"]$$;
	spec {type=FullPrjnSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA3"]$$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA3"].projections["Fm_CA3"];
       Projection_Group @. = [1] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA1"].projections["Fm_CA3"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs["CA3_non_theta"]$$: };
     };
     LeabraLayer @["CA1"] {
      name="CA1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=16: y=0: z=2: };
      pos2d {x=20: y=116: };
      disp_scale=1;
      un_geom {x=10: y=10: n_not_xy=0: n=100: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=10: n_not_xy=0: n=100: };
      disp_geom {x=10: y=10: n_not_xy=0: n=100: };
      scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_EC_in"] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["EC_in"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_EC_out"] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["EC_out"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_CA1"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @["Fm_CA3"] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["CA3"]$;
	spec {type=FullPrjnSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"]$$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["hip_cat"].networks["Dinos_lesions"].layers.gp["Hippocampus"]["EC_out"].projections["Fm_CA1"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["hip_cat"].networks["Dinos_lesions"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.projects["hip_cat"].networks["Dinos_lesions"].specs["CA1_non_theta"]$$: };
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name="Talairach";
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=670;
   n_cons=25940;
   max_prjns=3;
   max_disp_size {x=29: y=20: z=3: };
   max_disp_size2d {x=30: y=193: };
   learn_rule=CTLEABRA_XCAL;
   ti_mode=0;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase_max=2;
   time_inc=1;
   cycle_max=20;
   mid_minus_cycle=-1;
   min_cycles=50;
   min_cycles_phase2=0;
   dwt_norm_enabled=0;
   ct_time {
    use=1;
    minus=80;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=101;
    inhib_start=100;
   };
   ct_sravg {
    manual=0;
    start=60;
    end=1;
    interval=1;
    plus_s_st=19;
    plus_s_only=0;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
   };
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   maxda_stopcrit=-1;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
   cos_diff_on=0;
   cos_diff_auto=1;
  };
 };
};
